{"version":3,"sources":["webpack:///vue-nvd3.js","webpack:///webpack/bootstrap 443ef3a41518fe05bb03","webpack:///./src/components/index.js","webpack:///./src/components/BaseChartMixin.js","webpack:///./~/nvd3/build/nv.d3.js","webpack:///external \"d3\"","webpack:///./src/components/BarChart.js","webpack:///./src/components/BubbleChart.js","webpack:///./src/components/HBarChart.js","webpack:///./src/components/LineBarChart.js","webpack:///./src/components/LineChart.js","webpack:///./src/components/PieChart.js","webpack:///./src/components/StackedAreaChart.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_LineChart","_LineChart2","_LineBarChart","_LineBarChart2","_PieChart","_PieChart2","_HBarChart","_HBarChart2","_BarChart","_BarChart2","_BubbleChart","_BubbleChart2","_StackedAreaChart","_StackedAreaChart2","Vue","options","component","props","model","type","Array","height","String","data","chartRef","undefined","watch","this","redraw","methods","chart","d3","select","$refs","style","datum","transition","duration","render","h","ref","nv","dev","tooltip","utils","models","charts","logs","dom","dispatch","Function","prototype","bind","oThis","TypeError","aArgs","slice","arguments","fToBind","fNOP","fBound","apply","concat","on","e","startTime","Date","endTime","totalTime","log","window","console","length","deprecated","name","info","warn","step","active","render_start","renderLoop","graph","i","queue","generate","callback","splice","setTimeout","render_end","addGraph","push","write","fastdom","mutate","read","measure","interactiveGuideline","layer","selection","each","mouseHandler","d3mouse","mouse","mouseX","mouseY","subtractMargin","mouseOutAnyReason","isMSIE","event","offsetX","offsetY","target","tagName","className","baseVal","match","margin","left","top","availableWidth","availableHeight","relatedTarget","ownerSVGElement","nvPointerEventsClass","elementMouseout","renderGuideLine","hidden","scaleIsOrdinal","xScale","rangeBands","pointXValue","elementIndex","bisect","range","rangeBand","domain","invert","elementMousemove","elementDblclick","elementClick","elementMouseDown","elementMouseUp","container","width","wrap","selectAll","wrapEnter","enter","append","attr","svgContainer","guideLine","x","showGuideLine","line","NaNtoZero","d","exit","remove","scale","linear","ActiveXObject","hideDelay","_","interactiveBisect","values","searchVal","xAccessor","_xAccessor","_cmp","v","bisector","index","max","currentValue","nextIndex","min","nextValue","Math","abs","nearestValueIndex","threshold","yDistMax","Infinity","indexToHighlight","forEach","delta","initTooltip","node","document","body","classes","classed","nvtooltip","enabled","dataSeriesExists","newContent","contentGenerator","innerHTML","positionTooltip","floor","random","gravity","distance","snapDistance","lastPosition","headerEnabled","valueFormatter","headerFormatter","keyFormatter","table","createElement","theadEnter","html","tbodyEnter","trowEnter","series","highlight","color","total","key","filter","percent","format","opacityScale","opacity","outerHTML","footer","position","pos","clientX","clientY","getComputedStyle","transform","client","getBoundingClientRect","isArray","isObject","calcGravityOffset","tmp","offsetHeight","offsetWidth","clientWidth","documentElement","clientHeight","gravityOffset","interrupt","delay","old_translate","new_translate","round","translateInterpolator","interpolateString","is_hidden","styleTween","optionsFunc","_options","create","get","set","chartContainer","fixedTop","offset","point","y","initOptions","windowSize","size","innerWidth","innerHeight","compatMode","a","isFunction","isDate","toString","isNumber","isNaN","windowResize","handler","addEventListener","clear","removeEventListener","getColor","defaultColor","color_scale","ordinal","category20","customTheme","dictionary","getKey","defaultColors","defIndex","pjax","links","content","load","href","fragment","parentNode","replaceChild","history","pushState","textContent","preventDefault","state","calcApproxTextWidth","svgTextElem","text","fontSize","parseInt","replace","textLength","n","watchTransition","renderWatch","args","_duration","renderStack","self","__rendered","arg","renderEnd","indexOf","reset","pop","every","deepExtend","dst","sources","source","srcObj","_setState","_getState","init","changed","getter","fn","setter","update","_set","settings","JSON","stringify","change","map","calcTicksX","numTicks","numValues","stream_len","calcTicksY","initOption","_calls","_overrides","ops","getOwnPropertyNames","calls","inheritOptionsD3","d3_source","oplist","_d3options","unshift","rebind","arrayUnique","sort","item","symbolMap","symbol","t","s","svg","symbolTypes","functor","inheritOptions","inherited","_inherited","d3ops","initSVG","nvd3-svg","sanitizeHeight","sanitizeWidth","bottom","right","noData","opt","noDataText","wrapTicks","word","words","split","reverse","lineNumber","lineHeight","dy","parseFloat","tspan","join","getComputedTextLength","arrayEquals","array1","array2","l","axis","g","ticks","orient","scale0","fmt","tickFormat","axisLabel","axisLabelText","xLabelMargin","axisMaxMin","w","isOrdinal","showMaxMin","tickPadding","axisLabelDistance","maxTextWidth","textHeight","xTicks","rotateLabelsRule","rotateLabels","box","sin","PI","staggerLabels","rotateYLabel","maxMinRange","err","copy","boxPlot","xDomain","getX","xRange","yData","yDomain","yMin","yMax","q1","getQ1","q3","getQ3","wl","getWl","wh","getWh","olItems","getOlItems","getOlValue","yScale","yRange","xScale0","yScale0","boxplots","boxEnter","j","hover","f","box_width","maxBoxWidth","box_left","box_right","endpoint","elementMouseover","getQ2","outliers","getOlColor","getOlLabel","label","Q1","Q2","Q3","whisker_low","whisker_high","q2","itemColor","outlierValue","outlierLabel","outlierColor","boxPlotChart","boxplot","showXAxis","xAxis","showYAxis","yAxis","beforeUpdate","clamp","gEnter","defsEnter","rightAlignYAxis","barsWrap","disabled","tickSize","evt","tooltipContent","bullet","sortLabels","labels","lz","b","iA","iB","descending","rangez","ranges","markerz","markers","markerLinez","markerLines","measurez","measures","rangeLabelz","rangeLabels","markerLabelz","markerLabels","markerLineLabelz","markerLineLabels","measureLabelz","measureLabels","x1","extent","merge","forceX","__chart__","il","rangeClassNames","legacyRangeClassNames","w1","xp1","h3","markerData","marker","markerLinesData","defaultRangeLabels","bulletChart","x0","title","subtitle","bulletWrap","tick","tickEnter","tickUpdate","timer","flush","candlestickBar","barWidth","padData","getLow","forceY","getHigh","chartClick","clipEdge","tickGroups","getOpen","getClose","getY","open","close","high","low","interactive","highlightPoint","pointIndex","isHoverOver","clearHighlights","cumulativeLineChart","lines","dragStart","dragMove","dx","updateZero","dragEnd","stateChange","indexLine","oldDuration","stateSetter","stateGetter","defaultState","indexDrag","behavior","drag","rescaleY","seriesDomains","initialDomain","completeDomain","indexify","interactivePointerEvents","showLegend","legend","marginTop","showControls","controlsData","controls","rightAlign","tempDisabled","useInteractiveGuideline","interactiveLayer","display","linesWrap","seriesIndex","avgLineData","average","avgLines","getAvgLineY","yVal","_ticks","newState","singlePoint","pointXLocation","allData","yValue","domainExtent","xValue","idx","indexifyYGetter","indexValue","noErrorCheck","updateState","useVoronoi","discreteBar","seriesData","y0","showValues","groups","bars","barsEnter","element","stopPropagation","elementDblClick","valueFormat","rectClass","discreteBarChart","discretebar","wrapLabels","distribution","naxis","distWrap","dist","getData","focus","resizePath","updateBrushBG","brush","empty","brushExtent","brushBG","leftWidth","rightWidth","onBrush","shouldDispatch","contentWrap","syncBrushing","brushBGenter","gBrush","pointActive","interpolate","xTickFormat","yTickFormat","forceDirectedGraph","nodes","nodeFieldSet","Set","keys","add","force","layout","linkStrength","friction","linkDistance","linkDist","charge","theta","alpha","start","link","sqrt","radius","py","px","nodeColor","field","linkExtras","nodeExtras","furiousLegend","setTextColor","vers","expanded","disengaged","setBGColor","seriesShape","seriesEnter","property","seriesCheckbox","seriesText","legendMouseover","legendMouseout","legendClick","radioButtonMode","userDisabled","engaged","legendDblclick","versPadding","align","seriesWidths","legendText","maxKeyLength","trimmedKey","substring","nodeTextLength","Error","padding","seriesPerRow","legendWidth","columnWidths","k","reduce","prev","cur","array","xPositions","curX","ceil","xpos","ypos","newxpos","maxwidth","historicalBar","rval","historicalBarChart","bar_model","transitionDuration","tooltipHide","ohlcBarChart","ohlcBar","candlestickBarChart","setBGOpacity","insert","seriesBG","scatter","scatterWrap","strokeWidth","fillOpacity","areaPaths","isArea","area","defined","y1","linePaths","pointSize","pointDomain","lineChart","updateXAxis","updateYAxis","focusLinesWrap","disableTooltip","focusEnable","focusEnter","legendPosition","currentValues","pointYValue","defaultValueFormatter","yPos","x2Axis","y2Axis","focusHeight","focusShowAxisX","focusShowAxisY","focusMargin","lineWithFocusChart","linePlusBarChart","availableHeight2","x2","availableHeight1","bar","focusBarsWrap","dataBars","allDisabled","dataLines","dataLine","switchYAxisOrder","y1Axis","y2","barsOpacity","linesOpacity","y1Opacity","y2Opacity","margin2","y3","lines2","bars2","y4","series1","series2","contextEnter","legendXPosition","originalKey","legendRightAxisHint","legendLeftAxisHint","bars2Wrap","lines2Wrap","y3Axis","y4Axis","getBarsAxis","main","getLinesAxis","multiBar","nonStackableCount","hideable","stacked","parsed","stack","stackOffset","nonStackable","nonStackableSeries","posBase","negBase","groupSpacing","exitTransition","last_datalength","barColor","rgb","darker","barSelection","multiBarChart","multibar","controlWidth","controlLabels","grouped","getTranslate","staggerUp","staggerDown","totalInBetweenTicks","reduceXTicks","multiBarHorizontal","valuePadding","getYerr","xerr","mid","path","yerr","showBarLabels","yErr","multiBarHorizontalChart","multiChart","mouseover_line","yaxis","yAxis2","yAxis1","mouseover_scatter","mouseover_stack","stack1","mouseover_bar","bars1","serieIndex","dataLines1","dataLines2","dataScatters1","dataScatters2","dataBars1","dataBars2","dataStack1","dataStack2","color_array","lines1","scatters1","scatters2","stack2","lines1Wrap","scatters1Wrap","bars1Wrap","stack1Wrap","scatters2Wrap","stack2Wrap","extraValue1","aVal","extraValue2","yScale1","yDomain1","yScale2","yDomain2","stackedArea","parallelCoordinates","enabledDimensions","displayMissingValuesline","axisWithUndefinedValues","newscale","missingValuesline","missingValueslineText","restoreBrush","visible","filters","brushDomain","dimension","hasOnlyNaN","oldDomainMaxValue","hasNaN","dimensions","updateTicks","brushstart","displayBrush","actives","dimensionNames","extents","foreground","isActive","brushend","hasActiveBrush","brushEnd","currentTicks","tickValues","dragging","__origin__","background","dimensionPosition","currentPosition","dimensionsOrder","newData","val","dataValues","dimensionData","rangePoints","onlyUndefinedValues","tension","lineTension","axisDrag","lineData","undefinedValuesLabel","dimensionsEnter","formerActive","activeChanged","dimensionFormats","parallelCoordinatesChart","originalPosition","parallelCoordinatesWrap","isSorted","nanValue","str","tp","dim","dd","pie","arcTween","endAngle","startAngle","donut","innerRadius","_current","arcs","arcsRadiusOuter","arcsRadiusInner","arcsRadius","outer","inner","donutRatio","growOnHover","g_pie","arcsOver","arc","outerRadius","arcOver","cornerRadius","padAngle","titleOffset","slices","pieLabels","ae","attrTween","showLabels","labelsArc","labelsOutside","group","labelSunbeamLayout","rotateAngle","centroid","labelLocationHash","avgHeight","avgWidth","createHashKey","coordinates","getSlicePercentage","center","labelThreshold","hashKey","labelType","pieLabelsOutside","donutLabelsOutside","labelFormat","pieChart","pieWrap","showTooltipPercent","sankey","computeNodeLinks","sourceLinks","targetLinks","computeNodeValues","sum","computeNodeBreadths","nextNodes","remainingNodes","nodeWidth","sinksRight","moveSinksRight","scaleNodeBreadths","kx","computeNodeDepths","iterations","initializeNodeDepth","ky","nodesByBreadth","nodePadding","relaxLeftToRight","weightedSource","sy","breadth","relaxRightToLeft","weightedTarget","ty","resolveCollisions","ascendingDepth","nest","sortKeys","ascending","entries","computeLinkDepths","ascendingSourceDepth","ascendingTargetDepth","relayout","xi","interpolateNumber","curvature","x3","linkPath","sankeyChart","dragmove","testData","isDataValid","dataAvailable","error","showError","linkTitle","origin","appendChild","nodeFillColor","nodeStrokeColor","nodeTitle","units","formatNumber","message","nodeStyle","fillColor","strokeColor","getCache","_cache","delCache","getDiffs","cache","diffs","hasOwnProperty","updateInteractiveLayer","needsUpdate","vertices","groupIndex","pX","pY","pointArray","bounds","geom","polygon","voronoi","clip","pointPaths","vPointPaths","showVoronoi","clipVoronoi","pointClips","clipRadius","mouseEventCallback","el","mDispatch","scrollTop","pageYOffset","scrollLeft","pageXOffset","relativePos","logScale","sizeDomain","getSize","padDataOuter","z","forceSize","sizeRange","_sizeRange_def","z0","scaleDiff","width0","height0","sizeDiff","pointBorderColor","points","getShape","titles","interactiveUpdateDelay","clearTimeout","timeoutID","shape","notActive","pointScale","pointRange","forcePoint","pointShape","scatterChart","showDistX","distX","showDistY","distY","regWrap","regLine","intercept","slope","sparkline","paths","result","yValues","maxPoint","lastIndexOf","minPoint","currentPoint","showMinMaxPoints","showCurrentPoint","animate","sparklinePlus","updateValueLine","paused","hoverValue","hoverEnter","sparklineHover","getClosestIndex","closestIndex","sparklineWrap","showLastValue","valueWrap","rightAlignValue","alignValue","dataRaw","aseries","dataFiltered","order","out","zeroArea","areaMouseover","pageX","pageY","areaMouseout","areaClick","d3_stackedOffset_stackPercent","stackData","o","stackedAreaChart","currentFormat","oldYTickFormat","percentFormatter","stackedWrap","xAxisHeight","legendTop","metaKey","stream","stack_percent","controlOptions","requiredTop","valueSum","allNullValues","tooltipValue","showTotalInTooltip","stackedY0","stackedY","totalLabel","oldValueFormatter","stackedAreaWithFocusChart","sunburst","rotationToAvoidUpsideDown","centerAngle","computeCenterAngle","computeNodePercentage","labelThresholdMatched","arcTweenZoom","xd","yd","yr","arcTweenUpdate","ipo","dx0","dy0","updatePrevPosition","prevPositions","pP","storeRetrievePrevPositions","zoomClick","depth","arcText","getBBox","rotation","partition","modes","mode","cG","cGE","groupColorByParent","children","parent","count","d1","d2","sunburstChart","version","_nvd","_nvd2","_BaseChartMixin","_BaseChartMixin2","mixins","textField","valueField","Boolean","tooltips","colors","mounted","_this","valField","_d","_d2","xFormat","yFormat","category10","Number","x2Format","y1Format","y2Format","xaxis"],"mappings":"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","file":"vue-nvd3.js","sourcesContent":["/*!\n * VueNVD3 v1.0.0 (https://github.com/DotNetAge/vue-nvd3)\n * (c) 2017 Ray Liang\n * Released under the MIT License.\n */\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _LineChart = __webpack_require__(8);\n\t\n\tvar _LineChart2 = _interopRequireDefault(_LineChart);\n\t\n\tvar _LineBarChart = __webpack_require__(7);\n\t\n\tvar _LineBarChart2 = _interopRequireDefault(_LineBarChart);\n\t\n\tvar _PieChart = __webpack_require__(9);\n\t\n\tvar _PieChart2 = _interopRequireDefault(_PieChart);\n\t\n\tvar _HBarChart = __webpack_require__(6);\n\t\n\tvar _HBarChart2 = _interopRequireDefault(_HBarChart);\n\t\n\tvar _BarChart = __webpack_require__(4);\n\t\n\tvar _BarChart2 = _interopRequireDefault(_BarChart);\n\t\n\tvar _BubbleChart = __webpack_require__(5);\n\t\n\tvar _BubbleChart2 = _interopRequireDefault(_BubbleChart);\n\t\n\tvar _StackedAreaChart = __webpack_require__(10);\n\t\n\tvar _StackedAreaChart2 = _interopRequireDefault(_StackedAreaChart);\n\t\n\t__webpack_require__(11);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = function (Vue, options) {\n\t  Vue.component('vn-line', _LineChart2.default);\n\t  Vue.component('vn-line-bar', _LineBarChart2.default);\n\t  Vue.component('vn-pie', _PieChart2.default);\n\t  Vue.component('vn-hbar', _HBarChart2.default);\n\t  Vue.component('vn-bar', _BarChart2.default);\n\t  Vue.component('vn-bubble', _BubbleChart2.default);\n\t  Vue.component('vn-stacked-area', _StackedAreaChart2.default);\n\t};\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = {\n\t  props: {\n\t    model: { type: Array },\n\t    height: { type: String, default: '300px' }\n\t  },\n\t  data: function data() {\n\t    return {\n\t      chartRef: undefined\n\t    };\n\t  },\n\t\n\t  watch: {\n\t    model: function model(value) {\n\t      if (this.chartRef) {\n\t        this.redraw(this.chartRef);\n\t      }\n\t    }\n\t  },\n\t  methods: {\n\t    redraw: function redraw(chart) {\n\t      d3.select(this.$refs.chart).style('height', this.height).datum(this.model).transition().duration(500).call(chart);\n\t    }\n\t  },\n\t  render: function render(h) {\n\t    return h(\n\t      'svg',\n\t      { ref: 'chart' },\n\t      []\n\t    );\n\t  }\n\t};\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* nvd3 version 1.8.5 (https://github.com/novus/nvd3) 2016-12-01 */\n\t(function(){\n\t\n\t// set up main nv object\n\tvar nv = {};\n\t\n\t// the major global objects under the nv namespace\n\tnv.dev = false; //set false when in production\n\tnv.tooltip = nv.tooltip || {}; // For the tooltip system\n\tnv.utils = nv.utils || {}; // Utility subsystem\n\tnv.models = nv.models || {}; //stores all the possible models/components\n\tnv.charts = {}; //stores all the ready to use charts\n\tnv.logs = {}; //stores some statistics and potential error messages\n\tnv.dom = {}; //DOM manipulation functions\n\t\n\t// Node/CommonJS - require D3\n\tif (typeof(module) !== 'undefined' && typeof(exports) !== 'undefined' && typeof(d3) == 'undefined') {\n\t    d3 = __webpack_require__(3);\n\t}\n\t\n\tnv.dispatch = d3.dispatch('render_start', 'render_end');\n\t\n\t// Function bind polyfill\n\t// Needed ONLY for phantomJS as it's missing until version 2.0 which is unreleased as of this comment\n\t// https://github.com/ariya/phantomjs/issues/10522\n\t// http://kangax.github.io/compat-table/es5/#Function.prototype.bind\n\t// phantomJS is used for running the test suite\n\tif (!Function.prototype.bind) {\n\t    Function.prototype.bind = function (oThis) {\n\t        if (typeof this !== \"function\") {\n\t            // closest thing possible to the ECMAScript 5 internal IsCallable function\n\t            throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n\t        }\n\t\n\t        var aArgs = Array.prototype.slice.call(arguments, 1),\n\t            fToBind = this,\n\t            fNOP = function () {},\n\t            fBound = function () {\n\t                return fToBind.apply(this instanceof fNOP && oThis\n\t                        ? this\n\t                        : oThis,\n\t                    aArgs.concat(Array.prototype.slice.call(arguments)));\n\t            };\n\t\n\t        fNOP.prototype = this.prototype;\n\t        fBound.prototype = new fNOP();\n\t        return fBound;\n\t    };\n\t}\n\t\n\t//  Development render timers - disabled if dev = false\n\tif (nv.dev) {\n\t    nv.dispatch.on('render_start', function(e) {\n\t        nv.logs.startTime = +new Date();\n\t    });\n\t\n\t    nv.dispatch.on('render_end', function(e) {\n\t        nv.logs.endTime = +new Date();\n\t        nv.logs.totalTime = nv.logs.endTime - nv.logs.startTime;\n\t        nv.log('total', nv.logs.totalTime); // used for development, to keep track of graph generation times\n\t    });\n\t}\n\t\n\t// Logs all arguments, and returns the last so you can test things in place\n\t// Note: in IE8 console.log is an object not a function, and if modernizr is used\n\t// then calling Function.prototype.bind with with anything other than a function\n\t// causes a TypeError to be thrown.\n\tnv.log = function() {\n\t    if (nv.dev && window.console && console.log && console.log.apply)\n\t        console.log.apply(console, arguments);\n\t    else if (nv.dev && window.console && typeof console.log == \"function\" && Function.prototype.bind) {\n\t        var log = Function.prototype.bind.call(console.log, console);\n\t        log.apply(console, arguments);\n\t    }\n\t    return arguments[arguments.length - 1];\n\t};\n\t\n\t// print console warning, should be used by deprecated functions\n\tnv.deprecated = function(name, info) {\n\t    if (console && console.warn) {\n\t        console.warn('nvd3 warning: `' + name + '` has been deprecated. ', info || '');\n\t    }\n\t};\n\t\n\t// The nv.render function is used to queue up chart rendering\n\t// in non-blocking async functions.\n\t// When all queued charts are done rendering, nv.dispatch.render_end is invoked.\n\tnv.render = function render(step) {\n\t    // number of graphs to generate in each timeout loop\n\t    step = step || 1;\n\t\n\t    nv.render.active = true;\n\t    nv.dispatch.render_start();\n\t\n\t    var renderLoop = function() {\n\t        var chart, graph;\n\t\n\t        for (var i = 0; i < step && (graph = nv.render.queue[i]); i++) {\n\t            chart = graph.generate();\n\t            if (typeof graph.callback == typeof(Function)) graph.callback(chart);\n\t        }\n\t\n\t        nv.render.queue.splice(0, i);\n\t\n\t        if (nv.render.queue.length) {\n\t            setTimeout(renderLoop);\n\t        }\n\t        else {\n\t            nv.dispatch.render_end();\n\t            nv.render.active = false;\n\t        }\n\t    };\n\t\n\t    setTimeout(renderLoop);\n\t};\n\t\n\tnv.render.active = false;\n\tnv.render.queue = [];\n\t\n\t/*\n\tAdds a chart to the async rendering queue. This method can take arguments in two forms:\n\tnv.addGraph({\n\t    generate: <Function>\n\t    callback: <Function>\n\t})\n\t\n\tor\n\t\n\tnv.addGraph(<generate Function>, <callback Function>)\n\t\n\tThe generate function should contain code that creates the NVD3 model, sets options\n\ton it, adds data to an SVG element, and invokes the chart model. The generate function\n\tshould return the chart model.  See examples/lineChart.html for a usage example.\n\t\n\tThe callback function is optional, and it is called when the generate function completes.\n\t*/\n\tnv.addGraph = function(obj) {\n\t    if (typeof arguments[0] === typeof(Function)) {\n\t        obj = {generate: arguments[0], callback: arguments[1]};\n\t    }\n\t\n\t    nv.render.queue.push(obj);\n\t\n\t    if (!nv.render.active) {\n\t        nv.render();\n\t    }\n\t};\n\t\n\t// Node/CommonJS exports\n\tif (true) {\n\t  module.exports = nv;\n\t}\n\t\n\tif (typeof(window) !== 'undefined') {\n\t  window.nv = nv;\n\t}\n\t/* Facade for queueing DOM write operations\r\n\t * with Fastdom (https://github.com/wilsonpage/fastdom)\r\n\t * if available.\r\n\t * This could easily be extended to support alternate\r\n\t * implementations in the future.\r\n\t */\r\n\tnv.dom.write = function(callback) {\r\n\t\tif (window.fastdom !== undefined) {\r\n\t\t\treturn fastdom.mutate(callback);\r\n\t\t}\r\n\t\treturn callback();\r\n\t};\r\n\t\r\n\t/* Facade for queueing DOM read operations\r\n\t * with Fastdom (https://github.com/wilsonpage/fastdom)\r\n\t * if available.\r\n\t * This could easily be extended to support alternate\r\n\t * implementations in the future.\r\n\t */\r\n\tnv.dom.read = function(callback) {\r\n\t\tif (window.fastdom !== undefined) {\r\n\t\t\treturn fastdom.measure(callback);\r\n\t\t}\r\n\t\treturn callback();\r\n\t};\r\n\t/* Utility class to handle creation of an interactive layer.\n\t This places a rectangle on top of the chart. When you mouse move over it, it sends a dispatch\n\t containing the X-coordinate. It can also render a vertical line where the mouse is located.\n\t\n\t dispatch.elementMousemove is the important event to latch onto.  It is fired whenever the mouse moves over\n\t the rectangle. The dispatch is given one object which contains the mouseX/Y location.\n\t It also has 'pointXValue', which is the conversion of mouseX to the x-axis scale.\n\t */\n\tnv.interactiveGuideline = function() {\n\t    \"use strict\";\n\t\n\t    var margin = { left: 0, top: 0 } //Pass the chart's top and left magins. Used to calculate the mouseX/Y.\n\t        ,   width = null\n\t        ,   height = null\n\t        ,   xScale = d3.scale.linear()\n\t        ,   dispatch = d3.dispatch('elementMousemove', 'elementMouseout', 'elementClick', 'elementDblclick', 'elementMouseDown', 'elementMouseUp')\n\t        ,   showGuideLine = true\n\t        ,   svgContainer = null // Must pass the chart's svg, we'll use its mousemove event.\n\t        ,   tooltip = nv.models.tooltip()\n\t        ,   isMSIE =  window.ActiveXObject// Checkt if IE by looking for activeX. (excludes IE11)\n\t    ;\n\t\n\t    tooltip\n\t        .duration(0)\n\t        .hideDelay(0)\n\t        .hidden(false);\n\t\n\t    function layer(selection) {\n\t        selection.each(function(data) {\n\t            var container = d3.select(this);\n\t            var availableWidth = (width || 960), availableHeight = (height || 400);\n\t            var wrap = container.selectAll(\"g.nv-wrap.nv-interactiveLineLayer\")\n\t                .data([data]);\n\t            var wrapEnter = wrap.enter()\n\t                .append(\"g\").attr(\"class\", \" nv-wrap nv-interactiveLineLayer\");\n\t            wrapEnter.append(\"g\").attr(\"class\",\"nv-interactiveGuideLine\");\n\t\n\t            if (!svgContainer) {\n\t                return;\n\t            }\n\t\n\t            function mouseHandler() {\n\t                var d3mouse = d3.mouse(this);\n\t                var mouseX = d3mouse[0];\n\t                var mouseY = d3mouse[1];\n\t                var subtractMargin = true;\n\t                var mouseOutAnyReason = false;\n\t                if (isMSIE) {\n\t                    /*\n\t                     D3.js (or maybe SVG.getScreenCTM) has a nasty bug in Internet Explorer 10.\n\t                     d3.mouse() returns incorrect X,Y mouse coordinates when mouse moving\n\t                     over a rect in IE 10.\n\t                     However, d3.event.offsetX/Y also returns the mouse coordinates\n\t                     relative to the triggering <rect>. So we use offsetX/Y on IE.\n\t                     */\n\t                    mouseX = d3.event.offsetX;\n\t                    mouseY = d3.event.offsetY;\n\t\n\t                    /*\n\t                     On IE, if you attach a mouse event listener to the <svg> container,\n\t                     it will actually trigger it for all the child elements (like <path>, <circle>, etc).\n\t                     When this happens on IE, the offsetX/Y is set to where ever the child element\n\t                     is located.\n\t                     As a result, we do NOT need to subtract margins to figure out the mouse X/Y\n\t                     position under this scenario. Removing the line below *will* cause\n\t                     the interactive layer to not work right on IE.\n\t                     */\n\t                    if(d3.event.target.tagName !== \"svg\") {\n\t                        subtractMargin = false;\n\t                    }\n\t\n\t                    if (d3.event.target.className.baseVal.match(\"nv-legend\")) {\n\t                        mouseOutAnyReason = true;\n\t                    }\n\t\n\t                }\n\t\n\t                if(subtractMargin) {\n\t                    mouseX -= margin.left;\n\t                    mouseY -= margin.top;\n\t                }\n\t\n\t                /* If mouseX/Y is outside of the chart's bounds,\n\t                 trigger a mouseOut event.\n\t                 */\n\t                if (d3.event.type === 'mouseout'\n\t                    || mouseX < 0 || mouseY < 0\n\t                    || mouseX > availableWidth || mouseY > availableHeight\n\t                    || (d3.event.relatedTarget && d3.event.relatedTarget.ownerSVGElement === undefined)\n\t                    || mouseOutAnyReason\n\t                    ) {\n\t\n\t                    if (isMSIE) {\n\t                        if (d3.event.relatedTarget\n\t                            && d3.event.relatedTarget.ownerSVGElement === undefined\n\t                            && (d3.event.relatedTarget.className === undefined\n\t                                || d3.event.relatedTarget.className.match(tooltip.nvPointerEventsClass))) {\n\t\n\t                            return;\n\t                        }\n\t                    }\n\t                    dispatch.elementMouseout({\n\t                        mouseX: mouseX,\n\t                        mouseY: mouseY\n\t                    });\n\t                    layer.renderGuideLine(null); //hide the guideline\n\t                    tooltip.hidden(true);\n\t                    return;\n\t                } else {\n\t                    tooltip.hidden(false);\n\t                }\n\t\n\t\n\t                var scaleIsOrdinal = typeof xScale.rangeBands === 'function';\n\t                var pointXValue = undefined;\n\t\n\t                // Ordinal scale has no invert method\n\t                if (scaleIsOrdinal) {\n\t                    var elementIndex = d3.bisect(xScale.range(), mouseX) - 1;\n\t                    // Check if mouseX is in the range band\n\t                    if (xScale.range()[elementIndex] + xScale.rangeBand() >= mouseX) {\n\t                        pointXValue = xScale.domain()[d3.bisect(xScale.range(), mouseX) - 1];\n\t                    }\n\t                    else {\n\t                        dispatch.elementMouseout({\n\t                            mouseX: mouseX,\n\t                            mouseY: mouseY\n\t                        });\n\t                        layer.renderGuideLine(null); //hide the guideline\n\t                        tooltip.hidden(true);\n\t                        return;\n\t                    }\n\t                }\n\t                else {\n\t                    pointXValue = xScale.invert(mouseX);\n\t                }\n\t\n\t                dispatch.elementMousemove({\n\t                    mouseX: mouseX,\n\t                    mouseY: mouseY,\n\t                    pointXValue: pointXValue\n\t                });\n\t\n\t                //If user double clicks the layer, fire a elementDblclick\n\t                if (d3.event.type === \"dblclick\") {\n\t                    dispatch.elementDblclick({\n\t                        mouseX: mouseX,\n\t                        mouseY: mouseY,\n\t                        pointXValue: pointXValue\n\t                    });\n\t                }\n\t\n\t                // if user single clicks the layer, fire elementClick\n\t                if (d3.event.type === 'click') {\n\t                    dispatch.elementClick({\n\t                        mouseX: mouseX,\n\t                        mouseY: mouseY,\n\t                        pointXValue: pointXValue\n\t                    });\n\t                }\n\t\n\t                // if user presses mouse down the layer, fire elementMouseDown\n\t                if (d3.event.type === 'mousedown') {\n\t                \tdispatch.elementMouseDown({\n\t                \t\tmouseX: mouseX,\n\t                \t\tmouseY: mouseY,\n\t                \t\tpointXValue: pointXValue\n\t                \t});\n\t                }\n\t\n\t                // if user presses mouse down the layer, fire elementMouseUp\n\t                if (d3.event.type === 'mouseup') {\n\t                \tdispatch.elementMouseUp({\n\t                \t\tmouseX: mouseX,\n\t                \t\tmouseY: mouseY,\n\t                \t\tpointXValue: pointXValue\n\t                \t});\n\t                }\n\t            }\n\t\n\t            svgContainer\n\t                .on(\"touchmove\",mouseHandler)\n\t                .on(\"mousemove\",mouseHandler, true)\n\t                .on(\"mouseout\" ,mouseHandler,true)\n\t                .on(\"mousedown\" ,mouseHandler,true)\n\t                .on(\"mouseup\" ,mouseHandler,true)\n\t                .on(\"dblclick\" ,mouseHandler)\n\t                .on(\"click\", mouseHandler)\n\t            ;\n\t\n\t            layer.guideLine = null;\n\t            //Draws a vertical guideline at the given X postion.\n\t            layer.renderGuideLine = function(x) {\n\t                if (!showGuideLine) return;\n\t                if (layer.guideLine && layer.guideLine.attr(\"x1\") === x) return;\n\t                nv.dom.write(function() {\n\t                    var line = wrap.select(\".nv-interactiveGuideLine\")\n\t                        .selectAll(\"line\")\n\t                        .data((x != null) ? [nv.utils.NaNtoZero(x)] : [], String);\n\t                    line.enter()\n\t                        .append(\"line\")\n\t                        .attr(\"class\", \"nv-guideline\")\n\t                        .attr(\"x1\", function(d) { return d;})\n\t                        .attr(\"x2\", function(d) { return d;})\n\t                        .attr(\"y1\", availableHeight)\n\t                        .attr(\"y2\",0);\n\t                    line.exit().remove();\n\t                });\n\t            }\n\t        });\n\t    }\n\t\n\t    layer.dispatch = dispatch;\n\t    layer.tooltip = tooltip;\n\t\n\t    layer.margin = function(_) {\n\t        if (!arguments.length) return margin;\n\t        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t        return layer;\n\t    };\n\t\n\t    layer.width = function(_) {\n\t        if (!arguments.length) return width;\n\t        width = _;\n\t        return layer;\n\t    };\n\t\n\t    layer.height = function(_) {\n\t        if (!arguments.length) return height;\n\t        height = _;\n\t        return layer;\n\t    };\n\t\n\t    layer.xScale = function(_) {\n\t        if (!arguments.length) return xScale;\n\t        xScale = _;\n\t        return layer;\n\t    };\n\t\n\t    layer.showGuideLine = function(_) {\n\t        if (!arguments.length) return showGuideLine;\n\t        showGuideLine = _;\n\t        return layer;\n\t    };\n\t\n\t    layer.svgContainer = function(_) {\n\t        if (!arguments.length) return svgContainer;\n\t        svgContainer = _;\n\t        return layer;\n\t    };\n\t\n\t    return layer;\n\t};\n\t\n\t/* Utility class that uses d3.bisect to find the index in a given array, where a search value can be inserted.\n\t This is different from normal bisectLeft; this function finds the nearest index to insert the search value.\n\t\n\t For instance, lets say your array is [1,2,3,5,10,30], and you search for 28.\n\t Normal d3.bisectLeft will return 4, because 28 is inserted after the number 10.  But interactiveBisect will return 5\n\t because 28 is closer to 30 than 10.\n\t\n\t Unit tests can be found in: interactiveBisectTest.html\n\t\n\t Has the following known issues:\n\t * Will not work if the data points move backwards (ie, 10,9,8,7, etc) or if the data points are in random order.\n\t * Won't work if there are duplicate x coordinate values.\n\t */\n\tnv.interactiveBisect = function (values, searchVal, xAccessor) {\n\t    \"use strict\";\n\t    if (! (values instanceof Array)) {\n\t        return null;\n\t    }\n\t    var _xAccessor;\n\t    if (typeof xAccessor !== 'function') {\n\t        _xAccessor = function(d) {\n\t            return d.x;\n\t        }\n\t    } else {\n\t        _xAccessor = xAccessor;\n\t    }\n\t    var _cmp = function(d, v) {\n\t        // Accessors are no longer passed the index of the element along with\n\t        // the element itself when invoked by d3.bisector.\n\t        //\n\t        // Starting at D3 v3.4.4, d3.bisector() started inspecting the\n\t        // function passed to determine if it should consider it an accessor\n\t        // or a comparator. This meant that accessors that take two arguments\n\t        // (expecting an index as the second parameter) are treated as\n\t        // comparators where the second argument is the search value against\n\t        // which the first argument is compared.\n\t        return _xAccessor(d) - v;\n\t    };\n\t\n\t    var bisect = d3.bisector(_cmp).left;\n\t    var index = d3.max([0, bisect(values,searchVal) - 1]);\n\t    var currentValue = _xAccessor(values[index]);\n\t\n\t    if (typeof currentValue === 'undefined') {\n\t        currentValue = index;\n\t    }\n\t\n\t    if (currentValue === searchVal) {\n\t        return index; //found exact match\n\t    }\n\t\n\t    var nextIndex = d3.min([index+1, values.length - 1]);\n\t    var nextValue = _xAccessor(values[nextIndex]);\n\t\n\t    if (typeof nextValue === 'undefined') {\n\t        nextValue = nextIndex;\n\t    }\n\t\n\t    if (Math.abs(nextValue - searchVal) >= Math.abs(currentValue - searchVal)) {\n\t        return index;\n\t    } else {\n\t        return nextIndex\n\t    }\n\t};\n\t\n\t/*\n\t Returns the index in the array \"values\" that is closest to searchVal.\n\t Only returns an index if searchVal is within some \"threshold\".\n\t Otherwise, returns null.\n\t */\n\tnv.nearestValueIndex = function (values, searchVal, threshold) {\n\t    \"use strict\";\n\t    var yDistMax = Infinity, indexToHighlight = null;\n\t    values.forEach(function(d,i) {\n\t        var delta = Math.abs(searchVal - d);\n\t        if ( d != null && delta <= yDistMax && delta < threshold) {\n\t            yDistMax = delta;\n\t            indexToHighlight = i;\n\t        }\n\t    });\n\t    return indexToHighlight;\n\t};\n\t\n\t/* Model which can be instantiated to handle tooltip rendering.\n\t Example usage:\n\t var tip = nv.models.tooltip().gravity('w').distance(23)\n\t .data(myDataObject);\n\t\n\t tip();    //just invoke the returned function to render tooltip.\n\t */\n\tnv.models.tooltip = function() {\n\t    \"use strict\";\n\t\n\t    /*\n\t    Tooltip data. If data is given in the proper format, a consistent tooltip is generated.\n\t    Example Format of data:\n\t    {\n\t        key: \"Date\",\n\t        value: \"August 2009\",\n\t        series: [\n\t            {key: \"Series 1\", value: \"Value 1\", color: \"#000\"},\n\t            {key: \"Series 2\", value: \"Value 2\", color: \"#00f\"}\n\t        ]\n\t    }\n\t    */\n\t    var id = \"nvtooltip-\" + Math.floor(Math.random() * 100000) // Generates a unique id when you create a new tooltip() object.\n\t        ,   data = null\n\t        ,   gravity = 'w'   // Can be 'n','s','e','w'. Determines how tooltip is positioned.\n\t        ,   distance = 25 // Distance to offset tooltip from the mouse location.\n\t        ,   snapDistance = 0   // Tolerance allowed before tooltip is moved from its current position (creates 'snapping' effect)\n\t        ,   classes = null  // Attaches additional CSS classes to the tooltip DIV that is created.\n\t        ,   hidden = true  // Start off hidden, toggle with hide/show functions below.\n\t        ,   hideDelay = 200  // Delay (in ms) before the tooltip hides after calling hide().\n\t        ,   tooltip = null // d3 select of the tooltip div.\n\t        ,   lastPosition = { left: null, top: null } // Last position the tooltip was in.\n\t        ,   enabled = true  // True -> tooltips are rendered. False -> don't render tooltips.\n\t        ,   duration = 100 // Tooltip movement duration, in ms.\n\t        ,   headerEnabled = true // If is to show the tooltip header.\n\t        ,   nvPointerEventsClass = \"nv-pointer-events-none\" // CSS class to specify whether element should not have mouse events.\n\t    ;\n\t\n\t    // Format function for the tooltip values column.\n\t    var valueFormatter = function(d, i) {\n\t        return d;\n\t    };\n\t\n\t    // Format function for the tooltip header value.\n\t    var headerFormatter = function(d) {\n\t        return d;\n\t    };\n\t\n\t    var keyFormatter = function(d, i) {\n\t        return d;\n\t    };\n\t\n\t    // By default, the tooltip model renders a beautiful table inside a DIV.\n\t    // You can override this function if a custom tooltip is desired.\n\t    var contentGenerator = function(d) {\n\t        if (d === null) {\n\t            return '';\n\t        }\n\t\n\t        var table = d3.select(document.createElement(\"table\"));\n\t        if (headerEnabled) {\n\t            var theadEnter = table.selectAll(\"thead\")\n\t                .data([d])\n\t                .enter().append(\"thead\");\n\t\n\t            theadEnter.append(\"tr\")\n\t                .append(\"td\")\n\t                .attr(\"colspan\", 3)\n\t                .append(\"strong\")\n\t                .classed(\"x-value\", true)\n\t                .html(headerFormatter(d.value));\n\t        }\n\t\n\t        var tbodyEnter = table.selectAll(\"tbody\")\n\t            .data([d])\n\t            .enter().append(\"tbody\");\n\t\n\t        var trowEnter = tbodyEnter.selectAll(\"tr\")\n\t                .data(function(p) { return p.series})\n\t                .enter()\n\t                .append(\"tr\")\n\t                .classed(\"highlight\", function(p) { return p.highlight});\n\t\n\t        trowEnter.append(\"td\")\n\t            .classed(\"legend-color-guide\",true)\n\t            .append(\"div\")\n\t            .style(\"background-color\", function(p) { return p.color});\n\t\n\t        trowEnter.append(\"td\")\n\t            .classed(\"key\",true)\n\t            .classed(\"total\",function(p) { return !!p.total})\n\t            .html(function(p, i) { return keyFormatter(p.key, i)});\n\t\n\t        trowEnter.append(\"td\")\n\t            .classed(\"value\",true)\n\t            .html(function(p, i) { return valueFormatter(p.value, i) });\n\t\n\t        trowEnter.filter(function (p,i) { return p.percent !== undefined }).append(\"td\")\n\t            .classed(\"percent\", true)\n\t            .html(function(p, i) { return \"(\" + d3.format('%')(p.percent) + \")\" });\n\t\n\t        trowEnter.selectAll(\"td\").each(function(p) {\n\t            if (p.highlight) {\n\t                var opacityScale = d3.scale.linear().domain([0,1]).range([\"#fff\",p.color]);\n\t                var opacity = 0.6;\n\t                d3.select(this)\n\t                    .style(\"border-bottom-color\", opacityScale(opacity))\n\t                    .style(\"border-top-color\", opacityScale(opacity))\n\t                ;\n\t            }\n\t        });\n\t\n\t        var html = table.node().outerHTML;\n\t        if (d.footer !== undefined)\n\t            html += \"<div class='footer'>\" + d.footer + \"</div>\";\n\t        return html;\n\t\n\t    };\n\t\n\t    /*\n\t     Function that returns the position (relative to the viewport/document.body)\n\t     the tooltip should be placed in.\n\t     Should return: {\n\t        left: <leftPos>,\n\t        top: <topPos>\n\t     }\n\t     */\n\t    var position = function() {\n\t        var pos = {\n\t            left: d3.event !== null ? d3.event.clientX : 0,\n\t            top: d3.event !== null ? d3.event.clientY : 0\n\t        };\n\t\n\t        if(getComputedStyle(document.body).transform != 'none') {\n\t            // Take the offset into account, as now the tooltip is relative\n\t            // to document.body.\n\t            var client = document.body.getBoundingClientRect();\n\t            pos.left -= client.left;\n\t            pos.top -= client.top;\n\t        }\n\t\n\t        return pos;\n\t    };\n\t\n\t    var dataSeriesExists = function(d) {\n\t        if (d && d.series) {\n\t            if (nv.utils.isArray(d.series)) {\n\t                return true;\n\t            }\n\t            // if object, it's okay just convert to array of the object\n\t            if (nv.utils.isObject(d.series)) {\n\t                d.series = [d.series];\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    };\n\t\n\t    // Calculates the gravity offset of the tooltip. Parameter is position of tooltip\n\t    // relative to the viewport.\n\t    var calcGravityOffset = function(pos) {\n\t        var height = tooltip.node().offsetHeight,\n\t            width = tooltip.node().offsetWidth,\n\t            clientWidth = document.documentElement.clientWidth, // Don't want scrollbars.\n\t            clientHeight = document.documentElement.clientHeight, // Don't want scrollbars.\n\t            left, top, tmp;\n\t\n\t        // calculate position based on gravity\n\t        switch (gravity) {\n\t            case 'e':\n\t                left = - width - distance;\n\t                top = - (height / 2);\n\t                if(pos.left + left < 0) left = distance;\n\t                if((tmp = pos.top + top) < 0) top -= tmp;\n\t                if((tmp = pos.top + top + height) > clientHeight) top -= tmp - clientHeight;\n\t                break;\n\t            case 'w':\n\t                left = distance;\n\t                top = - (height / 2);\n\t                if (pos.left + left + width > clientWidth) left = - width - distance;\n\t                if ((tmp = pos.top + top) < 0) top -= tmp;\n\t                if ((tmp = pos.top + top + height) > clientHeight) top -= tmp - clientHeight;\n\t                break;\n\t            case 'n':\n\t                left = - (width / 2) - 5; // - 5 is an approximation of the mouse's height.\n\t                top = distance;\n\t                if (pos.top + top + height > clientHeight) top = - height - distance;\n\t                if ((tmp = pos.left + left) < 0) left -= tmp;\n\t                if ((tmp = pos.left + left + width) > clientWidth) left -= tmp - clientWidth;\n\t                break;\n\t            case 's':\n\t                left = - (width / 2);\n\t                top = - height - distance;\n\t                if (pos.top + top < 0) top = distance;\n\t                if ((tmp = pos.left + left) < 0) left -= tmp;\n\t                if ((tmp = pos.left + left + width) > clientWidth) left -= tmp - clientWidth;\n\t                break;\n\t            case 'center':\n\t                left = - (width / 2);\n\t                top = - (height / 2);\n\t                break;\n\t            default:\n\t                left = 0;\n\t                top = 0;\n\t                break;\n\t        }\n\t\n\t        return { 'left': left, 'top': top };\n\t    };\n\t\n\t    /*\n\t     Positions the tooltip in the correct place, as given by the position() function.\n\t     */\n\t    var positionTooltip = function() {\n\t        nv.dom.read(function() {\n\t            var pos = position(),\n\t                gravityOffset = calcGravityOffset(pos),\n\t                left = pos.left + gravityOffset.left,\n\t                top = pos.top + gravityOffset.top;\n\t\n\t            // delay hiding a bit to avoid flickering\n\t            if (hidden) {\n\t                tooltip\n\t                    .interrupt()\n\t                    .transition()\n\t                    .delay(hideDelay)\n\t                    .duration(0)\n\t                    .style('opacity', 0);\n\t            } else {\n\t                // using tooltip.style('transform') returns values un-usable for tween\n\t                var old_translate = 'translate(' + lastPosition.left + 'px, ' + lastPosition.top + 'px)';\n\t                var new_translate = 'translate(' + Math.round(left) + 'px, ' + Math.round(top) + 'px)';\n\t                var translateInterpolator = d3.interpolateString(old_translate, new_translate);\n\t                var is_hidden = tooltip.style('opacity') < 0.1;\n\t\n\t                tooltip\n\t                    .interrupt() // cancel running transitions\n\t                    .transition()\n\t                    .duration(is_hidden ? 0 : duration)\n\t                    // using tween since some versions of d3 can't auto-tween a translate on a div\n\t                    .styleTween('transform', function (d) {\n\t                        return translateInterpolator;\n\t                    }, 'important')\n\t                    // Safari has its own `-webkit-transform` and does not support `transform`\n\t                    .styleTween('-webkit-transform', function (d) {\n\t                        return translateInterpolator;\n\t                    })\n\t                    .style('-ms-transform', new_translate)\n\t                    .style('opacity', 1);\n\t            }\n\t\n\t            lastPosition.left = left;\n\t            lastPosition.top = top;\n\t        });\n\t    };\n\t\n\t    // Creates new tooltip container, or uses existing one on DOM.\n\t    function initTooltip() {\n\t        if (!tooltip || !tooltip.node()) {\n\t            // Create new tooltip div if it doesn't exist on DOM.\n\t\n\t            var data = [1];\n\t            tooltip = d3.select(document.body).select('#'+id).data(data);\n\t\n\t            tooltip.enter().append('div')\n\t                   .attr(\"class\", \"nvtooltip \" + (classes ? classes : \"xy-tooltip\"))\n\t                   .attr(\"id\", id)\n\t                   .style(\"top\", 0).style(\"left\", 0)\n\t                   .style('opacity', 0)\n\t                   .style('position', 'fixed')\n\t                   .selectAll(\"div, table, td, tr\").classed(nvPointerEventsClass, true)\n\t                   .classed(nvPointerEventsClass, true);\n\t\n\t            tooltip.exit().remove()\n\t        }\n\t    }\n\t\n\t    // Draw the tooltip onto the DOM.\n\t    function nvtooltip() {\n\t        if (!enabled) return;\n\t        if (!dataSeriesExists(data)) return;\n\t\n\t        nv.dom.write(function () {\n\t            initTooltip();\n\t            // Generate data and set it into tooltip.\n\t            // Bonus - If you override contentGenerator and return falsey you can use something like\n\t            //         React or Knockout to bind the data for your tooltip.\n\t            var newContent = contentGenerator(data);\n\t            if (newContent) {\n\t                tooltip.node().innerHTML = newContent;\n\t            }\n\t\n\t            positionTooltip();\n\t        });\n\t\n\t        return nvtooltip;\n\t    }\n\t\n\t    nvtooltip.nvPointerEventsClass = nvPointerEventsClass;\n\t    nvtooltip.options = nv.utils.optionsFunc.bind(nvtooltip);\n\t\n\t    nvtooltip._options = Object.create({}, {\n\t        // simple read/write options\n\t        duration: {get: function(){return duration;}, set: function(_){duration=_;}},\n\t        gravity: {get: function(){return gravity;}, set: function(_){gravity=_;}},\n\t        distance: {get: function(){return distance;}, set: function(_){distance=_;}},\n\t        snapDistance: {get: function(){return snapDistance;}, set: function(_){snapDistance=_;}},\n\t        classes: {get: function(){return classes;}, set: function(_){classes=_;}},\n\t        enabled: {get: function(){return enabled;}, set: function(_){enabled=_;}},\n\t        hideDelay: {get: function(){return hideDelay;}, set: function(_){hideDelay=_;}},\n\t        contentGenerator: {get: function(){return contentGenerator;}, set: function(_){contentGenerator=_;}},\n\t        valueFormatter: {get: function(){return valueFormatter;}, set: function(_){valueFormatter=_;}},\n\t        headerFormatter: {get: function(){return headerFormatter;}, set: function(_){headerFormatter=_;}},\n\t        keyFormatter: {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n\t        headerEnabled: {get: function(){return headerEnabled;}, set: function(_){headerEnabled=_;}},\n\t        position: {get: function(){return position;}, set: function(_){position=_;}},\n\t\n\t        // Deprecated options\n\t        chartContainer: {get: function(){return document.body;}, set: function(_){\n\t            // deprecated after 1.8.3\n\t            nv.deprecated('chartContainer', 'feature removed after 1.8.3');\n\t        }},\n\t        fixedTop: {get: function(){return null;}, set: function(_){\n\t            // deprecated after 1.8.1\n\t            nv.deprecated('fixedTop', 'feature removed after 1.8.1');\n\t        }},\n\t        offset: {get: function(){return {left: 0, top: 0};}, set: function(_){\n\t            // deprecated after 1.8.1\n\t            nv.deprecated('offset', 'use chart.tooltip.distance() instead');\n\t        }},\n\t\n\t        // options with extra logic\n\t        hidden: {get: function(){return hidden;}, set: function(_){\n\t            if (hidden != _) {\n\t                hidden = !!_;\n\t                nvtooltip();\n\t            }\n\t        }},\n\t        data: {get: function(){return data;}, set: function(_){\n\t            // if showing a single data point, adjust data format with that\n\t            if (_.point) {\n\t                _.value = _.point.x;\n\t                _.series = _.series || {};\n\t                _.series.value = _.point.y;\n\t                _.series.color = _.point.color || _.series.color;\n\t            }\n\t            data = _;\n\t        }},\n\t\n\t        // read only properties\n\t        node: {get: function(){return tooltip.node();}, set: function(_){}},\n\t        id: {get: function(){return id;}, set: function(_){}}\n\t    });\n\t\n\t    nv.utils.initOptions(nvtooltip);\n\t    return nvtooltip;\n\t};\n\t\n\t\n\t/*\n\tGets the browser window size\n\t\n\tReturns object with height and width properties\n\t */\n\tnv.utils.windowSize = function() {\n\t    // Sane defaults\n\t    var size = {width: 640, height: 480};\n\t\n\t    // Most recent browsers use\n\t    if (window.innerWidth && window.innerHeight) {\n\t        size.width = window.innerWidth;\n\t        size.height = window.innerHeight;\n\t        return (size);\n\t    }\n\t\n\t    // IE can use depending on mode it is in\n\t    if (document.compatMode=='CSS1Compat' &&\n\t        document.documentElement &&\n\t        document.documentElement.offsetWidth ) {\n\t\n\t        size.width = document.documentElement.offsetWidth;\n\t        size.height = document.documentElement.offsetHeight;\n\t        return (size);\n\t    }\n\t\n\t    // Earlier IE uses Doc.body\n\t    if (document.body && document.body.offsetWidth) {\n\t        size.width = document.body.offsetWidth;\n\t        size.height = document.body.offsetHeight;\n\t        return (size);\n\t    }\n\t\n\t    return (size);\n\t};\n\t\n\t\n\t/* handle dumb browser quirks...  isinstance breaks if you use frames\n\ttypeof returns 'object' for null, NaN is a number, etc.\n\t */\n\tnv.utils.isArray = Array.isArray;\n\tnv.utils.isObject = function(a) {\n\t    return a !== null && typeof a === 'object';\n\t};\n\tnv.utils.isFunction = function(a) {\n\t    return typeof a === 'function';\n\t};\n\tnv.utils.isDate = function(a) {\n\t    return toString.call(a) === '[object Date]';\n\t};\n\tnv.utils.isNumber = function(a) {\n\t    return !isNaN(a) && typeof a === 'number';\n\t};\n\t\n\t\n\t/*\n\tBinds callback function to run when window is resized\n\t */\n\tnv.utils.windowResize = function(handler) {\n\t    if (window.addEventListener) {\n\t        window.addEventListener('resize', handler);\n\t    } else {\n\t        nv.log(\"ERROR: Failed to bind to window.resize with: \", handler);\n\t    }\n\t    // return object with clear function to remove the single added callback.\n\t    return {\n\t        callback: handler,\n\t        clear: function() {\n\t            window.removeEventListener('resize', handler);\n\t        }\n\t    }\n\t};\n\t\n\t\n\t/*\n\tBackwards compatible way to implement more d3-like coloring of graphs.\n\tCan take in nothing, an array, or a function/scale\n\tTo use a normal scale, get the range and pass that because we must be able\n\tto take two arguments and use the index to keep backward compatibility\n\t*/\n\tnv.utils.getColor = function(color) {\n\t    //if you pass in nothing, get default colors back\n\t    if (color === undefined) {\n\t        return nv.utils.defaultColor();\n\t\n\t    //if passed an array, turn it into a color scale\n\t    } else if(nv.utils.isArray(color)) {\n\t        var color_scale = d3.scale.ordinal().range(color);\n\t        return function(d, i) {\n\t            var key = i === undefined ? d : i;\n\t            return d.color || color_scale(key);\n\t        };\n\t\n\t    //if passed a function or scale, return it, or whatever it may be\n\t    //external libs, such as angularjs-nvd3-directives use this\n\t    } else {\n\t        //can't really help it if someone passes rubbish as color\n\t        return color;\n\t    }\n\t};\n\t\n\t\n\t/*\n\tDefault color chooser uses a color scale of 20 colors from D3\n\t https://github.com/mbostock/d3/wiki/Ordinal-Scales#categorical-colors\n\t */\n\tnv.utils.defaultColor = function() {\n\t    // get range of the scale so we'll turn it into our own function.\n\t    return nv.utils.getColor(d3.scale.category20().range());\n\t};\n\t\n\t\n\t/*\n\tReturns a color function that takes the result of 'getKey' for each series and\n\tlooks for a corresponding color from the dictionary\n\t*/\n\tnv.utils.customTheme = function(dictionary, getKey, defaultColors) {\n\t    // use default series.key if getKey is undefined\n\t    getKey = getKey || function(series) { return series.key };\n\t    defaultColors = defaultColors || d3.scale.category20().range();\n\t\n\t    // start at end of default color list and walk back to index 0\n\t    var defIndex = defaultColors.length;\n\t\n\t    return function(series, index) {\n\t        var key = getKey(series);\n\t        if (nv.utils.isFunction(dictionary[key])) {\n\t            return dictionary[key]();\n\t        } else if (dictionary[key] !== undefined) {\n\t            return dictionary[key];\n\t        } else {\n\t            // no match in dictionary, use a default color\n\t            if (!defIndex) {\n\t                // used all the default colors, start over\n\t                defIndex = defaultColors.length;\n\t            }\n\t            defIndex = defIndex - 1;\n\t            return defaultColors[defIndex];\n\t        }\n\t    };\n\t};\n\t\n\t\n\t/*\n\tFrom the PJAX example on d3js.org, while this is not really directly needed\n\tit's a very cool method for doing pjax, I may expand upon it a little bit,\n\topen to suggestions on anything that may be useful\n\t*/\n\tnv.utils.pjax = function(links, content) {\n\t\n\t    var load = function(href) {\n\t        d3.html(href, function(fragment) {\n\t            var target = d3.select(content).node();\n\t            target.parentNode.replaceChild(\n\t                d3.select(fragment).select(content).node(),\n\t                target);\n\t            nv.utils.pjax(links, content);\n\t        });\n\t    };\n\t\n\t    d3.selectAll(links).on(\"click\", function() {\n\t        history.pushState(this.href, this.textContent, this.href);\n\t        load(this.href);\n\t        d3.event.preventDefault();\n\t    });\n\t\n\t    d3.select(window).on(\"popstate\", function() {\n\t        if (d3.event.state) {\n\t            load(d3.event.state);\n\t        }\n\t    });\n\t};\n\t\n\t\n\t/*\n\tFor when we want to approximate the width in pixels for an SVG:text element.\n\tMost common instance is when the element is in a display:none; container.\n\tForumla is : text.length * font-size * constant_factor\n\t*/\n\tnv.utils.calcApproxTextWidth = function (svgTextElem) {\n\t    if (nv.utils.isFunction(svgTextElem.style) && nv.utils.isFunction(svgTextElem.text)) {\n\t        var fontSize = parseInt(svgTextElem.style(\"font-size\").replace(\"px\",\"\"), 10);\n\t        var textLength = svgTextElem.text().length;\n\t        return nv.utils.NaNtoZero(textLength * fontSize * 0.5);\n\t    }\n\t    return 0;\n\t};\n\t\n\t\n\t/*\n\tNumbers that are undefined, null or NaN, convert them to zeros.\n\t*/\n\tnv.utils.NaNtoZero = function(n) {\n\t    if (!nv.utils.isNumber(n)\n\t        || isNaN(n)\n\t        || n === null\n\t        || n === Infinity\n\t        || n === -Infinity) {\n\t\n\t        return 0;\n\t    }\n\t    return n;\n\t};\n\t\n\t/*\n\tAdd a way to watch for d3 transition ends to d3\n\t*/\n\td3.selection.prototype.watchTransition = function(renderWatch){\n\t    var args = [this].concat([].slice.call(arguments, 1));\n\t    return renderWatch.transition.apply(renderWatch, args);\n\t};\n\t\n\t\n\t/*\n\tHelper object to watch when d3 has rendered something\n\t*/\n\tnv.utils.renderWatch = function(dispatch, duration) {\n\t    if (!(this instanceof nv.utils.renderWatch)) {\n\t        return new nv.utils.renderWatch(dispatch, duration);\n\t    }\n\t\n\t    var _duration = duration !== undefined ? duration : 250;\n\t    var renderStack = [];\n\t    var self = this;\n\t\n\t    this.models = function(models) {\n\t        models = [].slice.call(arguments, 0);\n\t        models.forEach(function(model){\n\t            model.__rendered = false;\n\t            (function(m){\n\t                m.dispatch.on('renderEnd', function(arg){\n\t                    m.__rendered = true;\n\t                    self.renderEnd('model');\n\t                });\n\t            })(model);\n\t\n\t            if (renderStack.indexOf(model) < 0) {\n\t                renderStack.push(model);\n\t            }\n\t        });\n\t    return this;\n\t    };\n\t\n\t    this.reset = function(duration) {\n\t        if (duration !== undefined) {\n\t            _duration = duration;\n\t        }\n\t        renderStack = [];\n\t    };\n\t\n\t    this.transition = function(selection, args, duration) {\n\t        args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n\t\n\t        if (args.length > 1) {\n\t            duration = args.pop();\n\t        } else {\n\t            duration = _duration !== undefined ? _duration : 250;\n\t        }\n\t        selection.__rendered = false;\n\t\n\t        if (renderStack.indexOf(selection) < 0) {\n\t            renderStack.push(selection);\n\t        }\n\t\n\t        if (duration === 0) {\n\t            selection.__rendered = true;\n\t            selection.delay = function() { return this; };\n\t            selection.duration = function() { return this; };\n\t            return selection;\n\t        } else {\n\t            if (selection.length === 0) {\n\t                selection.__rendered = true;\n\t            } else if (selection.every( function(d){ return !d.length; } )) {\n\t                selection.__rendered = true;\n\t            } else {\n\t                selection.__rendered = false;\n\t            }\n\t\n\t            var n = 0;\n\t            return selection\n\t                .transition()\n\t                .duration(duration)\n\t                .each(function(){ ++n; })\n\t                .each('end', function(d, i) {\n\t                    if (--n === 0) {\n\t                        selection.__rendered = true;\n\t                        self.renderEnd.apply(this, args);\n\t                    }\n\t                });\n\t        }\n\t    };\n\t\n\t    this.renderEnd = function() {\n\t        if (renderStack.every( function(d){ return d.__rendered; } )) {\n\t            renderStack.forEach( function(d){ d.__rendered = false; });\n\t            dispatch.renderEnd.apply(this, arguments);\n\t        }\n\t    }\n\t\n\t};\n\t\n\t\n\t/*\n\tTakes multiple objects and combines them into the first one (dst)\n\texample:  nv.utils.deepExtend({a: 1}, {a: 2, b: 3}, {c: 4});\n\tgives:  {a: 2, b: 3, c: 4}\n\t*/\n\tnv.utils.deepExtend = function(dst){\n\t    var sources = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n\t    sources.forEach(function(source) {\n\t        for (var key in source) {\n\t            var isArray = nv.utils.isArray(dst[key]);\n\t            var isObject = nv.utils.isObject(dst[key]);\n\t            var srcObj = nv.utils.isObject(source[key]);\n\t\n\t            if (isObject && !isArray && srcObj) {\n\t                nv.utils.deepExtend(dst[key], source[key]);\n\t            } else {\n\t                dst[key] = source[key];\n\t            }\n\t        }\n\t    });\n\t};\n\t\n\t\n\t/*\n\tstate utility object, used to track d3 states in the models\n\t*/\n\tnv.utils.state = function(){\n\t    if (!(this instanceof nv.utils.state)) {\n\t        return new nv.utils.state();\n\t    }\n\t    var state = {};\n\t    var _self = this;\n\t    var _setState = function(){};\n\t    var _getState = function(){ return {}; };\n\t    var init = null;\n\t    var changed = null;\n\t\n\t    this.dispatch = d3.dispatch('change', 'set');\n\t\n\t    this.dispatch.on('set', function(state){\n\t        _setState(state, true);\n\t    });\n\t\n\t    this.getter = function(fn){\n\t        _getState = fn;\n\t        return this;\n\t    };\n\t\n\t    this.setter = function(fn, callback) {\n\t        if (!callback) {\n\t            callback = function(){};\n\t        }\n\t        _setState = function(state, update){\n\t            fn(state);\n\t            if (update) {\n\t                callback();\n\t            }\n\t        };\n\t        return this;\n\t    };\n\t\n\t    this.init = function(state){\n\t        init = init || {};\n\t        nv.utils.deepExtend(init, state);\n\t    };\n\t\n\t    var _set = function(){\n\t        var settings = _getState();\n\t\n\t        if (JSON.stringify(settings) === JSON.stringify(state)) {\n\t            return false;\n\t        }\n\t\n\t        for (var key in settings) {\n\t            if (state[key] === undefined) {\n\t                state[key] = {};\n\t            }\n\t            state[key] = settings[key];\n\t            changed = true;\n\t        }\n\t        return true;\n\t    };\n\t\n\t    this.update = function(){\n\t        if (init) {\n\t            _setState(init, false);\n\t            init = null;\n\t        }\n\t        if (_set.call(this)) {\n\t            this.dispatch.change(state);\n\t        }\n\t    };\n\t\n\t};\n\t\n\t\n\t/*\n\tSnippet of code you can insert into each nv.models.* to give you the ability to\n\tdo things like:\n\tchart.options({\n\t  showXAxis: true,\n\t  tooltips: true\n\t});\n\t\n\tTo enable in the chart:\n\tchart.options = nv.utils.optionsFunc.bind(chart);\n\t*/\n\tnv.utils.optionsFunc = function(args) {\n\t    if (args) {\n\t        d3.map(args).forEach((function(key,value) {\n\t            if (nv.utils.isFunction(this[key])) {\n\t                this[key](value);\n\t            }\n\t        }).bind(this));\n\t    }\n\t    return this;\n\t};\n\t\n\t\n\t/*\n\tnumTicks:  requested number of ticks\n\tdata:  the chart data\n\t\n\treturns the number of ticks to actually use on X axis, based on chart data\n\tto avoid duplicate ticks with the same value\n\t*/\n\tnv.utils.calcTicksX = function(numTicks, data) {\n\t    // find max number of values from all data streams\n\t    var numValues = 1;\n\t    var i = 0;\n\t    for (i; i < data.length; i += 1) {\n\t        var stream_len = data[i] && data[i].values ? data[i].values.length : 0;\n\t        numValues = stream_len > numValues ? stream_len : numValues;\n\t    }\n\t    nv.log(\"Requested number of ticks: \", numTicks);\n\t    nv.log(\"Calculated max values to be: \", numValues);\n\t    // make sure we don't have more ticks than values to avoid duplicates\n\t    numTicks = numTicks > numValues ? numTicks = numValues - 1 : numTicks;\n\t    // make sure we have at least one tick\n\t    numTicks = numTicks < 1 ? 1 : numTicks;\n\t    // make sure it's an integer\n\t    numTicks = Math.floor(numTicks);\n\t    nv.log(\"Calculating tick count as: \", numTicks);\n\t    return numTicks;\n\t};\n\t\n\t\n\t/*\n\treturns number of ticks to actually use on Y axis, based on chart data\n\t*/\n\tnv.utils.calcTicksY = function(numTicks, data) {\n\t    // currently uses the same logic but we can adjust here if needed later\n\t    return nv.utils.calcTicksX(numTicks, data);\n\t};\n\t\n\t\n\t/*\n\tAdd a particular option from an options object onto chart\n\tOptions exposed on a chart are a getter/setter function that returns chart\n\ton set to mimic typical d3 option chaining, e.g. svg.option1('a').option2('b');\n\t\n\toption objects should be generated via Object.create() to provide\n\tthe option of manipulating data via get/set functions.\n\t*/\n\tnv.utils.initOption = function(chart, name) {\n\t    // if it's a call option, just call it directly, otherwise do get/set\n\t    if (chart._calls && chart._calls[name]) {\n\t        chart[name] = chart._calls[name];\n\t    } else {\n\t        chart[name] = function (_) {\n\t            if (!arguments.length) return chart._options[name];\n\t            chart._overrides[name] = true;\n\t            chart._options[name] = _;\n\t            return chart;\n\t        };\n\t        // calling the option as _option will ignore if set by option already\n\t        // so nvd3 can set options internally but the stop if set manually\n\t        chart['_' + name] = function(_) {\n\t            if (!arguments.length) return chart._options[name];\n\t            if (!chart._overrides[name]) {\n\t                chart._options[name] = _;\n\t            }\n\t            return chart;\n\t        }\n\t    }\n\t};\n\t\n\t\n\t/*\n\tAdd all options in an options object to the chart\n\t*/\n\tnv.utils.initOptions = function(chart) {\n\t    chart._overrides = chart._overrides || {};\n\t    var ops = Object.getOwnPropertyNames(chart._options || {});\n\t    var calls = Object.getOwnPropertyNames(chart._calls || {});\n\t    ops = ops.concat(calls);\n\t    for (var i in ops) {\n\t        nv.utils.initOption(chart, ops[i]);\n\t    }\n\t};\n\t\n\t\n\t/*\n\tInherit options from a D3 object\n\td3.rebind makes calling the function on target actually call it on source\n\tAlso use _d3options so we can track what we inherit for documentation and chained inheritance\n\t*/\n\tnv.utils.inheritOptionsD3 = function(target, d3_source, oplist) {\n\t    target._d3options = oplist.concat(target._d3options || []);\n\t    oplist.unshift(d3_source);\n\t    oplist.unshift(target);\n\t    d3.rebind.apply(this, oplist);\n\t};\n\t\n\t\n\t/*\n\tRemove duplicates from an array\n\t*/\n\tnv.utils.arrayUnique = function(a) {\n\t    return a.sort().filter(function(item, pos) {\n\t        return !pos || item != a[pos - 1];\n\t    });\n\t};\n\t\n\t\n\t/*\n\tKeeps a list of custom symbols to draw from in addition to d3.svg.symbol\n\tNecessary since d3 doesn't let you extend its list -_-\n\tAdd new symbols by doing nv.utils.symbols.set('name', function(size){...});\n\t*/\n\tnv.utils.symbolMap = d3.map();\n\t\n\t\n\t/*\n\tReplaces d3.svg.symbol so that we can look both there and our own map\n\t */\n\tnv.utils.symbol = function() {\n\t    var type,\n\t        size = 64;\n\t    function symbol(d,i) {\n\t        var t = type.call(this,d,i);\n\t        var s = size.call(this,d,i);\n\t        if (d3.svg.symbolTypes.indexOf(t) !== -1) {\n\t            return d3.svg.symbol().type(t).size(s)();\n\t        } else {\n\t            return nv.utils.symbolMap.get(t)(s);\n\t        }\n\t    }\n\t    symbol.type = function(_) {\n\t        if (!arguments.length) return type;\n\t        type = d3.functor(_);\n\t        return symbol;\n\t    };\n\t    symbol.size = function(_) {\n\t        if (!arguments.length) return size;\n\t        size = d3.functor(_);\n\t        return symbol;\n\t    };\n\t    return symbol;\n\t};\n\t\n\t\n\t/*\n\tInherit option getter/setter functions from source to target\n\td3.rebind makes calling the function on target actually call it on source\n\tAlso track via _inherited and _d3options so we can track what we inherit\n\tfor documentation generation purposes and chained inheritance\n\t*/\n\tnv.utils.inheritOptions = function(target, source) {\n\t    // inherit all the things\n\t    var ops = Object.getOwnPropertyNames(source._options || {});\n\t    var calls = Object.getOwnPropertyNames(source._calls || {});\n\t    var inherited = source._inherited || [];\n\t    var d3ops = source._d3options || [];\n\t    var args = ops.concat(calls).concat(inherited).concat(d3ops);\n\t    args.unshift(source);\n\t    args.unshift(target);\n\t    d3.rebind.apply(this, args);\n\t    // pass along the lists to keep track of them, don't allow duplicates\n\t    target._inherited = nv.utils.arrayUnique(ops.concat(calls).concat(inherited).concat(ops).concat(target._inherited || []));\n\t    target._d3options = nv.utils.arrayUnique(d3ops.concat(target._d3options || []));\n\t};\n\t\n\t\n\t/*\n\tRuns common initialize code on the svg before the chart builds\n\t*/\n\tnv.utils.initSVG = function(svg) {\n\t    svg.classed({'nvd3-svg':true});\n\t};\n\t\n\t\n\t/*\n\tSanitize and provide default for the container height.\n\t*/\n\tnv.utils.sanitizeHeight = function(height, container) {\n\t    return (height || parseInt(container.style('height'), 10) || 400);\n\t};\n\t\n\t\n\t/*\n\tSanitize and provide default for the container width.\n\t*/\n\tnv.utils.sanitizeWidth = function(width, container) {\n\t    return (width || parseInt(container.style('width'), 10) || 960);\n\t};\n\t\n\t\n\t/*\n\tCalculate the available height for a chart.\n\t*/\n\tnv.utils.availableHeight = function(height, container, margin) {\n\t    return Math.max(0,nv.utils.sanitizeHeight(height, container) - margin.top - margin.bottom);\n\t};\n\t\n\t/*\n\tCalculate the available width for a chart.\n\t*/\n\tnv.utils.availableWidth = function(width, container, margin) {\n\t    return Math.max(0,nv.utils.sanitizeWidth(width, container) - margin.left - margin.right);\n\t};\n\t\n\t/*\n\tClear any rendered chart components and display a chart's 'noData' message\n\t*/\n\tnv.utils.noData = function(chart, container) {\n\t    var opt = chart.options(),\n\t        margin = opt.margin(),\n\t        noData = opt.noData(),\n\t        data = (noData == null) ? [\"No Data Available.\"] : [noData],\n\t        height = nv.utils.availableHeight(null, container, margin),\n\t        width = nv.utils.availableWidth(null, container, margin),\n\t        x = margin.left + width/2,\n\t        y = margin.top + height/2;\n\t\n\t    //Remove any previously created chart components\n\t    container.selectAll('g').remove();\n\t\n\t    var noDataText = container.selectAll('.nv-noData').data(data);\n\t\n\t    noDataText.enter().append('text')\n\t        .attr('class', 'nvd3 nv-noData')\n\t        .attr('dy', '-.7em')\n\t        .style('text-anchor', 'middle');\n\t\n\t    noDataText\n\t        .attr('x', x)\n\t        .attr('y', y)\n\t        .text(function(t){ return t; });\n\t};\n\t\n\t/*\n\t Wrap long labels.\n\t */\n\tnv.utils.wrapTicks = function (text, width) {\n\t    text.each(function() {\n\t        var text = d3.select(this),\n\t            words = text.text().split(/\\s+/).reverse(),\n\t            word,\n\t            line = [],\n\t            lineNumber = 0,\n\t            lineHeight = 1.1,\n\t            y = text.attr(\"y\"),\n\t            dy = parseFloat(text.attr(\"dy\")),\n\t            tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n\t        while (word = words.pop()) {\n\t            line.push(word);\n\t            tspan.text(line.join(\" \"));\n\t            if (tspan.node().getComputedTextLength() > width) {\n\t                line.pop();\n\t                tspan.text(line.join(\" \"));\n\t                line = [word];\n\t                tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n\t            }\n\t        }\n\t    });\n\t};\n\t\n\t/*\n\tCheck equality of 2 array\n\t*/\n\tnv.utils.arrayEquals = function (array1, array2) {\n\t    if (array1 === array2)\n\t        return true;\n\t\n\t    if (!array1 || !array2)\n\t        return false;\n\t\n\t    // compare lengths - can save a lot of time\n\t    if (array1.length != array2.length)\n\t        return false;\n\t\n\t    for (var i = 0,\n\t        l = array1.length; i < l; i++) {\n\t        // Check if we have nested arrays\n\t        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n\t            // recurse into the nested arrays\n\t            if (!nv.arrayEquals(array1[i], array2[i]))\n\t                return false;\n\t        } else if (array1[i] != array2[i]) {\n\t            // Warning - two different object instances will never be equal: {x:20} != {x:20}\n\t            return false;\n\t        }\n\t    }\n\t    return true;\n\t};\n\tnv.models.axis = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var axis = d3.svg.axis();\n\t    var scale = d3.scale.linear();\n\t\n\t    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t        , width = 75 //only used for tickLabel currently\n\t        , height = 60 //only used for tickLabel currently\n\t        , axisLabelText = null\n\t        , showMaxMin = true //TODO: showMaxMin should be disabled on all ordinal scaled axes\n\t        , rotateLabels = 0\n\t        , rotateYLabel = true\n\t        , staggerLabels = false\n\t        , isOrdinal = false\n\t        , ticks = null\n\t        , axisLabelDistance = 0\n\t        , fontSize = undefined\n\t        , duration = 250\n\t        , dispatch = d3.dispatch('renderEnd')\n\t        ;\n\t    axis\n\t        .scale(scale)\n\t        .orient('bottom')\n\t        .tickFormat(function(d) { return d })\n\t    ;\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var scale0;\n\t    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        selection.each(function(data) {\n\t            var container = d3.select(this);\n\t            nv.utils.initSVG(container);\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap.nv-axis').data([data]);\n\t            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-axis');\n\t            var gEnter = wrapEnter.append('g');\n\t            var g = wrap.select('g');\n\t\n\t            if (ticks !== null)\n\t                axis.ticks(ticks);\n\t            else if (axis.orient() == 'top' || axis.orient() == 'bottom')\n\t                axis.ticks(Math.abs(scale.range()[1] - scale.range()[0]) / 100);\n\t\n\t            //TODO: consider calculating width/height based on whether or not label is added, for reference in charts using this component\n\t            g.watchTransition(renderWatch, 'axis').call(axis);\n\t\n\t            scale0 = scale0 || axis.scale();\n\t\n\t            var fmt = axis.tickFormat();\n\t            if (fmt == null) {\n\t                fmt = scale0.tickFormat();\n\t            }\n\t\n\t            var axisLabel = g.selectAll('text.nv-axislabel')\n\t                .data([axisLabelText || null]);\n\t            axisLabel.exit().remove();\n\t\n\t            //only skip when fontSize is undefined so it can be cleared with a null or blank string\n\t            if (fontSize !== undefined) {\n\t                g.selectAll('g').select(\"text\").style('font-size', fontSize);\n\t            }\n\t\n\t            var xLabelMargin;\n\t            var axisMaxMin;\n\t            var w;\n\t            switch (axis.orient()) {\n\t                case 'top':\n\t                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n\t                  w = 0;\n\t                  if (scale.range().length === 1) {\n\t                    w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;\n\t                  } else if (scale.range().length === 2) {\n\t                    w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];\n\t                  } else if ( scale.range().length > 2){\n\t                    w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);\n\t                  };\n\t                    axisLabel\n\t                        .attr('text-anchor', 'middle')\n\t                        .attr('y', 0)\n\t                        .attr('x', w/2);\n\t                    if (showMaxMin) {\n\t                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n\t                            .data(scale.domain());\n\t                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n\t                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')\n\t                        }).append('text');\n\t                        axisMaxMin.exit().remove();\n\t                        axisMaxMin\n\t                            .attr('transform', function(d,i) {\n\t                                return 'translate(' + nv.utils.NaNtoZero(scale(d)) + ',0)'\n\t                            })\n\t                            .select('text')\n\t                            .attr('dy', '-0.5em')\n\t                            .attr('y', -axis.tickPadding())\n\t                            .attr('text-anchor', 'middle')\n\t                            .text(function(d,i) {\n\t                                var v = fmt(d);\n\t                                return ('' + v).match('NaN') ? '' : v;\n\t                            });\n\t                        axisMaxMin.watchTransition(renderWatch, 'min-max top')\n\t                            .attr('transform', function(d,i) {\n\t                                return 'translate(' + nv.utils.NaNtoZero(scale.range()[i]) + ',0)'\n\t                            });\n\t                    }\n\t                    break;\n\t                case 'bottom':\n\t                    xLabelMargin = axisLabelDistance + 36;\n\t                    var maxTextWidth = 30;\n\t                    var textHeight = 0;\n\t                    var xTicks = g.selectAll('g').select(\"text\");\n\t                    var rotateLabelsRule = '';\n\t                    if (rotateLabels%360) {\n\t                        //Reset transform on ticks so textHeight can be calculated correctly\n\t                        xTicks.attr('transform', ''); \n\t                        //Calculate the longest xTick width\n\t                        xTicks.each(function(d,i){\n\t                            var box = this.getBoundingClientRect();\n\t                            var width = box.width;\n\t                            textHeight = box.height;\n\t                            if(width > maxTextWidth) maxTextWidth = width;\n\t                        });\n\t                        rotateLabelsRule = 'rotate(' + rotateLabels + ' 0,' + (textHeight/2 + axis.tickPadding()) + ')';\n\t                        //Convert to radians before calculating sin. Add 30 to margin for healthy padding.\n\t                        var sin = Math.abs(Math.sin(rotateLabels*Math.PI/180));\n\t                        xLabelMargin = (sin ? sin*maxTextWidth : maxTextWidth)+30;\n\t                        //Rotate all xTicks\n\t                        xTicks\n\t                            .attr('transform', rotateLabelsRule)\n\t                            .style('text-anchor', rotateLabels%360 > 0 ? 'start' : 'end');\n\t                    } else {\n\t                        if (staggerLabels) {\n\t                            xTicks\n\t                                .attr('transform', function(d,i) {\n\t                                    return 'translate(0,' + (i % 2 == 0 ? '0' : '12') + ')'\n\t                                });\n\t                        } else {\n\t                            xTicks.attr('transform', \"translate(0,0)\");\n\t                        }\n\t                    }\n\t                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n\t                    w = 0;\n\t                    if (scale.range().length === 1) {\n\t                        w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;\n\t                    } else if (scale.range().length === 2) {\n\t                        w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];\n\t                    } else if ( scale.range().length > 2){\n\t                        w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);\n\t                    };\n\t                    axisLabel\n\t                        .attr('text-anchor', 'middle')\n\t                        .attr('y', xLabelMargin)\n\t                        .attr('x', w/2);\n\t                    if (showMaxMin) {\n\t                        //if (showMaxMin && !isOrdinal) {\n\t                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n\t                            //.data(scale.domain())\n\t                            .data([scale.domain()[0], scale.domain()[scale.domain().length - 1]]);\n\t                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n\t                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')\n\t                        }).append('text');\n\t                        axisMaxMin.exit().remove();\n\t                        axisMaxMin\n\t                            .attr('transform', function(d,i) {\n\t                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'\n\t                            })\n\t                            .select('text')\n\t                            .attr('dy', '.71em')\n\t                            .attr('y', axis.tickPadding())\n\t                            .attr('transform', rotateLabelsRule)\n\t                            .style('text-anchor', rotateLabels ? (rotateLabels%360 > 0 ? 'start' : 'end') : 'middle')\n\t                            .text(function(d,i) {\n\t                                var v = fmt(d);\n\t                                return ('' + v).match('NaN') ? '' : v;\n\t                            });\n\t                        axisMaxMin.watchTransition(renderWatch, 'min-max bottom')\n\t                            .attr('transform', function(d,i) {\n\t                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'\n\t                            });\n\t                    }\n\t\n\t                    break;\n\t                case 'right':\n\t                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n\t                    axisLabel\n\t                        .style('text-anchor', rotateYLabel ? 'middle' : 'begin')\n\t                        .attr('transform', rotateYLabel ? 'rotate(90)' : '')\n\t                        .attr('y', rotateYLabel ? (-Math.max(margin.right, width) + 12 - (axisLabelDistance || 0)) : -10) //TODO: consider calculating this based on largest tick width... OR at least expose this on chart\n\t                        .attr('x', rotateYLabel ? (d3.max(scale.range()) / 2) : axis.tickPadding());\n\t                    if (showMaxMin) {\n\t                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n\t                            .data(scale.domain());\n\t                       \taxisMaxMin.enter().append('g').attr('class',function(d,i){\n\t                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')\n\t                        }).append('text')\n\t                            .style('opacity', 0);\n\t                        axisMaxMin.exit().remove();\n\t                        axisMaxMin\n\t                            .attr('transform', function(d,i) {\n\t                                return 'translate(0,' + nv.utils.NaNtoZero(scale(d)) + ')'\n\t                            })\n\t                            .select('text')\n\t                            .attr('dy', '.32em')\n\t                            .attr('y', 0)\n\t                            .attr('x', axis.tickPadding())\n\t                            .style('text-anchor', 'start')\n\t                            .text(function(d, i) {\n\t                                var v = fmt(d);\n\t                                return ('' + v).match('NaN') ? '' : v;\n\t                            });\n\t                        axisMaxMin.watchTransition(renderWatch, 'min-max right')\n\t                            .attr('transform', function(d,i) {\n\t                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'\n\t                            })\n\t                            .select('text')\n\t                            .style('opacity', 1);\n\t                    }\n\t                    break;\n\t                case 'left':\n\t                    /*\n\t                     //For dynamically placing the label. Can be used with dynamically-sized chart axis margins\n\t                     var yTicks = g.selectAll('g').select(\"text\");\n\t                     yTicks.each(function(d,i){\n\t                     var labelPadding = this.getBoundingClientRect().width + axis.tickPadding() + 16;\n\t                     if(labelPadding > width) width = labelPadding;\n\t                     });\n\t                     */\n\t                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n\t                    axisLabel\n\t                        .style('text-anchor', rotateYLabel ? 'middle' : 'end')\n\t                        .attr('transform', rotateYLabel ? 'rotate(-90)' : '')\n\t                        .attr('y', rotateYLabel ? (-Math.max(margin.left, width) + 25 - (axisLabelDistance || 0)) : -10)\n\t                        .attr('x', rotateYLabel ? (-d3.max(scale.range()) / 2) : -axis.tickPadding());\n\t                    if (showMaxMin) {\n\t                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n\t                            .data(scale.domain());\n\t                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n\t                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')\n\t                        }).append('text')\n\t                            .style('opacity', 0);\n\t                        axisMaxMin.exit().remove();\n\t                        axisMaxMin\n\t                            .attr('transform', function(d,i) {\n\t                                return 'translate(0,' + nv.utils.NaNtoZero(scale0(d)) + ')'\n\t                            })\n\t                            .select('text')\n\t                            .attr('dy', '.32em')\n\t                            .attr('y', 0)\n\t                            .attr('x', -axis.tickPadding())\n\t                            .attr('text-anchor', 'end')\n\t                            .text(function(d,i) {\n\t                                var v = fmt(d);\n\t                                return ('' + v).match('NaN') ? '' : v;\n\t                            });\n\t                        axisMaxMin.watchTransition(renderWatch, 'min-max right')\n\t                            .attr('transform', function(d,i) {\n\t                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'\n\t                            })\n\t                            .select('text')\n\t                            .style('opacity', 1);\n\t                    }\n\t                    break;\n\t            }\n\t            axisLabel.text(function(d) { return d });\n\t\n\t            if (showMaxMin && (axis.orient() === 'left' || axis.orient() === 'right')) {\n\t                //check if max and min overlap other values, if so, hide the values that overlap\n\t                g.selectAll('g') // the g's wrapping each tick\n\t                    .each(function(d,i) {\n\t                        d3.select(this).select('text').attr('opacity', 1);\n\t                        if (scale(d) < scale.range()[1] + 10 || scale(d) > scale.range()[0] - 10) { // 10 is assuming text height is 16... if d is 0, leave it!\n\t                            if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n\t                                d3.select(this).attr('opacity', 0);\n\t\n\t                            d3.select(this).select('text').attr('opacity', 0); // Don't remove the ZERO line!!\n\t                        }\n\t                    });\n\t\n\t                //if Max and Min = 0 only show min, Issue #281\n\t                if (scale.domain()[0] == scale.domain()[1] && scale.domain()[0] == 0) {\n\t                    wrap.selectAll('g.nv-axisMaxMin').style('opacity', function (d, i) {\n\t                        return !i ? 1 : 0\n\t                    });\n\t                }\n\t            }\n\t\n\t            if (showMaxMin && (axis.orient() === 'top' || axis.orient() === 'bottom')) {\n\t                var maxMinRange = [];\n\t                wrap.selectAll('g.nv-axisMaxMin')\n\t                    .each(function(d,i) {\n\t                        try {\n\t                            if (i) // i== 1, max position\n\t                                maxMinRange.push(scale(d) - this.getBoundingClientRect().width - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n\t                            else // i==0, min position\n\t                                maxMinRange.push(scale(d) + this.getBoundingClientRect().width + 4)\n\t                        }catch (err) {\n\t                            if (i) // i== 1, max position\n\t                                maxMinRange.push(scale(d) - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n\t                            else // i==0, min position\n\t                                maxMinRange.push(scale(d) + 4);\n\t                        }\n\t                    });\n\t                // the g's wrapping each tick\n\t                g.selectAll('g').each(function(d, i) {\n\t                    if (scale(d) < maxMinRange[0] || scale(d) > maxMinRange[1]) {\n\t                        if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n\t                            d3.select(this).remove();\n\t                        else\n\t                            d3.select(this).select('text').remove(); // Don't remove the ZERO line!!\n\t                    }\n\t                });\n\t            }\n\t\n\t            //Highlight zero tick line\n\t            g.selectAll('.tick')\n\t                .filter(function (d) {\n\t                    /*\n\t                    The filter needs to return only ticks at or near zero.\n\t                    Numbers like 0.00001 need to count as zero as well,\n\t                    and the arithmetic trick below solves that.\n\t                    */\n\t                    return !parseFloat(Math.round(d * 100000) / 1000000) && (d !== undefined)\n\t                }) \n\t                .classed('zero', true);\n\t            \n\t            //store old scales for use in transitions on update\n\t            scale0 = scale.copy();\n\t\n\t        });\n\t\n\t        renderWatch.renderEnd('axis immediate');\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    // expose chart's sub-components\n\t    chart.axis = axis;\n\t    chart.dispatch = dispatch;\n\t\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        axisLabelDistance: {get: function(){return axisLabelDistance;}, set: function(_){axisLabelDistance=_;}},\n\t        staggerLabels:     {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n\t        rotateLabels:      {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n\t        rotateYLabel:      {get: function(){return rotateYLabel;}, set: function(_){rotateYLabel=_;}},\n\t        showMaxMin:        {get: function(){return showMaxMin;}, set: function(_){showMaxMin=_;}},\n\t        axisLabel:         {get: function(){return axisLabelText;}, set: function(_){axisLabelText=_;}},\n\t        height:            {get: function(){return height;}, set: function(_){height=_;}},\n\t        ticks:             {get: function(){return ticks;}, set: function(_){ticks=_;}},\n\t        width:             {get: function(){return width;}, set: function(_){width=_;}},\n\t        fontSize:          {get: function(){return fontSize;}, set: function(_){fontSize=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top !== undefined    ? _.top    : margin.top;\n\t            margin.right  = _.right !== undefined  ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left !== undefined   ? _.left   : margin.left;\n\t        }},\n\t        duration: {get: function(){return duration;}, set: function(_){\n\t            duration=_;\n\t            renderWatch.reset(duration);\n\t        }},\n\t        scale: {get: function(){return scale;}, set: function(_){\n\t            scale = _;\n\t            axis.scale(scale);\n\t            isOrdinal = typeof scale.rangeBands === 'function';\n\t            nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);\n\t        }}\n\t    });\n\t\n\t    nv.utils.initOptions(chart);\n\t    nv.utils.inheritOptionsD3(chart, axis, ['orient', 'tickValues', 'tickSubdivide', 'tickSize', 'tickPadding', 'tickFormat']);\n\t    nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);\n\t\n\t    return chart;\n\t};\n\tnv.models.boxPlot = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var margin = {top: 0, right: 0, bottom: 0, left: 0},\n\t        width = 960,\n\t        height = 500,\n\t        id = Math.floor(Math.random() * 10000), // Create semi-unique ID in case user doesn't select one\n\t        xScale = d3.scale.ordinal(),\n\t        yScale = d3.scale.linear(),\n\t        getX  = function(d) { return d.label }, // Default data model selectors.\n\t        getQ1 = function(d) { return d.values.Q1 },\n\t        getQ2 = function(d) { return d.values.Q2 },\n\t        getQ3 = function(d) { return d.values.Q3 },\n\t        getWl = function(d) { return d.values.whisker_low },\n\t        getWh = function(d) { return d.values.whisker_high },\n\t        getColor = function(d) { return d.color },\n\t        getOlItems  = function(d) { return d.values.outliers },\n\t        getOlValue = function(d, i, j) { return d },\n\t        getOlLabel = function(d, i, j) { return d },\n\t        getOlColor = function(d, i, j) { return undefined },\n\t        color = nv.utils.defaultColor(),\n\t        container = null,\n\t        xDomain, xRange,\n\t        yDomain, yRange,\n\t        dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd'),\n\t        duration = 250,\n\t        maxBoxWidth = null;\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var xScale0, yScale0;\n\t    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        selection.each(function(data) {\n\t            var availableWidth = width - margin.left - margin.right,\n\t                availableHeight = height - margin.top - margin.bottom;\n\t\n\t            container = d3.select(this);\n\t            nv.utils.initSVG(container);\n\t\n\t            // Setup Scales\n\t            xScale.domain(xDomain || data.map(function(d,i) { return getX(d,i); }))\n\t                .rangeBands(xRange || [0, availableWidth], 0.1);\n\t\n\t            // if we know yDomain, no need to calculate\n\t            var yData = []\n\t            if (!yDomain) {\n\t                // (y-range is based on quartiles, whiskers and outliers)\n\t                var values = [], yMin, yMax;\n\t                data.forEach(function (d, i) {\n\t                    var q1 = getQ1(d), q3 = getQ3(d), wl = getWl(d), wh = getWh(d);\n\t                    var olItems = getOlItems(d);\n\t                    if (olItems) {\n\t                        olItems.forEach(function (e, i) {\n\t                            values.push(getOlValue(e, i, undefined));\n\t                        });\n\t                    }\n\t                    if (wl) { values.push(wl) }\n\t                    if (q1) { values.push(q1) }\n\t                    if (q3) { values.push(q3) }\n\t                    if (wh) { values.push(wh) }\n\t                });\n\t                yMin = d3.min(values);\n\t                yMax = d3.max(values);\n\t                yData = [ yMin, yMax ] ;\n\t            }\n\t\n\t            yScale.domain(yDomain || yData);\n\t            yScale.range(yRange || [availableHeight, 0]);\n\t\n\t            //store old scales if they exist\n\t            xScale0 = xScale0 || xScale;\n\t            yScale0 = yScale0 || yScale.copy().range([yScale(0),yScale(0)]);\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap').data([data]);\n\t            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap');\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            var boxplots = wrap.selectAll('.nv-boxplot').data(function(d) { return d });\n\t            var boxEnter = boxplots.enter().append('g').style('stroke-opacity', 1e-6).style('fill-opacity', 1e-6);\n\t            boxplots\n\t                .attr('class', 'nv-boxplot')\n\t                .attr('transform', function(d,i,j) { return 'translate(' + (xScale(getX(d,i)) + xScale.rangeBand() * 0.05) + ', 0)'; })\n\t                .classed('hover', function(d) { return d.hover });\n\t            boxplots\n\t                .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n\t                .style('stroke-opacity', 1)\n\t                .style('fill-opacity', 0.75)\n\t                .delay(function(d,i) { return i * duration / data.length })\n\t                .attr('transform', function(d,i) {\n\t                    return 'translate(' + (xScale(getX(d,i)) + xScale.rangeBand() * 0.05) + ', 0)';\n\t                });\n\t            boxplots.exit().remove();\n\t\n\t            // ----- add the SVG elements for each boxPlot -----\n\t\n\t            // conditionally append whisker lines\n\t            boxEnter.each(function(d,i) {\n\t                var box = d3.select(this);\n\t                [getWl, getWh].forEach(function (f) {\n\t                    if (f(d) !== undefined && f(d) !== null) {\n\t                        var key = (f === getWl) ? 'low' : 'high';\n\t                        box.append('line')\n\t                          .style('stroke', getColor(d) || color(d,i))\n\t                          .attr('class', 'nv-boxplot-whisker nv-boxplot-' + key);\n\t                        box.append('line')\n\t                          .style('stroke', getColor(d) || color(d,i))\n\t                          .attr('class', 'nv-boxplot-tick nv-boxplot-' + key);\n\t                    }\n\t                });\n\t            });\n\t\n\t            var box_width = function() { return (maxBoxWidth === null ? xScale.rangeBand() * 0.9 : Math.min(75, xScale.rangeBand() * 0.9)); };\n\t            var box_left  = function() { return xScale.rangeBand() * 0.45 - box_width()/2; };\n\t            var box_right = function() { return xScale.rangeBand() * 0.45 + box_width()/2; };\n\t\n\t            // update whisker lines and ticks\n\t            [getWl, getWh].forEach(function (f) {\n\t                var key = (f === getWl) ? 'low' : 'high';\n\t                var endpoint = (f === getWl) ? getQ1 : getQ3;\n\t                boxplots.select('line.nv-boxplot-whisker.nv-boxplot-' + key)\n\t                  .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n\t                    .attr('x1', xScale.rangeBand() * 0.45 )\n\t                    .attr('y1', function(d,i) { return yScale(f(d)); })\n\t                    .attr('x2', xScale.rangeBand() * 0.45 )\n\t                    .attr('y2', function(d,i) { return yScale(endpoint(d)); });\n\t                boxplots.select('line.nv-boxplot-tick.nv-boxplot-' + key)\n\t                  .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n\t                    .attr('x1', box_left )\n\t                    .attr('y1', function(d,i) { return yScale(f(d)); })\n\t                    .attr('x2', box_right )\n\t                    .attr('y2', function(d,i) { return yScale(f(d)); });\n\t            });\n\t\n\t            [getWl, getWh].forEach(function (f) {\n\t                var key = (f === getWl) ? 'low' : 'high';\n\t                boxEnter.selectAll('.nv-boxplot-' + key)\n\t                  .on('mouseover', function(d,i,j) {\n\t                      d3.select(this).classed('hover', true);\n\t                      dispatch.elementMouseover({\n\t                          series: { key: f(d), color: getColor(d) || color(d,j) },\n\t                          e: d3.event\n\t                      });\n\t                  })\n\t                  .on('mouseout', function(d,i,j) {\n\t                      d3.select(this).classed('hover', false);\n\t                      dispatch.elementMouseout({\n\t                          series: { key: f(d), color: getColor(d) || color(d,j) },\n\t                          e: d3.event\n\t                      });\n\t                  })\n\t                  .on('mousemove', function(d,i) {\n\t                      dispatch.elementMousemove({e: d3.event});\n\t                  });\n\t            });\n\t\n\t            // boxes\n\t            boxEnter.append('rect')\n\t                .attr('class', 'nv-boxplot-box')\n\t                // tooltip events\n\t                .on('mouseover', function(d,i) {\n\t                    d3.select(this).classed('hover', true);\n\t                    dispatch.elementMouseover({\n\t                        key: getX(d),\n\t                        value: getX(d),\n\t                        series: [\n\t                            { key: 'Q3', value: getQ3(d), color: getColor(d) || color(d,i) },\n\t                            { key: 'Q2', value: getQ2(d), color: getColor(d) || color(d,i) },\n\t                            { key: 'Q1', value: getQ1(d), color: getColor(d) || color(d,i) }\n\t                        ],\n\t                        data: d,\n\t                        index: i,\n\t                        e: d3.event\n\t                    });\n\t                })\n\t                .on('mouseout', function(d,i) {\n\t                    d3.select(this).classed('hover', false);\n\t                    dispatch.elementMouseout({\n\t                        key: getX(d),\n\t                        value: getX(d),\n\t                        series: [\n\t                            { key: 'Q3', value: getQ3(d), color: getColor(d) || color(d,i) },\n\t                            { key: 'Q2', value: getQ2(d), color: getColor(d) || color(d,i) },\n\t                            { key: 'Q1', value: getQ1(d), color: getColor(d) || color(d,i) }\n\t                        ],\n\t                        data: d,\n\t                        index: i,\n\t                        e: d3.event\n\t                    });\n\t                })\n\t                .on('mousemove', function(d,i) {\n\t                    dispatch.elementMousemove({e: d3.event});\n\t                });\n\t\n\t            // box transitions\n\t            boxplots.select('rect.nv-boxplot-box')\n\t              .watchTransition(renderWatch, 'nv-boxplot: boxes')\n\t                .attr('y', function(d,i) { return yScale(getQ3(d)); })\n\t                .attr('width', box_width)\n\t                .attr('x', box_left )\n\t                .attr('height', function(d,i) { return Math.abs(yScale(getQ3(d)) - yScale(getQ1(d))) || 1 })\n\t                .style('fill', function(d,i) { return getColor(d) || color(d,i) })\n\t                .style('stroke', function(d,i) { return getColor(d) || color(d,i) });\n\t\n\t            // median line\n\t            boxEnter.append('line').attr('class', 'nv-boxplot-median');\n\t\n\t            boxplots.select('line.nv-boxplot-median')\n\t              .watchTransition(renderWatch, 'nv-boxplot: boxplots line')\n\t                .attr('x1', box_left)\n\t                .attr('y1', function(d,i) { return yScale(getQ2(d)); })\n\t                .attr('x2', box_right)\n\t                .attr('y2', function(d,i) { return yScale(getQ2(d)); });\n\t\n\t            // outliers\n\t            var outliers = boxplots.selectAll('.nv-boxplot-outlier').data(function(d) {\n\t                return getOlItems(d) || [];\n\t            });\n\t            outliers.enter().append('circle')\n\t                .style('fill', function(d,i,j) { return getOlColor(d,i,j) || color(d,j) })\n\t                .style('stroke', function(d,i,j) { return getOlColor(d,i,j) || color(d,j) })\n\t                .style('z-index', 9000)\n\t                .on('mouseover', function(d,i,j) {\n\t                    d3.select(this).classed('hover', true);\n\t                    dispatch.elementMouseover({\n\t                        series: { key: getOlLabel(d,i,j), color: getOlColor(d,i,j) || color(d,j) },\n\t                        e: d3.event\n\t                    });\n\t                })\n\t                .on('mouseout', function(d,i,j) {\n\t                    d3.select(this).classed('hover', false);\n\t                    dispatch.elementMouseout({\n\t                        series: { key: getOlLabel(d,i,j), color: getOlColor(d,i,j) || color(d,j) },\n\t                        e: d3.event\n\t                    });\n\t                })\n\t                .on('mousemove', function(d,i) {\n\t                    dispatch.elementMousemove({e: d3.event});\n\t                });\n\t            outliers.attr('class', 'nv-boxplot-outlier');\n\t            outliers\n\t              .watchTransition(renderWatch, 'nv-boxplot: nv-boxplot-outlier')\n\t                .attr('cx', xScale.rangeBand() * 0.45)\n\t                .attr('cy', function(d,i,j) { return yScale(getOlValue(d,i,j)); })\n\t                .attr('r', '3');\n\t            outliers.exit().remove();\n\t\n\t            //store old scales for use in transitions on update\n\t            xScale0 = xScale.copy();\n\t            yScale0 = yScale.copy();\n\t        });\n\t\n\t        renderWatch.renderEnd('nv-boxplot immediate');\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    chart.dispatch = dispatch;\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:       {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:      {get: function(){return height;}, set: function(_){height=_;}},\n\t        maxBoxWidth: {get: function(){return maxBoxWidth;}, set: function(_){maxBoxWidth=_;}},\n\t        x:           {get: function(){return getX;}, set: function(_){getX=_;}},\n\t        q1: {get: function(){return getQ1;}, set: function(_){getQ1=_;}},\n\t        q2: {get: function(){return getQ2;}, set: function(_){getQ2=_;}},\n\t        q3: {get: function(){return getQ3;}, set: function(_){getQ3=_;}},\n\t        wl: {get: function(){return getWl;}, set: function(_){getWl=_;}},\n\t        wh: {get: function(){return getWh;}, set: function(_){getWh=_;}},\n\t        itemColor:    {get: function(){return getColor;}, set: function(_){getColor=_;}},\n\t        outliers:     {get: function(){return getOlItems;}, set: function(_){getOlItems=_;}},\n\t        outlierValue: {get: function(){return getOlValue;}, set: function(_){getOlValue=_;}},\n\t        outlierLabel: {get: function(){return getOlLabel;}, set: function(_){getOlLabel=_;}},\n\t        outlierColor: {get: function(){return getOlColor;}, set: function(_){getOlColor=_;}},\n\t        xScale:  {get: function(){return xScale;}, set: function(_){xScale=_;}},\n\t        yScale:  {get: function(){return yScale;}, set: function(_){yScale=_;}},\n\t        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n\t        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n\t        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n\t        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n\t        id:          {get: function(){return id;}, set: function(_){id=_;}},\n\t        // rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},\n\t        y: {\n\t            get: function() {\n\t                console.warn('BoxPlot \\'y\\' chart option is deprecated. Please use model overrides instead.');\n\t                return {};\n\t            },\n\t            set: function(_) {\n\t                console.warn('BoxPlot \\'y\\' chart option is deprecated. Please use model overrides instead.');\n\t            }\n\t        },\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t        }},\n\t        duration: {get: function(){return duration;}, set: function(_){\n\t            duration = _;\n\t            renderWatch.reset(duration);\n\t        }}\n\t    });\n\t\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t};\n\tnv.models.boxPlotChart = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var boxplot = nv.models.boxPlot(),\n\t        xAxis = nv.models.axis(),\n\t        yAxis = nv.models.axis();\n\t\n\t    var margin = {top: 15, right: 10, bottom: 50, left: 60},\n\t        width = null,\n\t        height = null,\n\t        color = nv.utils.getColor(),\n\t        showXAxis = true,\n\t        showYAxis = true,\n\t        rightAlignYAxis = false,\n\t        staggerLabels = false,\n\t        tooltip = nv.models.tooltip(),\n\t        x, y,\n\t        noData = 'No Data Available.',\n\t        dispatch = d3.dispatch('beforeUpdate', 'renderEnd'),\n\t        duration = 250;\n\t\n\t    xAxis\n\t        .orient('bottom')\n\t        .showMaxMin(false)\n\t        .tickFormat(function(d) { return d })\n\t    ;\n\t    yAxis\n\t        .orient((rightAlignYAxis) ? 'right' : 'left')\n\t        .tickFormat(d3.format(',.1f'))\n\t    ;\n\t\n\t    tooltip.duration(0);\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        renderWatch.models(boxplot);\n\t        if (showXAxis) renderWatch.models(xAxis);\n\t        if (showYAxis) renderWatch.models(yAxis);\n\t\n\t        selection.each(function(data) {\n\t            var container = d3.select(this), that = this;\n\t            nv.utils.initSVG(container);\n\t            var availableWidth = (width  || parseInt(container.style('width')) || 960) - margin.left - margin.right;\n\t            var availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;\n\t\n\t            chart.update = function() {\n\t                dispatch.beforeUpdate();\n\t                container.transition().duration(duration).call(chart);\n\t            };\n\t            chart.container = this;\n\t\n\t            // TODO still need to find a way to validate quartile data presence using boxPlot callbacks.\n\t            // Display No Data message if there's nothing to show. (quartiles required at minimum).\n\t            if (!data || !data.length) {\n\t                var noDataText = container.selectAll('.nv-noData').data([noData]);\n\t\n\t                noDataText.enter().append('text')\n\t                    .attr('class', 'nvd3 nv-noData')\n\t                    .attr('dy', '-.7em')\n\t                    .style('text-anchor', 'middle');\n\t\n\t                noDataText\n\t                    .attr('x', margin.left + availableWidth / 2)\n\t                    .attr('y', margin.top + availableHeight / 2)\n\t                    .text(function(d) { return d });\n\t\n\t                return chart;\n\t            } else {\n\t                container.selectAll('.nv-noData').remove();\n\t            }\n\t\n\t            // Setup Scales\n\t            x = boxplot.xScale();\n\t            y = boxplot.yScale().clamp(true);\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap.nv-boxPlotWithAxes').data([data]);\n\t            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-boxPlotWithAxes').append('g');\n\t            var defsEnter = gEnter.append('defs');\n\t            var g = wrap.select('g');\n\t\n\t            gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t            gEnter.append('g').attr('class', 'nv-y nv-axis')\n\t                .append('g').attr('class', 'nv-zeroLine')\n\t                .append('line');\n\t\n\t            gEnter.append('g').attr('class', 'nv-barsWrap');\n\t            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            if (rightAlignYAxis) {\n\t                g.select('.nv-y.nv-axis')\n\t                    .attr('transform', 'translate(' + availableWidth + ',0)');\n\t            }\n\t\n\t            // Main Chart Component(s)\n\t            boxplot.width(availableWidth).height(availableHeight);\n\t\n\t            var barsWrap = g.select('.nv-barsWrap')\n\t                .datum(data.filter(function(d) { return !d.disabled }))\n\t\n\t            barsWrap.transition().call(boxplot);\n\t\n\t            defsEnter.append('clipPath')\n\t                .attr('id', 'nv-x-label-clip-' + boxplot.id())\n\t                .append('rect');\n\t\n\t            g.select('#nv-x-label-clip-' + boxplot.id() + ' rect')\n\t                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))\n\t                .attr('height', 16)\n\t                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));\n\t\n\t            // Setup Axes\n\t            if (showXAxis) {\n\t                xAxis\n\t                    .scale(x)\n\t                    .ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n\t                    .tickSize(-availableHeight, 0);\n\t\n\t                g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')');\n\t                g.select('.nv-x.nv-axis').call(xAxis);\n\t\n\t                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n\t                if (staggerLabels) {\n\t                    xTicks\n\t                        .selectAll('text')\n\t                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 === 0 ? '5' : '17') + ')' })\n\t                }\n\t            }\n\t\n\t            if (showYAxis) {\n\t                yAxis\n\t                    .scale(y)\n\t                    .ticks( Math.floor(availableHeight/36) ) // can't use nv.utils.calcTicksY with Object data\n\t                    .tickSize( -availableWidth, 0);\n\t\n\t                g.select('.nv-y.nv-axis').call(yAxis);\n\t            }\n\t\n\t            // Zero line\n\t            g.select('.nv-zeroLine line')\n\t                .attr('x1',0)\n\t                .attr('x2',availableWidth)\n\t                .attr('y1', y(0))\n\t                .attr('y2', y(0))\n\t            ;\n\t\n\t            //============================================================\n\t            // Event Handling/Dispatching (in chart's scope)\n\t            //------------------------------------------------------------\n\t        });\n\t\n\t        renderWatch.renderEnd('nv-boxplot chart immediate');\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Event Handling/Dispatching (out of chart's scope)\n\t    //------------------------------------------------------------\n\t\n\t    boxplot.dispatch.on('elementMouseover.tooltip', function(evt) {\n\t        tooltip.data(evt).hidden(false);\n\t    });\n\t\n\t    boxplot.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t        tooltip.data(evt).hidden(true);\n\t    });\n\t\n\t    boxplot.dispatch.on('elementMousemove.tooltip', function(evt) {\n\t        tooltip();\n\t    });\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    chart.dispatch = dispatch;\n\t    chart.boxplot = boxplot;\n\t    chart.xAxis = xAxis;\n\t    chart.yAxis = yAxis;\n\t    chart.tooltip = tooltip;\n\t\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:      {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\t        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n\t        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n\t        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n\t        tooltipContent:    {get: function(){return tooltip;}, set: function(_){tooltip=_;}},\n\t        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        duration: {get: function(){return duration;}, set: function(_){\n\t            duration = _;\n\t            renderWatch.reset(duration);\n\t            boxplot.duration(duration);\n\t            xAxis.duration(duration);\n\t            yAxis.duration(duration);\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t            boxplot.color(color);\n\t        }},\n\t        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n\t            rightAlignYAxis = _;\n\t            yAxis.orient( (_) ? 'right' : 'left');\n\t        }}\n\t    });\n\t\n\t    nv.utils.inheritOptions(chart, boxplot);\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t}\n\t\n\t// Chart design based on the recommendations of Stephen Few. Implementation\n\t// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n\t// http://projects.instantcognition.com/protovis/bulletchart/\n\t\n\tnv.models.bullet = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t        , orient = 'left' // TODO top & bottom\n\t        , reverse = false\n\t        , ranges = function(d) { return d.ranges }\n\t        , markers = function(d) { return d.markers ? d.markers : [] }\n\t        , markerLines = function(d) { return d.markerLines ? d.markerLines : [0] }\n\t        , measures = function(d) { return d.measures }\n\t        , rangeLabels = function(d) { return d.rangeLabels ? d.rangeLabels : [] }\n\t        , markerLabels = function(d) { return d.markerLabels ? d.markerLabels : []  }\n\t        , markerLineLabels = function(d) { return d.markerLineLabels ? d.markerLineLabels : []  }\n\t        , measureLabels = function(d) { return d.measureLabels ? d.measureLabels : []  }\n\t        , forceX = [0] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n\t        , width = 380\n\t        , height = 30\n\t        , container = null\n\t        , tickFormat = null\n\t        , color = nv.utils.getColor(['#1f77b4'])\n\t        , dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove')\n\t        , defaultRangeLabels = [\"Maximum\", \"Mean\", \"Minimum\"]\n\t        , legacyRangeClassNames = [\"Max\", \"Avg\", \"Min\"]\n\t        , duration = 1000\n\t        ;\n\t\n\t    function sortLabels(labels, values){\n\t        var lz = labels.slice();\n\t        labels.sort(function(a, b){\n\t            var iA = lz.indexOf(a);\n\t            var iB = lz.indexOf(b);\n\t            return d3.descending(values[iA], values[iB]);\n\t        });\n\t    };\n\t\n\t    function chart(selection) {\n\t        selection.each(function(d, i) {\n\t            var availableWidth = width - margin.left - margin.right,\n\t                availableHeight = height - margin.top - margin.bottom;\n\t\n\t            container = d3.select(this);\n\t            nv.utils.initSVG(container);\n\t\n\t            var rangez = ranges.call(this, d, i).slice(),\n\t                markerz = markers.call(this, d, i).slice(),\n\t                markerLinez = markerLines.call(this, d, i).slice(),\n\t                measurez = measures.call(this, d, i).slice(),\n\t                rangeLabelz = rangeLabels.call(this, d, i).slice(),\n\t                markerLabelz = markerLabels.call(this, d, i).slice(),\n\t                markerLineLabelz = markerLineLabels.call(this, d, i).slice(),\n\t                measureLabelz = measureLabels.call(this, d, i).slice();\n\t\n\t            // Sort labels according to their sorted values\n\t            sortLabels(rangeLabelz, rangez);\n\t            sortLabels(markerLabelz, markerz);\n\t            sortLabels(markerLineLabelz, markerLinez);\n\t            sortLabels(measureLabelz, measurez);\n\t\n\t            // sort values descending\n\t            rangez.sort(d3.descending);\n\t            markerz.sort(d3.descending);\n\t            markerLinez.sort(d3.descending);\n\t            measurez.sort(d3.descending);\n\t\n\t            // Setup Scales\n\t            // Compute the new x-scale.\n\t            var x1 = d3.scale.linear()\n\t                .domain( d3.extent(d3.merge([forceX, rangez])) )\n\t                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\t\n\t            // Retrieve the old x-scale, if this is an update.\n\t            var x0 = this.__chart__ || d3.scale.linear()\n\t                .domain([0, Infinity])\n\t                .range(x1.range());\n\t\n\t            // Stash the new scale.\n\t            this.__chart__ = x1;\n\t\n\t            var rangeMin = d3.min(rangez), //rangez[2]\n\t                rangeMax = d3.max(rangez), //rangez[0]\n\t                rangeAvg = rangez[1];\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap.nv-bullet').data([d]);\n\t            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bullet');\n\t            var gEnter = wrapEnter.append('g');\n\t            var g = wrap.select('g');\n\t\n\t            for(var i=0,il=rangez.length; i<il; i++){\n\t                var rangeClassNames = 'nv-range nv-range'+i;\n\t                if(i <= 2){\n\t                    rangeClassNames = rangeClassNames + ' nv-range'+legacyRangeClassNames[i];\n\t                }\n\t                gEnter.append('rect').attr('class', rangeClassNames);\n\t            }\n\t\n\t            gEnter.append('rect').attr('class', 'nv-measure');\n\t\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n\t                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n\t            var xp0 = function(d) { return d < 0 ? x0(d) : x0(0) },\n\t                xp1 = function(d) { return d < 0 ? x1(d) : x1(0) };\n\t\n\t            for(var i=0,il=rangez.length; i<il; i++){\n\t                var range = rangez[i];\n\t                g.select('rect.nv-range'+i)\n\t                    .datum(range)\n\t                    .attr('height', availableHeight)\n\t                    .transition()\n\t                    .duration(duration)\n\t                    .attr('width', w1(range))\n\t                    .attr('x', xp1(range))\n\t            }\n\t\n\t            g.select('rect.nv-measure')\n\t                .style('fill', color)\n\t                .attr('height', availableHeight / 3)\n\t                .attr('y', availableHeight / 3)\n\t                .on('mouseover', function() {\n\t                    dispatch.elementMouseover({\n\t                        value: measurez[0],\n\t                        label: measureLabelz[0] || 'Current',\n\t                        color: d3.select(this).style(\"fill\")\n\t                    })\n\t                })\n\t                .on('mousemove', function() {\n\t                    dispatch.elementMousemove({\n\t                        value: measurez[0],\n\t                        label: measureLabelz[0] || 'Current',\n\t                        color: d3.select(this).style(\"fill\")\n\t                    })\n\t                })\n\t                .on('mouseout', function() {\n\t                    dispatch.elementMouseout({\n\t                        value: measurez[0],\n\t                        label: measureLabelz[0] || 'Current',\n\t                        color: d3.select(this).style(\"fill\")\n\t                    })\n\t                })\n\t                .transition()\n\t                .duration(duration)\n\t                .attr('width', measurez < 0 ?\n\t                    x1(0) - x1(measurez[0])\n\t                    : x1(measurez[0]) - x1(0))\n\t                .attr('x', xp1(measurez));\n\t\n\t            var h3 =  availableHeight / 6;\n\t\n\t            var markerData = markerz.map( function(marker, index) {\n\t                return {value: marker, label: markerLabelz[index]}\n\t            });\n\t            gEnter\n\t              .selectAll(\"path.nv-markerTriangle\")\n\t              .data(markerData)\n\t              .enter()\n\t              .append('path')\n\t              .attr('class', 'nv-markerTriangle')\n\t              .attr('d', 'M0,' + h3 + 'L' + h3 + ',' + (-h3) + ' ' + (-h3) + ',' + (-h3) + 'Z')\n\t              .on('mouseover', function(d) {\n\t                dispatch.elementMouseover({\n\t                  value: d.value,\n\t                  label: d.label || 'Previous',\n\t                  color: d3.select(this).style(\"fill\"),\n\t                  pos: [x1(d.value), availableHeight/2]\n\t                })\n\t\n\t              })\n\t              .on('mousemove', function(d) {\n\t                  dispatch.elementMousemove({\n\t                      value: d.value,\n\t                      label: d.label || 'Previous',\n\t                      color: d3.select(this).style(\"fill\")\n\t                  })\n\t              })\n\t              .on('mouseout', function(d, i) {\n\t                  dispatch.elementMouseout({\n\t                      value: d.value,\n\t                      label: d.label || 'Previous',\n\t                      color: d3.select(this).style(\"fill\")\n\t                  })\n\t              });\n\t\n\t            g.selectAll(\"path.nv-markerTriangle\")\n\t              .data(markerData)\n\t              .transition()\n\t              .duration(duration)\n\t              .attr('transform', function(d) { return 'translate(' + x1(d.value) + ',' + (availableHeight / 2) + ')' });\n\t\n\t            var markerLinesData = markerLinez.map( function(marker, index) {\n\t                return {value: marker, label: markerLineLabelz[index]}\n\t            });\n\t            gEnter\n\t              .selectAll(\"line.nv-markerLine\")\n\t              .data(markerLinesData)\n\t              .enter()\n\t              .append('line')\n\t              .attr('cursor', '')\n\t              .attr('class', 'nv-markerLine')\n\t              .attr('x1', function(d) { return x1(d.value) })\n\t              .attr('y1', '2')\n\t              .attr('x2', function(d) { return x1(d.value) })\n\t              .attr('y2', availableHeight - 2)\n\t              .on('mouseover', function(d) {\n\t                dispatch.elementMouseover({\n\t                  value: d.value,\n\t                  label: d.label || 'Previous',\n\t                  color: d3.select(this).style(\"fill\"),\n\t                  pos: [x1(d.value), availableHeight/2]\n\t                })\n\t\n\t              })\n\t              .on('mousemove', function(d) {\n\t                  dispatch.elementMousemove({\n\t                      value: d.value,\n\t                      label: d.label || 'Previous',\n\t                      color: d3.select(this).style(\"fill\")\n\t                  })\n\t              })\n\t              .on('mouseout', function(d, i) {\n\t                  dispatch.elementMouseout({\n\t                      value: d.value,\n\t                      label: d.label || 'Previous',\n\t                      color: d3.select(this).style(\"fill\")\n\t                  })\n\t              });\n\t\n\t            g.selectAll(\"line.nv-markerLine\")\n\t              .data(markerLinesData)\n\t              .transition()\n\t              .duration(duration)\n\t              .attr('x1', function(d) { return x1(d.value) })\n\t              .attr('x2', function(d) { return x1(d.value) });\n\t\n\t            wrap.selectAll('.nv-range')\n\t                .on('mouseover', function(d,i) {\n\t                    var label = rangeLabelz[i] || defaultRangeLabels[i];\n\t                    dispatch.elementMouseover({\n\t                        value: d,\n\t                        label: label,\n\t                        color: d3.select(this).style(\"fill\")\n\t                    })\n\t                })\n\t                .on('mousemove', function() {\n\t                    dispatch.elementMousemove({\n\t                        value: measurez[0],\n\t                        label: measureLabelz[0] || 'Previous',\n\t                        color: d3.select(this).style(\"fill\")\n\t                    })\n\t                })\n\t                .on('mouseout', function(d,i) {\n\t                    var label = rangeLabelz[i] || defaultRangeLabels[i];\n\t                    dispatch.elementMouseout({\n\t                        value: d,\n\t                        label: label,\n\t                        color: d3.select(this).style(\"fill\")\n\t                    })\n\t                });\n\t        });\n\t\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    chart.dispatch = dispatch;\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)\n\t        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)\n\t        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)\n\t        forceX:      {get: function(){return forceX;}, set: function(_){forceX=_;}},\n\t        width:    {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:    {get: function(){return height;}, set: function(_){height=_;}},\n\t        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},\n\t        duration:    {get: function(){return duration;}, set: function(_){duration=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom\n\t            orient = _;\n\t            reverse = orient == 'right' || orient == 'bottom';\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t        }}\n\t    });\n\t\n\t    nv.utils.initOptions(chart);\n\t    return chart;\n\t};\n\t\n\t\n\t\n\t// Chart design based on the recommendations of Stephen Few. Implementation\n\t// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n\t// http://projects.instantcognition.com/protovis/bulletchart/\n\tnv.models.bulletChart = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var bullet = nv.models.bullet();\n\t    var tooltip = nv.models.tooltip();\n\t\n\t    var orient = 'left' // TODO top & bottom\n\t        , reverse = false\n\t        , margin = {top: 5, right: 40, bottom: 20, left: 120}\n\t        , ranges = function(d) { return d.ranges }\n\t        , markers = function(d) { return d.markers ? d.markers : [] }\n\t        , measures = function(d) { return d.measures }\n\t        , width = null\n\t        , height = 55\n\t        , tickFormat = null\n\t        , ticks = null\n\t        , noData = null\n\t        , dispatch = d3.dispatch()\n\t        ;\n\t\n\t    tooltip\n\t        .duration(0)\n\t        .headerEnabled(false);\n\t\n\t    function chart(selection) {\n\t        selection.each(function(d, i) {\n\t            var container = d3.select(this);\n\t            nv.utils.initSVG(container);\n\t\n\t            var availableWidth = nv.utils.availableWidth(width, container, margin),\n\t                availableHeight = height - margin.top - margin.bottom,\n\t                that = this;\n\t\n\t            chart.update = function() { chart(selection) };\n\t            chart.container = this;\n\t\n\t            // Display No Data message if there's nothing to show.\n\t            if (!d || !ranges.call(this, d, i)) {\n\t                nv.utils.noData(chart, container)\n\t                return chart;\n\t            } else {\n\t                container.selectAll('.nv-noData').remove();\n\t            }\n\t\n\t            var rangez = ranges.call(this, d, i).slice().sort(d3.descending),\n\t                markerz = markers.call(this, d, i).slice().sort(d3.descending),\n\t                measurez = measures.call(this, d, i).slice().sort(d3.descending);\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap.nv-bulletChart').data([d]);\n\t            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bulletChart');\n\t            var gEnter = wrapEnter.append('g');\n\t            var g = wrap.select('g');\n\t\n\t            gEnter.append('g').attr('class', 'nv-bulletWrap');\n\t            gEnter.append('g').attr('class', 'nv-titles');\n\t\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            // Compute the new x-scale.\n\t            var x1 = d3.scale.linear()\n\t                .domain([0, Math.max(rangez[0], (markerz[0] || 0), measurez[0])])  // TODO: need to allow forceX and forceY, and xDomain, yDomain\n\t                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\t\n\t            // Retrieve the old x-scale, if this is an update.\n\t            var x0 = this.__chart__ || d3.scale.linear()\n\t                .domain([0, Infinity])\n\t                .range(x1.range());\n\t\n\t            // Stash the new scale.\n\t            this.__chart__ = x1;\n\t\n\t            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n\t                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n\t\n\t            var title = gEnter.select('.nv-titles').append('g')\n\t                .attr('text-anchor', 'end')\n\t                .attr('transform', 'translate(-6,' + (height - margin.top - margin.bottom) / 2 + ')');\n\t            title.append('text')\n\t                .attr('class', 'nv-title')\n\t                .text(function(d) { return d.title; });\n\t\n\t            title.append('text')\n\t                .attr('class', 'nv-subtitle')\n\t                .attr('dy', '1em')\n\t                .text(function(d) { return d.subtitle; });\n\t\n\t            bullet\n\t                .width(availableWidth)\n\t                .height(availableHeight);\n\t\n\t            var bulletWrap = g.select('.nv-bulletWrap');\n\t            d3.transition(bulletWrap).call(bullet);\n\t\n\t            // Compute the tick format.\n\t            var format = tickFormat || x1.tickFormat( availableWidth / 100 );\n\t\n\t            // Update the tick groups.\n\t            var tick = g.selectAll('g.nv-tick')\n\t                .data(x1.ticks( ticks ? ticks : (availableWidth / 50) ), function(d) {\n\t                    return this.textContent || format(d);\n\t                });\n\t\n\t            // Initialize the ticks with the old scale, x0.\n\t            var tickEnter = tick.enter().append('g')\n\t                .attr('class', 'nv-tick')\n\t                .attr('transform', function(d) { return 'translate(' + x0(d) + ',0)' })\n\t                .style('opacity', 1e-6);\n\t\n\t            tickEnter.append('line')\n\t                .attr('y1', availableHeight)\n\t                .attr('y2', availableHeight * 7 / 6);\n\t\n\t            tickEnter.append('text')\n\t                .attr('text-anchor', 'middle')\n\t                .attr('dy', '1em')\n\t                .attr('y', availableHeight * 7 / 6)\n\t                .text(format);\n\t\n\t            // Transition the updating ticks to the new scale, x1.\n\t            var tickUpdate = d3.transition(tick)\n\t                .transition()\n\t                .duration(bullet.duration())\n\t                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n\t                .style('opacity', 1);\n\t\n\t            tickUpdate.select('line')\n\t                .attr('y1', availableHeight)\n\t                .attr('y2', availableHeight * 7 / 6);\n\t\n\t            tickUpdate.select('text')\n\t                .attr('y', availableHeight * 7 / 6);\n\t\n\t            // Transition the exiting ticks to the new scale, x1.\n\t            d3.transition(tick.exit())\n\t                .transition()\n\t                .duration(bullet.duration())\n\t                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n\t                .style('opacity', 1e-6)\n\t                .remove();\n\t        });\n\t\n\t        d3.timer.flush();\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Event Handling/Dispatching (out of chart's scope)\n\t    //------------------------------------------------------------\n\t\n\t    bullet.dispatch.on('elementMouseover.tooltip', function(evt) {\n\t        evt['series'] = {\n\t            key: evt.label,\n\t            value: evt.value,\n\t            color: evt.color\n\t        };\n\t        tooltip.data(evt).hidden(false);\n\t    });\n\t\n\t    bullet.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t        tooltip.hidden(true);\n\t    });\n\t\n\t    bullet.dispatch.on('elementMousemove.tooltip', function(evt) {\n\t        tooltip();\n\t    });\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    chart.bullet = bullet;\n\t    chart.dispatch = dispatch;\n\t    chart.tooltip = tooltip;\n\t\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)\n\t        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)\n\t        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)\n\t        width:    {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:    {get: function(){return height;}, set: function(_){height=_;}},\n\t        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},\n\t        ticks:    {get: function(){return ticks;}, set: function(_){ticks=_;}},\n\t        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom\n\t            orient = _;\n\t            reverse = orient == 'right' || orient == 'bottom';\n\t        }}\n\t    });\n\t\n\t    nv.utils.inheritOptions(chart, bullet);\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t};\n\t\n\t\n\t\n\tnv.models.candlestickBar = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t        , width = null\n\t        , height = null\n\t        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n\t        , container\n\t        , x = d3.scale.linear()\n\t        , y = d3.scale.linear()\n\t        , getX = function(d) { return d.x }\n\t        , getY = function(d) { return d.y }\n\t        , getOpen = function(d) { return d.open }\n\t        , getClose = function(d) { return d.close }\n\t        , getHigh = function(d) { return d.high }\n\t        , getLow = function(d) { return d.low }\n\t        , forceX = []\n\t        , forceY = []\n\t        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n\t        , clipEdge = true\n\t        , color = nv.utils.defaultColor()\n\t        , interactive = false\n\t        , xDomain\n\t        , yDomain\n\t        , xRange\n\t        , yRange\n\t        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')\n\t        ;\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    function chart(selection) {\n\t        selection.each(function(data) {\n\t            container = d3.select(this);\n\t            var availableWidth = nv.utils.availableWidth(width, container, margin),\n\t                availableHeight = nv.utils.availableHeight(height, container, margin);\n\t\n\t            nv.utils.initSVG(container);\n\t\n\t            // Width of the candlestick bars.\n\t            var barWidth = (availableWidth / data[0].values.length) * .45;\n\t\n\t            // Setup Scales\n\t            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\t\n\t            if (padData)\n\t                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n\t            else\n\t                x.range(xRange || [5 + barWidth / 2, availableWidth - barWidth / 2 - 5]);\n\t\n\t            y.domain(yDomain || [\n\t                    d3.min(data[0].values.map(getLow).concat(forceY)),\n\t                    d3.max(data[0].values.map(getHigh).concat(forceY))\n\t                ]\n\t            ).range(yRange || [availableHeight, 0]);\n\t\n\t            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n\t            if (x.domain()[0] === x.domain()[1])\n\t                x.domain()[0] ?\n\t                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n\t                    : x.domain([-1,1]);\n\t\n\t            if (y.domain()[0] === y.domain()[1])\n\t                y.domain()[0] ?\n\t                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n\t                    : y.domain([-1,1]);\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-candlestickBar').data([data[0].values]);\n\t            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-candlestickBar');\n\t            var defsEnter = wrapEnter.append('defs');\n\t            var gEnter = wrapEnter.append('g');\n\t            var g = wrap.select('g');\n\t\n\t            gEnter.append('g').attr('class', 'nv-ticks');\n\t\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            container\n\t                .on('click', function(d,i) {\n\t                    dispatch.chartClick({\n\t                        data: d,\n\t                        index: i,\n\t                        pos: d3.event,\n\t                        id: id\n\t                    });\n\t                });\n\t\n\t            defsEnter.append('clipPath')\n\t                .attr('id', 'nv-chart-clip-path-' + id)\n\t                .append('rect');\n\t\n\t            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n\t                .attr('width', availableWidth)\n\t                .attr('height', availableHeight);\n\t\n\t            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\t\n\t            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')\n\t                .data(function(d) { return d });\n\t            ticks.exit().remove();\n\t\n\t            var tickGroups = ticks.enter().append('g');\n\t\n\t            // The colors are currently controlled by CSS.\n\t            ticks\n\t                .attr('class', function(d, i, j) { return (getOpen(d, i) > getClose(d, i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i});\n\t\n\t            var lines = tickGroups.append('line')\n\t                .attr('class', 'nv-candlestick-lines')\n\t                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })\n\t                .attr('x1', 0)\n\t                .attr('y1', function(d, i) { return y(getHigh(d, i)); })\n\t                .attr('x2', 0)\n\t                .attr('y2', function(d, i) { return y(getLow(d, i)); });\n\t\n\t            var rects = tickGroups.append('rect')\n\t                .attr('class', 'nv-candlestick-rects nv-bars')\n\t                .attr('transform', function(d, i) {\n\t                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','\n\t                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))\n\t                    + ')';\n\t                })\n\t                .attr('x', 0)\n\t                .attr('y', 0)\n\t                .attr('width', barWidth)\n\t                .attr('height', function(d, i) {\n\t                    var open = getOpen(d, i);\n\t                    var close = getClose(d, i);\n\t                    return open > close ? y(close) - y(open) : y(open) - y(close);\n\t                });\n\t\n\t            ticks.select('.nv-candlestick-lines').transition()\n\t                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })\n\t                .attr('x1', 0)\n\t                .attr('y1', function(d, i) { return y(getHigh(d, i)); })\n\t                .attr('x2', 0)\n\t                .attr('y2', function(d, i) { return y(getLow(d, i)); });\n\t\n\t            ticks.select('.nv-candlestick-rects').transition()\n\t                .attr('transform', function(d, i) {\n\t                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','\n\t                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))\n\t                    + ')';\n\t                })\n\t                .attr('x', 0)\n\t                .attr('y', 0)\n\t                .attr('width', barWidth)\n\t                .attr('height', function(d, i) {\n\t                    var open = getOpen(d, i);\n\t                    var close = getClose(d, i);\n\t                    return open > close ? y(close) - y(open) : y(open) - y(close);\n\t                });\n\t        });\n\t\n\t        return chart;\n\t    }\n\t\n\t\n\t    //Create methods to allow outside functions to highlight a specific bar.\n\t    chart.highlightPoint = function(pointIndex, isHoverOver) {\n\t        chart.clearHighlights();\n\t        container.select(\".nv-candlestickBar .nv-tick-0-\" + pointIndex)\n\t            .classed(\"hover\", isHoverOver)\n\t        ;\n\t    };\n\t\n\t    chart.clearHighlights = function() {\n\t        container.select(\".nv-candlestickBar .nv-tick.hover\")\n\t            .classed(\"hover\", false)\n\t        ;\n\t    };\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    chart.dispatch = dispatch;\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:    {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:   {get: function(){return height;}, set: function(_){height=_;}},\n\t        xScale:   {get: function(){return x;}, set: function(_){x=_;}},\n\t        yScale:   {get: function(){return y;}, set: function(_){y=_;}},\n\t        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n\t        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n\t        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},\n\t        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},\n\t        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},\n\t        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},\n\t        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},\n\t        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n\t        id:       {get: function(){return id;}, set: function(_){id=_;}},\n\t        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\t\n\t        x:     {get: function(){return getX;}, set: function(_){getX=_;}},\n\t        y:     {get: function(){return getY;}, set: function(_){getY=_;}},\n\t        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},\n\t        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},\n\t        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},\n\t        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    != undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  != undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   != undefined ? _.left   : margin.left;\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t        }}\n\t    });\n\t\n\t    nv.utils.initOptions(chart);\n\t    return chart;\n\t};\n\t\n\tnv.models.cumulativeLineChart = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var lines = nv.models.line()\n\t        , xAxis = nv.models.axis()\n\t        , yAxis = nv.models.axis()\n\t        , legend = nv.models.legend()\n\t        , controls = nv.models.legend()\n\t        , interactiveLayer = nv.interactiveGuideline()\n\t        , tooltip = nv.models.tooltip()\n\t        ;\n\t\n\t    var margin = {top: 30, right: 30, bottom: 50, left: 60}\n\t        , marginTop = null\n\t        , color = nv.utils.defaultColor()\n\t        , width = null\n\t        , height = null\n\t        , showLegend = true\n\t        , showXAxis = true\n\t        , showYAxis = true\n\t        , rightAlignYAxis = false\n\t        , showControls = true\n\t        , useInteractiveGuideline = false\n\t        , rescaleY = true\n\t        , x //can be accessed via chart.xScale()\n\t        , y //can be accessed via chart.yScale()\n\t        , id = lines.id()\n\t        , state = nv.utils.state()\n\t        , defaultState = null\n\t        , noData = null\n\t        , average = function(d) { return d.average }\n\t        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n\t        , transitionDuration = 250\n\t        , duration = 250\n\t        , noErrorCheck = false  //if set to TRUE, will bypass an error check in the indexify function.\n\t        ;\n\t\n\t    state.index = 0;\n\t    state.rescaleY = rescaleY;\n\t\n\t    xAxis.orient('bottom').tickPadding(7);\n\t    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');\n\t\n\t    tooltip.valueFormatter(function(d, i) {\n\t        return yAxis.tickFormat()(d, i);\n\t    }).headerFormatter(function(d, i) {\n\t        return xAxis.tickFormat()(d, i);\n\t    });\n\t\n\t    controls.updateState(false);\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var dx = d3.scale.linear()\n\t        , index = {i: 0, x: 0}\n\t        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n\t        ;\n\t\n\t    var stateGetter = function(data) {\n\t        return function(){\n\t            return {\n\t                active: data.map(function(d) { return !d.disabled }),\n\t                index: index.i,\n\t                rescaleY: rescaleY\n\t            };\n\t        }\n\t    };\n\t\n\t    var stateSetter = function(data) {\n\t        return function(state) {\n\t            if (state.index !== undefined)\n\t                index.i = state.index;\n\t            if (state.rescaleY !== undefined)\n\t                rescaleY = state.rescaleY;\n\t            if (state.active !== undefined)\n\t                data.forEach(function(series,i) {\n\t                    series.disabled = !state.active[i];\n\t                });\n\t        }\n\t    };\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        renderWatch.models(lines);\n\t        if (showXAxis) renderWatch.models(xAxis);\n\t        if (showYAxis) renderWatch.models(yAxis);\n\t        selection.each(function(data) {\n\t            var container = d3.select(this);\n\t            nv.utils.initSVG(container);\n\t            container.classed('nv-chart-' + id, true);\n\t            var that = this;\n\t\n\t            var availableWidth = nv.utils.availableWidth(width, container, margin),\n\t                availableHeight = nv.utils.availableHeight(height, container, margin);\n\t\n\t            chart.update = function() {\n\t                if (duration === 0)\n\t                    container.call(chart);\n\t                else\n\t                    container.transition().duration(duration).call(chart)\n\t            };\n\t            chart.container = this;\n\t\n\t            state\n\t                .setter(stateSetter(data), chart.update)\n\t                .getter(stateGetter(data))\n\t                .update();\n\t\n\t            // DEPRECATED set state.disableddisabled\n\t            state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t            if (!defaultState) {\n\t                var key;\n\t                defaultState = {};\n\t                for (key in state) {\n\t                    if (state[key] instanceof Array)\n\t                        defaultState[key] = state[key].slice(0);\n\t                    else\n\t                        defaultState[key] = state[key];\n\t                }\n\t            }\n\t\n\t            var indexDrag = d3.behavior.drag()\n\t                .on('dragstart', dragStart)\n\t                .on('drag', dragMove)\n\t                .on('dragend', dragEnd);\n\t\n\t\n\t            function dragStart(d,i) {\n\t                d3.select(chart.container)\n\t                    .style('cursor', 'ew-resize');\n\t            }\n\t\n\t            function dragMove(d,i) {\n\t                index.x = d3.event.x;\n\t                index.i = Math.round(dx.invert(index.x));\n\t                updateZero();\n\t            }\n\t\n\t            function dragEnd(d,i) {\n\t                d3.select(chart.container)\n\t                    .style('cursor', 'auto');\n\t\n\t                // update state and send stateChange with new index\n\t                state.index = index.i;\n\t                dispatch.stateChange(state);\n\t            }\n\t\n\t            // Display No Data message if there's nothing to show.\n\t            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t                nv.utils.noData(chart, container)\n\t                return chart;\n\t            } else {\n\t                container.selectAll('.nv-noData').remove();\n\t            }\n\t\n\t            // Setup Scales\n\t            x = lines.xScale();\n\t            y = lines.yScale();\n\t\n\t            if (!rescaleY) {\n\t                var seriesDomains = data\n\t                    .filter(function(series) { return !series.disabled })\n\t                    .map(function(series,i) {\n\t                        var initialDomain = d3.extent(series.values, lines.y());\n\t\n\t                        //account for series being disabled when losing 95% or more\n\t                        if (initialDomain[0] < -.95) initialDomain[0] = -.95;\n\t\n\t                        return [\n\t                                (initialDomain[0] - initialDomain[1]) / (1 + initialDomain[1]),\n\t                                (initialDomain[1] - initialDomain[0]) / (1 + initialDomain[0])\n\t                        ];\n\t                    });\n\t\n\t                var completeDomain = [\n\t                    d3.min(seriesDomains, function(d) { return d[0] }),\n\t                    d3.max(seriesDomains, function(d) { return d[1] })\n\t                ];\n\t\n\t                lines.yDomain(completeDomain);\n\t            } else {\n\t                lines.yDomain(null);\n\t            }\n\t\n\t            dx.domain([0, data[0].values.length - 1]) //Assumes all series have same length\n\t                .range([0, availableWidth])\n\t                .clamp(true);\n\t\n\t            var data = indexify(index.i, data);\n\t\n\t            // Setup containers and skeleton of chart\n\t            var interactivePointerEvents = (useInteractiveGuideline) ? \"none\" : \"all\";\n\t            var wrap = container.selectAll('g.nv-wrap.nv-cumulativeLine').data([data]);\n\t            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-cumulativeLine').append('g');\n\t            var g = wrap.select('g');\n\t\n\t            gEnter.append('g').attr('class', 'nv-interactive');\n\t            gEnter.append('g').attr('class', 'nv-x nv-axis').style(\"pointer-events\",\"none\");\n\t            gEnter.append('g').attr('class', 'nv-y nv-axis');\n\t            gEnter.append('g').attr('class', 'nv-background');\n\t            gEnter.append('g').attr('class', 'nv-linesWrap').style(\"pointer-events\",interactivePointerEvents);\n\t            gEnter.append('g').attr('class', 'nv-avgLinesWrap').style(\"pointer-events\",\"none\");\n\t            gEnter.append('g').attr('class', 'nv-legendWrap');\n\t            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\t\n\t            // Legend\n\t            if (!showLegend) {\n\t                g.select('.nv-legendWrap').selectAll('*').remove();\n\t            } else {\n\t                legend.width(availableWidth);\n\t\n\t                g.select('.nv-legendWrap')\n\t                    .datum(data)\n\t                    .call(legend);\n\t\n\t                if (!marginTop && legend.height() !== margin.top) {\n\t                    margin.top = legend.height();\n\t                    availableHeight = nv.utils.availableHeight(height, container, margin);\n\t                }\n\t\n\t                g.select('.nv-legendWrap')\n\t                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t            }\n\t\n\t            // Controls\n\t            if (!showControls) {\n\t                 g.select('.nv-controlsWrap').selectAll('*').remove();\n\t            } else {\n\t                var controlsData = [\n\t                    { key: 'Re-scale y-axis', disabled: !rescaleY }\n\t                ];\n\t\n\t                controls\n\t                    .width(140)\n\t                    .color(['#444', '#444', '#444'])\n\t                    .rightAlign(false)\n\t                    .margin({top: 5, right: 0, bottom: 5, left: 20})\n\t                ;\n\t\n\t                g.select('.nv-controlsWrap')\n\t                    .datum(controlsData)\n\t                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t                    .call(controls);\n\t            }\n\t\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            if (rightAlignYAxis) {\n\t                g.select(\".nv-y.nv-axis\")\n\t                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t            }\n\t\n\t            // Show error if series goes below 100%\n\t            var tempDisabled = data.filter(function(d) { return d.tempDisabled });\n\t\n\t            wrap.select('.tempDisabled').remove(); //clean-up and prevent duplicates\n\t            if (tempDisabled.length) {\n\t                wrap.append('text').attr('class', 'tempDisabled')\n\t                    .attr('x', availableWidth / 2)\n\t                    .attr('y', '-.71em')\n\t                    .style('text-anchor', 'end')\n\t                    .text(tempDisabled.map(function(d) { return d.key }).join(', ') + ' values cannot be calculated for this time period.');\n\t            }\n\t\n\t            //Set up interactive layer\n\t            if (useInteractiveGuideline) {\n\t                interactiveLayer\n\t                    .width(availableWidth)\n\t                    .height(availableHeight)\n\t                    .margin({left:margin.left,top:margin.top})\n\t                    .svgContainer(container)\n\t                    .xScale(x);\n\t                wrap.select(\".nv-interactive\").call(interactiveLayer);\n\t            }\n\t\n\t            gEnter.select('.nv-background')\n\t                .append('rect');\n\t\n\t            g.select('.nv-background rect')\n\t                .attr('width', availableWidth)\n\t                .attr('height', availableHeight);\n\t\n\t            lines\n\t                //.x(function(d) { return d.x })\n\t                .y(function(d) { return d.display.y })\n\t                .width(availableWidth)\n\t                .height(availableHeight)\n\t                .color(data.map(function(d,i) {\n\t                    return d.color || color(d, i);\n\t                }).filter(function(d,i) { return !data[i].disabled && !data[i].tempDisabled; }));\n\t\n\t            var linesWrap = g.select('.nv-linesWrap')\n\t                .datum(data.filter(function(d) { return  !d.disabled && !d.tempDisabled }));\n\t\n\t            linesWrap.call(lines);\n\t\n\t            //Store a series index number in the data array.\n\t            data.forEach(function(d,i) {\n\t                d.seriesIndex = i;\n\t            });\n\t\n\t            var avgLineData = data.filter(function(d) {\n\t                return !d.disabled && !!average(d);\n\t            });\n\t\n\t            var avgLines = g.select(\".nv-avgLinesWrap\").selectAll(\"line\")\n\t                .data(avgLineData, function(d) { return d.key; });\n\t\n\t            var getAvgLineY = function(d) {\n\t                //If average lines go off the svg element, clamp them to the svg bounds.\n\t                var yVal = y(average(d));\n\t                if (yVal < 0) return 0;\n\t                if (yVal > availableHeight) return availableHeight;\n\t                return yVal;\n\t            };\n\t\n\t            avgLines.enter()\n\t                .append('line')\n\t                .style('stroke-width',2)\n\t                .style('stroke-dasharray','10,10')\n\t                .style('stroke',function (d,i) {\n\t                    return lines.color()(d,d.seriesIndex);\n\t                })\n\t                .attr('x1',0)\n\t                .attr('x2',availableWidth)\n\t                .attr('y1', getAvgLineY)\n\t                .attr('y2', getAvgLineY);\n\t\n\t            avgLines\n\t                .style('stroke-opacity',function(d){\n\t                    //If average lines go offscreen, make them transparent\n\t                    var yVal = y(average(d));\n\t                    if (yVal < 0 || yVal > availableHeight) return 0;\n\t                    return 1;\n\t                })\n\t                .attr('x1',0)\n\t                .attr('x2',availableWidth)\n\t                .attr('y1', getAvgLineY)\n\t                .attr('y2', getAvgLineY);\n\t\n\t            avgLines.exit().remove();\n\t\n\t            //Create index line\n\t            var indexLine = linesWrap.selectAll('.nv-indexLine')\n\t                .data([index]);\n\t            indexLine.enter().append('rect').attr('class', 'nv-indexLine')\n\t                .attr('width', 3)\n\t                .attr('x', -2)\n\t                .attr('fill', 'red')\n\t                .attr('fill-opacity', .5)\n\t                .style(\"pointer-events\",\"all\")\n\t                .call(indexDrag);\n\t\n\t            indexLine\n\t                .attr('transform', function(d) { return 'translate(' + dx(d.i) + ',0)' })\n\t                .attr('height', availableHeight);\n\t\n\t            // Setup Axes\n\t            if (showXAxis) {\n\t                xAxis\n\t                    .scale(x)\n\t                    ._ticks( nv.utils.calcTicksX(availableWidth/70, data) )\n\t                    .tickSize(-availableHeight, 0);\n\t\n\t                g.select('.nv-x.nv-axis')\n\t                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n\t                g.select('.nv-x.nv-axis')\n\t                    .call(xAxis);\n\t            }\n\t\n\t            if (showYAxis) {\n\t                yAxis\n\t                    .scale(y)\n\t                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n\t                    .tickSize( -availableWidth, 0);\n\t\n\t                g.select('.nv-y.nv-axis')\n\t                    .call(yAxis);\n\t            }\n\t\n\t            //============================================================\n\t            // Event Handling/Dispatching (in chart's scope)\n\t            //------------------------------------------------------------\n\t\n\t            function updateZero() {\n\t                indexLine\n\t                    .data([index]);\n\t\n\t                //When dragging the index line, turn off line transitions.\n\t                // Then turn them back on when done dragging.\n\t                var oldDuration = chart.duration();\n\t                chart.duration(0);\n\t                chart.update();\n\t                chart.duration(oldDuration);\n\t            }\n\t\n\t            g.select('.nv-background rect')\n\t                .on('click', function() {\n\t                    index.x = d3.mouse(this)[0];\n\t                    index.i = Math.round(dx.invert(index.x));\n\t\n\t                    // update state and send stateChange with new index\n\t                    state.index = index.i;\n\t                    dispatch.stateChange(state);\n\t\n\t                    updateZero();\n\t                });\n\t\n\t            lines.dispatch.on('elementClick', function(e) {\n\t                index.i = e.pointIndex;\n\t                index.x = dx(index.i);\n\t\n\t                // update state and send stateChange with new index\n\t                state.index = index.i;\n\t                dispatch.stateChange(state);\n\t\n\t                updateZero();\n\t            });\n\t\n\t            controls.dispatch.on('legendClick', function(d,i) {\n\t                d.disabled = !d.disabled;\n\t                rescaleY = !d.disabled;\n\t\n\t                state.rescaleY = rescaleY;\n\t                dispatch.stateChange(state);\n\t                chart.update();\n\t            });\n\t\n\t            legend.dispatch.on('stateChange', function(newState) {\n\t                for (var key in newState)\n\t                    state[key] = newState[key];\n\t                dispatch.stateChange(state);\n\t                chart.update();\n\t            });\n\t\n\t            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n\t                lines.clearHighlights();\n\t                var singlePoint, pointIndex, pointXLocation, allData = [];\n\t\n\t                data\n\t                    .filter(function(series, i) {\n\t                        series.seriesIndex = i;\n\t                        return !series.disabled;\n\t                    })\n\t                    .forEach(function(series,i) {\n\t                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n\t                        lines.highlightPoint(i, pointIndex, true);\n\t                        var point = series.values[pointIndex];\n\t                        if (typeof point === 'undefined') return;\n\t                        if (typeof singlePoint === 'undefined') singlePoint = point;\n\t                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n\t                        allData.push({\n\t                            key: series.key,\n\t                            value: chart.y()(point, pointIndex),\n\t                            color: color(series,series.seriesIndex)\n\t                        });\n\t                    });\n\t\n\t                //Highlight the tooltip entry based on which point the mouse is closest to.\n\t                if (allData.length > 2) {\n\t                    var yValue = chart.yScale().invert(e.mouseY);\n\t                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n\t                    var threshold = 0.03 * domainExtent;\n\t                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value}),yValue,threshold);\n\t                    if (indexToHighlight !== null)\n\t                        allData[indexToHighlight].highlight = true;\n\t                }\n\t\n\t                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex), pointIndex);\n\t                interactiveLayer.tooltip\n\t                    .valueFormatter(function(d,i) {\n\t                        return yAxis.tickFormat()(d);\n\t                    })\n\t                    .data(\n\t                    {\n\t                        value: xValue,\n\t                        series: allData\n\t                    }\n\t                )();\n\t\n\t                interactiveLayer.renderGuideLine(pointXLocation);\n\t            });\n\t\n\t            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n\t                lines.clearHighlights();\n\t            });\n\t\n\t            // Update chart from a state object passed to event handler\n\t            dispatch.on('changeState', function(e) {\n\t                if (typeof e.disabled !== 'undefined') {\n\t                    data.forEach(function(series,i) {\n\t                        series.disabled = e.disabled[i];\n\t                    });\n\t\n\t                    state.disabled = e.disabled;\n\t                }\n\t\n\t                if (typeof e.index !== 'undefined') {\n\t                    index.i = e.index;\n\t                    index.x = dx(index.i);\n\t\n\t                    state.index = e.index;\n\t\n\t                    indexLine\n\t                        .data([index]);\n\t                }\n\t\n\t                if (typeof e.rescaleY !== 'undefined') {\n\t                    rescaleY = e.rescaleY;\n\t                }\n\t\n\t                chart.update();\n\t            });\n\t\n\t        });\n\t\n\t        renderWatch.renderEnd('cumulativeLineChart immediate');\n\t\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Event Handling/Dispatching (out of chart's scope)\n\t    //------------------------------------------------------------\n\t\n\t    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n\t        var point = {\n\t            x: chart.x()(evt.point),\n\t            y: chart.y()(evt.point),\n\t            color: evt.point.color\n\t        };\n\t        evt.point = point;\n\t        tooltip.data(evt).hidden(false);\n\t    });\n\t\n\t    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t        tooltip.hidden(true)\n\t    });\n\t\n\t    //============================================================\n\t    // Functions\n\t    //------------------------------------------------------------\n\t\n\t    var indexifyYGetter = null;\n\t    /* Normalize the data according to an index point. */\n\t    function indexify(idx, data) {\n\t        if (!indexifyYGetter) indexifyYGetter = lines.y();\n\t        return data.map(function(line, i) {\n\t            if (!line.values) {\n\t                return line;\n\t            }\n\t            var indexValue = line.values[idx];\n\t            if (indexValue == null) {\n\t                return line;\n\t            }\n\t            var v = indexifyYGetter(indexValue, idx);\n\t\n\t            //TODO: implement check below, and disable series if series loses 100% or more cause divide by 0 issue\n\t            if (v < -.95 && !noErrorCheck) {\n\t                //if a series loses more than 100%, calculations fail.. anything close can cause major distortion (but is mathematically correct till it hits 100)\n\t\n\t                line.tempDisabled = true;\n\t                return line;\n\t            }\n\t\n\t            line.tempDisabled = false;\n\t\n\t            line.values = line.values.map(function(point, pointIndex) {\n\t                point.display = {'y': (indexifyYGetter(point, pointIndex) - v) / (1 + v) };\n\t                return point;\n\t            });\n\t\n\t            return line;\n\t        })\n\t    }\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    // expose chart's sub-components\n\t    chart.dispatch = dispatch;\n\t    chart.lines = lines;\n\t    chart.legend = legend;\n\t    chart.controls = controls;\n\t    chart.xAxis = xAxis;\n\t    chart.yAxis = yAxis;\n\t    chart.interactiveLayer = interactiveLayer;\n\t    chart.state = state;\n\t    chart.tooltip = tooltip;\n\t\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:      {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\t        rescaleY:     {get: function(){return rescaleY;}, set: function(_){rescaleY=_;}},\n\t        showControls:     {get: function(){return showControls;}, set: function(_){showControls=_;}},\n\t        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n\t        average: {get: function(){return average;}, set: function(_){average=_;}},\n\t        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n\t        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\t        showXAxis:    {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n\t        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n\t        noErrorCheck:    {get: function(){return noErrorCheck;}, set: function(_){noErrorCheck=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            if (_.top !== undefined) {\n\t                margin.top = _.top;\n\t                marginTop = _.top;\n\t            }\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t            legend.color(color);\n\t        }},\n\t        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n\t            useInteractiveGuideline = _;\n\t            if (_ === true) {\n\t                chart.interactive(false);\n\t                chart.useVoronoi(false);\n\t            }\n\t        }},\n\t        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n\t            rightAlignYAxis = _;\n\t            yAxis.orient( (_) ? 'right' : 'left');\n\t        }},\n\t        duration:    {get: function(){return duration;}, set: function(_){\n\t            duration = _;\n\t            lines.duration(duration);\n\t            xAxis.duration(duration);\n\t            yAxis.duration(duration);\n\t            renderWatch.reset(duration);\n\t        }}\n\t    });\n\t\n\t    nv.utils.inheritOptions(chart, lines);\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t};\n\t//TODO: consider deprecating by adding necessary features to multiBar model\n\tnv.models.discreteBar = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t        , width = 960\n\t        , height = 500\n\t        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n\t        , container\n\t        , x = d3.scale.ordinal()\n\t        , y = d3.scale.linear()\n\t        , getX = function(d) { return d.x }\n\t        , getY = function(d) { return d.y }\n\t        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n\t        , color = nv.utils.defaultColor()\n\t        , showValues = false\n\t        , valueFormat = d3.format(',.2f')\n\t        , xDomain\n\t        , yDomain\n\t        , xRange\n\t        , yRange\n\t        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n\t        , rectClass = 'discreteBar'\n\t        , duration = 250\n\t        ;\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var x0, y0;\n\t    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        selection.each(function(data) {\n\t            var availableWidth = width - margin.left - margin.right,\n\t                availableHeight = height - margin.top - margin.bottom;\n\t\n\t            container = d3.select(this);\n\t            nv.utils.initSVG(container);\n\t\n\t            //add series index to each data point for reference\n\t            data.forEach(function(series, i) {\n\t                series.values.forEach(function(point) {\n\t                    point.series = i;\n\t                });\n\t            });\n\t\n\t            // Setup Scales\n\t            // remap and flatten the data for use in calculating the scales' domains\n\t            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n\t                data.map(function(d) {\n\t                    return d.values.map(function(d,i) {\n\t                        return { x: getX(d,i), y: getY(d,i), y0: d.y0 }\n\t                    })\n\t                });\n\t\n\t            x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n\t                .rangeBands(xRange || [0, availableWidth], .1);\n\t            y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y }).concat(forceY)));\n\t\n\t            // If showValues, pad the Y axis range to account for label height\n\t            if (showValues) y.range(yRange || [availableHeight - (y.domain()[0] < 0 ? 12 : 0), y.domain()[1] > 0 ? 12 : 0]);\n\t            else y.range(yRange || [availableHeight, 0]);\n\t\n\t            //store old scales if they exist\n\t            x0 = x0 || x;\n\t            y0 = y0 || y.copy().range([y(0),y(0)]);\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap.nv-discretebar').data([data]);\n\t            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discretebar');\n\t            var gEnter = wrapEnter.append('g');\n\t            var g = wrap.select('g');\n\t\n\t            gEnter.append('g').attr('class', 'nv-groups');\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            //TODO: by definition, the discrete bar should not have multiple groups, will modify/remove later\n\t            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n\t                .data(function(d) { return d }, function(d) { return d.key });\n\t            groups.enter().append('g')\n\t                .style('stroke-opacity', 1e-6)\n\t                .style('fill-opacity', 1e-6);\n\t            groups.exit()\n\t                .watchTransition(renderWatch, 'discreteBar: exit groups')\n\t                .style('stroke-opacity', 1e-6)\n\t                .style('fill-opacity', 1e-6)\n\t                .remove();\n\t            groups\n\t                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n\t                .classed('hover', function(d) { return d.hover });\n\t            groups\n\t                .watchTransition(renderWatch, 'discreteBar: groups')\n\t                .style('stroke-opacity', 1)\n\t                .style('fill-opacity', .75);\n\t\n\t            var bars = groups.selectAll('g.nv-bar')\n\t                .data(function(d) { return d.values });\n\t            bars.exit().remove();\n\t\n\t            var barsEnter = bars.enter().append('g')\n\t                .attr('transform', function(d,i,j) {\n\t                    return 'translate(' + (x(getX(d,i)) + x.rangeBand() * .05 ) + ', ' + y(0) + ')'\n\t                })\n\t                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n\t                    d3.select(this).classed('hover', true);\n\t                    dispatch.elementMouseover({\n\t                        data: d,\n\t                        index: i,\n\t                        color: d3.select(this).style(\"fill\")\n\t                    });\n\t                })\n\t                .on('mouseout', function(d,i) {\n\t                    d3.select(this).classed('hover', false);\n\t                    dispatch.elementMouseout({\n\t                        data: d,\n\t                        index: i,\n\t                        color: d3.select(this).style(\"fill\")\n\t                    });\n\t                })\n\t                .on('mousemove', function(d,i) {\n\t                    dispatch.elementMousemove({\n\t                        data: d,\n\t                        index: i,\n\t                        color: d3.select(this).style(\"fill\")\n\t                    });\n\t                })\n\t                .on('click', function(d,i) {\n\t                    var element = this;\n\t                    dispatch.elementClick({\n\t                        data: d,\n\t                        index: i,\n\t                        color: d3.select(this).style(\"fill\"),\n\t                        event: d3.event,\n\t                        element: element\n\t                    });\n\t                    d3.event.stopPropagation();\n\t                })\n\t                .on('dblclick', function(d,i) {\n\t                    dispatch.elementDblClick({\n\t                        data: d,\n\t                        index: i,\n\t                        color: d3.select(this).style(\"fill\")\n\t                    });\n\t                    d3.event.stopPropagation();\n\t                });\n\t\n\t            barsEnter.append('rect')\n\t                .attr('height', 0)\n\t                .attr('width', x.rangeBand() * .9 / data.length )\n\t\n\t            if (showValues) {\n\t                barsEnter.append('text')\n\t                    .attr('text-anchor', 'middle')\n\t                ;\n\t\n\t                bars.select('text')\n\t                    .text(function(d,i) { return valueFormat(getY(d,i)) })\n\t                    .watchTransition(renderWatch, 'discreteBar: bars text')\n\t                    .attr('x', x.rangeBand() * .9 / 2)\n\t                    .attr('y', function(d,i) { return getY(d,i) < 0 ? y(getY(d,i)) - y(0) + 12 : -4 })\n\t\n\t                ;\n\t            } else {\n\t                bars.selectAll('text').remove();\n\t            }\n\t\n\t            bars\n\t                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive' })\n\t                .style('fill', function(d,i) { return d.color || color(d,i) })\n\t                .style('stroke', function(d,i) { return d.color || color(d,i) })\n\t                .select('rect')\n\t                .attr('class', rectClass)\n\t                .watchTransition(renderWatch, 'discreteBar: bars rect')\n\t                .attr('width', x.rangeBand() * .9 / data.length);\n\t            bars.watchTransition(renderWatch, 'discreteBar: bars')\n\t                //.delay(function(d,i) { return i * 1200 / data[0].values.length })\n\t                .attr('transform', function(d,i) {\n\t                    var left = x(getX(d,i)) + x.rangeBand() * .05,\n\t                        top = getY(d,i) < 0 ?\n\t                            y(0) :\n\t                                y(0) - y(getY(d,i)) < 1 ?\n\t                            y(0) - 1 : //make 1 px positive bars show up above y=0\n\t                            y(getY(d,i));\n\t\n\t                    return 'translate(' + left + ', ' + top + ')'\n\t                })\n\t                .select('rect')\n\t                .attr('height', function(d,i) {\n\t                    return  Math.max(Math.abs(y(getY(d,i)) - y(0)), 1)\n\t                });\n\t\n\t\n\t            //store old scales for use in transitions on update\n\t            x0 = x.copy();\n\t            y0 = y.copy();\n\t\n\t        });\n\t\n\t        renderWatch.renderEnd('discreteBar immediate');\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    chart.dispatch = dispatch;\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:   {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:  {get: function(){return height;}, set: function(_){height=_;}},\n\t        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n\t        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},\n\t        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n\t        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n\t        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n\t        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n\t        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n\t        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n\t        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n\t        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n\t        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n\t        id:          {get: function(){return id;}, set: function(_){id=_;}},\n\t        rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t        }},\n\t        duration: {get: function(){return duration;}, set: function(_){\n\t            duration = _;\n\t            renderWatch.reset(duration);\n\t        }}\n\t    });\n\t\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t};\n\t\n\tnv.models.discreteBarChart = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var discretebar = nv.models.discreteBar()\n\t        , xAxis = nv.models.axis()\n\t        , yAxis = nv.models.axis()\n\t\t, legend = nv.models.legend()\n\t        , tooltip = nv.models.tooltip()\n\t        ;\n\t\n\t    var margin = {top: 15, right: 10, bottom: 50, left: 60}\n\t        , marginTop = null\n\t        , width = null\n\t        , height = null\n\t        , color = nv.utils.getColor()\n\t\t, showLegend = false\n\t        , showXAxis = true\n\t        , showYAxis = true\n\t        , rightAlignYAxis = false\n\t        , staggerLabels = false\n\t        , wrapLabels = false\n\t        , rotateLabels = 0\n\t        , x\n\t        , y\n\t        , noData = null\n\t        , dispatch = d3.dispatch('beforeUpdate','renderEnd')\n\t        , duration = 250\n\t        ;\n\t\n\t    xAxis\n\t        .orient('bottom')\n\t        .showMaxMin(false)\n\t        .tickFormat(function(d) { return d })\n\t    ;\n\t    yAxis\n\t        .orient((rightAlignYAxis) ? 'right' : 'left')\n\t        .tickFormat(d3.format(',.1f'))\n\t    ;\n\t\n\t    tooltip\n\t        .duration(0)\n\t        .headerEnabled(false)\n\t        .valueFormatter(function(d, i) {\n\t            return yAxis.tickFormat()(d, i);\n\t        })\n\t        .keyFormatter(function(d, i) {\n\t            return xAxis.tickFormat()(d, i);\n\t        });\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        renderWatch.models(discretebar);\n\t        if (showXAxis) renderWatch.models(xAxis);\n\t        if (showYAxis) renderWatch.models(yAxis);\n\t\n\t        selection.each(function(data) {\n\t            var container = d3.select(this),\n\t                that = this;\n\t            nv.utils.initSVG(container);\n\t            var availableWidth = nv.utils.availableWidth(width, container, margin),\n\t                availableHeight = nv.utils.availableHeight(height, container, margin);\n\t\n\t            chart.update = function() {\n\t                dispatch.beforeUpdate();\n\t                container.transition().duration(duration).call(chart);\n\t            };\n\t            chart.container = this;\n\t\n\t            // Display No Data message if there's nothing to show.\n\t            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t                nv.utils.noData(chart, container);\n\t                return chart;\n\t            } else {\n\t                container.selectAll('.nv-noData').remove();\n\t            }\n\t\n\t            // Setup Scales\n\t            x = discretebar.xScale();\n\t            y = discretebar.yScale().clamp(true);\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap.nv-discreteBarWithAxes').data([data]);\n\t            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discreteBarWithAxes').append('g');\n\t            var defsEnter = gEnter.append('defs');\n\t            var g = wrap.select('g');\n\t\n\t            gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t            gEnter.append('g').attr('class', 'nv-y nv-axis')\n\t                .append('g').attr('class', 'nv-zeroLine')\n\t                .append('line');\n\t\n\t            gEnter.append('g').attr('class', 'nv-barsWrap');\n\t\t    gEnter.append('g').attr('class', 'nv-legendWrap');\n\t\n\t            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            // Legend\n\t            if (!showLegend) {\n\t                g.select('.nv-legendWrap').selectAll('*').remove();\n\t            } else {\n\t                legend.width(availableWidth);\n\t\n\t                g.select('.nv-legendWrap')\n\t                    .datum(data)\n\t                    .call(legend);\n\t\n\t                if (!marginTop && legend.height() !== margin.top) {\n\t                    margin.top = legend.height();\n\t                    availableHeight = nv.utils.availableHeight(height, container, margin);\n\t                }\n\t\n\t                wrap.select('.nv-legendWrap')\n\t                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t            }\n\t\n\t            if (rightAlignYAxis) {\n\t                g.select(\".nv-y.nv-axis\")\n\t                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t            }\n\t\n\t            // Main Chart Component(s)\n\t            discretebar\n\t                .width(availableWidth)\n\t                .height(availableHeight);\n\t\n\t            var barsWrap = g.select('.nv-barsWrap')\n\t                .datum(data.filter(function(d) { return !d.disabled }));\n\t\n\t            barsWrap.transition().call(discretebar);\n\t\n\t\n\t            defsEnter.append('clipPath')\n\t                .attr('id', 'nv-x-label-clip-' + discretebar.id())\n\t                .append('rect');\n\t\n\t            g.select('#nv-x-label-clip-' + discretebar.id() + ' rect')\n\t                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))\n\t                .attr('height', 16)\n\t                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));\n\t\n\t            // Setup Axes\n\t            if (showXAxis) {\n\t                xAxis\n\t                    .scale(x)\n\t                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n\t                    .tickSize(-availableHeight, 0);\n\t\n\t                g.select('.nv-x.nv-axis')\n\t                    .attr('transform', 'translate(0,' + (y.range()[0] + ((discretebar.showValues() && y.domain()[0] < 0) ? 16 : 0)) + ')');\n\t                g.select('.nv-x.nv-axis').call(xAxis);\n\t\n\t                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n\t                if (staggerLabels) {\n\t                    xTicks\n\t                        .selectAll('text')\n\t                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 == 0 ? '5' : '17') + ')' })\n\t                }\n\t\n\t                if (rotateLabels) {\n\t                    xTicks\n\t                        .selectAll('.tick text')\n\t                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')\n\t                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');\n\t                }\n\t\n\t                if (wrapLabels) {\n\t                    g.selectAll('.tick text')\n\t                        .call(nv.utils.wrapTicks, chart.xAxis.rangeBand())\n\t                }\n\t            }\n\t\n\t            if (showYAxis) {\n\t                yAxis\n\t                    .scale(y)\n\t                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n\t                    .tickSize( -availableWidth, 0);\n\t\n\t                g.select('.nv-y.nv-axis').call(yAxis);\n\t            }\n\t\n\t            // Zero line\n\t            g.select(\".nv-zeroLine line\")\n\t                .attr(\"x1\",0)\n\t                .attr(\"x2\",(rightAlignYAxis) ? -availableWidth : availableWidth)\n\t                .attr(\"y1\", y(0))\n\t                .attr(\"y2\", y(0))\n\t            ;\n\t        });\n\t\n\t        renderWatch.renderEnd('discreteBar chart immediate');\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Event Handling/Dispatching (out of chart's scope)\n\t    //------------------------------------------------------------\n\t\n\t    discretebar.dispatch.on('elementMouseover.tooltip', function(evt) {\n\t        evt['series'] = {\n\t            key: chart.x()(evt.data),\n\t            value: chart.y()(evt.data),\n\t            color: evt.color\n\t        };\n\t        tooltip.data(evt).hidden(false);\n\t    });\n\t\n\t    discretebar.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t        tooltip.hidden(true);\n\t    });\n\t\n\t    discretebar.dispatch.on('elementMousemove.tooltip', function(evt) {\n\t        tooltip();\n\t    });\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    chart.dispatch = dispatch;\n\t    chart.discretebar = discretebar;\n\t    chart.legend = legend;\n\t    chart.xAxis = xAxis;\n\t    chart.yAxis = yAxis;\n\t    chart.tooltip = tooltip;\n\t\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:      {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\t\tshowLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n\t        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n\t        rotateLabels:  {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n\t        wrapLabels:  {get: function(){return wrapLabels;}, set: function(_){wrapLabels=!!_;}},\n\t        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n\t        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n\t        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            if (_.top !== undefined) {\n\t                margin.top = _.top;\n\t                marginTop = _.top;\n\t            }\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        duration: {get: function(){return duration;}, set: function(_){\n\t            duration = _;\n\t            renderWatch.reset(duration);\n\t            discretebar.duration(duration);\n\t            xAxis.duration(duration);\n\t            yAxis.duration(duration);\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t            discretebar.color(color);\n\t\t    legend.color(color);\n\t        }},\n\t        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n\t            rightAlignYAxis = _;\n\t            yAxis.orient( (_) ? 'right' : 'left');\n\t        }}\n\t    });\n\t\n\t    nv.utils.inheritOptions(chart, discretebar);\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t}\n\t\n\tnv.models.distribution = function() {\n\t    \"use strict\";\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t        , width = 400 //technically width or height depending on x or y....\n\t        , size = 8\n\t        , axis = 'x' // 'x' or 'y'... horizontal or vertical\n\t        , getData = function(d) { return d[axis] }  // defaults d.x or d.y\n\t        , color = nv.utils.defaultColor()\n\t        , scale = d3.scale.linear()\n\t        , domain\n\t        , duration = 250\n\t        , dispatch = d3.dispatch('renderEnd')\n\t        ;\n\t\n\t    //============================================================\n\t\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var scale0;\n\t    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\t\n\t    //============================================================\n\t\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        selection.each(function(data) {\n\t            var availableLength = width - (axis === 'x' ? margin.left + margin.right : margin.top + margin.bottom),\n\t                naxis = axis == 'x' ? 'y' : 'x',\n\t                container = d3.select(this);\n\t            nv.utils.initSVG(container);\n\t\n\t            //------------------------------------------------------------\n\t            // Setup Scales\n\t\n\t            scale0 = scale0 || scale;\n\t\n\t            //------------------------------------------------------------\n\t\n\t\n\t            //------------------------------------------------------------\n\t            // Setup containers and skeleton of chart\n\t\n\t            var wrap = container.selectAll('g.nv-distribution').data([data]);\n\t            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-distribution');\n\t            var gEnter = wrapEnter.append('g');\n\t            var g = wrap.select('g');\n\t\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\t\n\t            //------------------------------------------------------------\n\t\n\t\n\t            var distWrap = g.selectAll('g.nv-dist')\n\t                .data(function(d) { return d }, function(d) { return d.key });\n\t\n\t            distWrap.enter().append('g');\n\t            distWrap\n\t                .attr('class', function(d,i) { return 'nv-dist nv-series-' + i })\n\t                .style('stroke', function(d,i) { return color(d, i) });\n\t\n\t            var dist = distWrap.selectAll('line.nv-dist' + axis)\n\t                .data(function(d) { return d.values })\n\t            dist.enter().append('line')\n\t                .attr(axis + '1', function(d,i) { return scale0(getData(d,i)) })\n\t                .attr(axis + '2', function(d,i) { return scale0(getData(d,i)) })\n\t            renderWatch.transition(distWrap.exit().selectAll('line.nv-dist' + axis), 'dist exit')\n\t                // .transition()\n\t                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n\t                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n\t                .style('stroke-opacity', 0)\n\t                .remove();\n\t            dist\n\t                .attr('class', function(d,i) { return 'nv-dist' + axis + ' nv-dist' + axis + '-' + i })\n\t                .attr(naxis + '1', 0)\n\t                .attr(naxis + '2', size);\n\t            renderWatch.transition(dist, 'dist')\n\t                // .transition()\n\t                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n\t                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n\t\n\t\n\t            scale0 = scale.copy();\n\t\n\t        });\n\t        renderWatch.renderEnd('distribution immediate');\n\t        return chart;\n\t    }\n\t\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t    chart.dispatch = dispatch;\n\t\n\t    chart.margin = function(_) {\n\t        if (!arguments.length) return margin;\n\t        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t        margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t        margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t        return chart;\n\t    };\n\t\n\t    chart.width = function(_) {\n\t        if (!arguments.length) return width;\n\t        width = _;\n\t        return chart;\n\t    };\n\t\n\t    chart.axis = function(_) {\n\t        if (!arguments.length) return axis;\n\t        axis = _;\n\t        return chart;\n\t    };\n\t\n\t    chart.size = function(_) {\n\t        if (!arguments.length) return size;\n\t        size = _;\n\t        return chart;\n\t    };\n\t\n\t    chart.getData = function(_) {\n\t        if (!arguments.length) return getData;\n\t        getData = d3.functor(_);\n\t        return chart;\n\t    };\n\t\n\t    chart.scale = function(_) {\n\t        if (!arguments.length) return scale;\n\t        scale = _;\n\t        return chart;\n\t    };\n\t\n\t    chart.color = function(_) {\n\t        if (!arguments.length) return color;\n\t        color = nv.utils.getColor(_);\n\t        return chart;\n\t    };\n\t\n\t    chart.duration = function(_) {\n\t        if (!arguments.length) return duration;\n\t        duration = _;\n\t        renderWatch.reset(duration);\n\t        return chart;\n\t    };\n\t    //============================================================\n\t\n\t\n\t    return chart;\n\t}\n\tnv.models.focus = function(content) {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var content = content || nv.models.line()\n\t        , xAxis = nv.models.axis()\n\t        , yAxis = nv.models.axis()\n\t        , brush = d3.svg.brush()\n\t        ;\n\t\n\t    var margin = {top: 10, right: 0, bottom: 30, left: 0}\n\t        , color = nv.utils.defaultColor()\n\t        , width = null\n\t        , height = 70\n\t        , showXAxis = true\n\t        , showYAxis = false\n\t        , rightAlignYAxis = false\n\t        , ticks = null\n\t        , x\n\t        , y\n\t        , brushExtent = null\n\t        , duration = 250\n\t        , dispatch = d3.dispatch('brush', 'onBrush', 'renderEnd')\n\t        , syncBrushing = true\n\t        ;\n\t\n\t    content.interactive(false);\n\t    content.pointActive(function(d) { return false; });\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        renderWatch.models(content);\n\t        if (showXAxis) renderWatch.models(xAxis);\n\t        if (showYAxis) renderWatch.models(yAxis);\n\t\n\t        selection.each(function(data) {\n\t            var container = d3.select(this);\n\t            nv.utils.initSVG(container);\n\t            var availableWidth = nv.utils.availableWidth(width, container, margin),\n\t                availableHeight = height - margin.top - margin.bottom;\n\t\n\t            chart.update = function() { \n\t                if( duration === 0 ) {\n\t                    container.call( chart );\n\t                } else {\n\t                    container.transition().duration(duration).call(chart);\n\t                }\n\t            };\n\t            chart.container = this;\n\t\n\t            // Setup Scales\n\t            x = content.xScale();\n\t            y = content.yScale();\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-focus').data([data]);\n\t            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-focus').append('g');\n\t            var g = wrap.select('g');\n\t\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            gEnter.append('g').attr('class', 'nv-background').append('rect');\n\t            gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t            gEnter.append('g').attr('class', 'nv-y nv-axis');\n\t            gEnter.append('g').attr('class', 'nv-contentWrap');\n\t            gEnter.append('g').attr('class', 'nv-brushBackground');\n\t            gEnter.append('g').attr('class', 'nv-x nv-brush');\n\t\n\t            if (rightAlignYAxis) {\n\t                g.select(\".nv-y.nv-axis\")\n\t                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t            }\n\t\n\t            g.select('.nv-background rect')\n\t                .attr('width', availableWidth)\n\t                .attr('height', availableHeight);\n\t                \n\t            content\n\t                .width(availableWidth)\n\t                .height(availableHeight)\n\t                .color(data.map(function(d,i) {\n\t                    return d.color || color(d, i);\n\t                }).filter(function(d,i) { return !data[i].disabled; }));\n\t\n\t            var contentWrap = g.select('.nv-contentWrap')\n\t                .datum(data.filter(function(d) { return !d.disabled; }));\n\t\n\t            d3.transition(contentWrap).call(content);\n\t            \n\t            // Setup Brush\n\t            brush\n\t                .x(x)\n\t                .on('brush', function() {\n\t                    onBrush(syncBrushing);\n\t                });\n\t\n\t            brush.on('brushend', function () {\n\t                if (!syncBrushing) {\n\t                    dispatch.onBrush(brush.empty() ? x.domain() : brush.extent());\n\t                }\n\t            });\n\t\n\t            if (brushExtent) brush.extent(brushExtent);\n\t\n\t            var brushBG = g.select('.nv-brushBackground').selectAll('g')\n\t                .data([brushExtent || brush.extent()]);\n\t    \n\t            var brushBGenter = brushBG.enter()\n\t                .append('g');\n\t\n\t            brushBGenter.append('rect')\n\t                .attr('class', 'left')\n\t                .attr('x', 0)\n\t                .attr('y', 0)\n\t                .attr('height', availableHeight);\n\t\n\t            brushBGenter.append('rect')\n\t                .attr('class', 'right')\n\t                .attr('x', 0)\n\t                .attr('y', 0)\n\t                .attr('height', availableHeight);\n\t\n\t            var gBrush = g.select('.nv-x.nv-brush')\n\t                .call(brush);\n\t            gBrush.selectAll('rect')\n\t                .attr('height', availableHeight);\n\t            gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\t\n\t            onBrush(true);\n\t\n\t            g.select('.nv-background rect')\n\t                .attr('width', availableWidth)\n\t                .attr('height', availableHeight);\n\t\n\t            if (showXAxis) {\n\t                xAxis.scale(x)\n\t                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n\t                    .tickSize(-availableHeight, 0);\n\t  \n\t                g.select('.nv-x.nv-axis')\n\t                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n\t                d3.transition(g.select('.nv-x.nv-axis'))\n\t                    .call(xAxis);\n\t            }\n\t\n\t            if (showYAxis) {\n\t                yAxis\n\t                    .scale(y)\n\t                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n\t                    .tickSize( -availableWidth, 0);\n\t\n\t                d3.transition(g.select('.nv-y.nv-axis'))\n\t                    .call(yAxis);\n\t            }\n\t            \n\t            g.select('.nv-x.nv-axis')\n\t                .attr('transform', 'translate(0,' + y.range()[0] + ')');\n\t\n\t            //============================================================\n\t            // Event Handling/Dispatching (in chart's scope)\n\t            //------------------------------------------------------------\n\t\n\t            //============================================================\n\t            // Functions\n\t            //------------------------------------------------------------\n\t    \n\t            // Taken from crossfilter (http://square.github.com/crossfilter/)\n\t            function resizePath(d) {\n\t                var e = +(d == 'e'),\n\t                    x = e ? 1 : -1,\n\t                    y = availableHeight / 3;\n\t                return 'M' + (0.5 * x) + ',' + y\n\t                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n\t                    + 'V' + (2 * y - 6)\n\t                    + 'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y)\n\t                    + 'Z'\n\t                    + 'M' + (2.5 * x) + ',' + (y + 8)\n\t                    + 'V' + (2 * y - 8)\n\t                    + 'M' + (4.5 * x) + ',' + (y + 8)\n\t                    + 'V' + (2 * y - 8);\n\t            }\n\t    \n\t    \n\t            function updateBrushBG() {\n\t                if (!brush.empty()) brush.extent(brushExtent);\n\t                brushBG\n\t                    .data([brush.empty() ? x.domain() : brushExtent])\n\t                    .each(function(d,i) {\n\t                        var leftWidth = x(d[0]) - x.range()[0],\n\t                            rightWidth = availableWidth - x(d[1]);\n\t                        d3.select(this).select('.left')\n\t                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n\t    \n\t                        d3.select(this).select('.right')\n\t                            .attr('x', x(d[1]))\n\t                            .attr('width', rightWidth < 0 ? 0 : rightWidth);\n\t                    });\n\t            }\n\t\n\t\n\t            function onBrush(shouldDispatch) {\n\t                brushExtent = brush.empty() ? null : brush.extent();\n\t                var extent = brush.empty() ? x.domain() : brush.extent();\n\t                dispatch.brush({extent: extent, brush: brush});\n\t                updateBrushBG();\n\t                if (shouldDispatch) {\n\t                    dispatch.onBrush(extent);\n\t                }\n\t            }\n\t        });\n\t\n\t        renderWatch.renderEnd('focus immediate');\n\t        return chart;\n\t    }\n\t\n\t\n\t    //============================================================\n\t    // Event Handling/Dispatching (out of chart's scope)\n\t    //------------------------------------------------------------\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    // expose chart's sub-components\n\t    chart.dispatch = dispatch;\n\t    chart.content = content;\n\t    chart.brush = brush;\n\t    chart.xAxis = xAxis;\n\t    chart.yAxis = yAxis;\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:      {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\t        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n\t        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n\t        brushExtent: {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},\n\t        syncBrushing: {get: function(){return syncBrushing;}, set: function(_){syncBrushing=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        duration: {get: function(){return duration;}, set: function(_){\n\t            duration = _;\n\t            renderWatch.reset(duration);\n\t            content.duration(duration);\n\t            xAxis.duration(duration);\n\t            yAxis.duration(duration);\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t            content.color(color);\n\t        }},\n\t        interpolate: {get: function(){return content.interpolate();}, set: function(_){\n\t            content.interpolate(_);\n\t        }},\n\t        xTickFormat: {get: function(){return xAxis.tickFormat();}, set: function(_){\n\t            xAxis.tickFormat(_);\n\t        }},\n\t        yTickFormat: {get: function(){return yAxis.tickFormat();}, set: function(_){\n\t            yAxis.tickFormat(_);\n\t        }},\n\t        x: {get: function(){return content.x();}, set: function(_){\n\t            content.x(_);\n\t        }},\n\t        y: {get: function(){return content.y();}, set: function(_){\n\t            content.y(_);\n\t        }},\n\t        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n\t            rightAlignYAxis = _;\n\t            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n\t        }}\n\t    });\n\t\n\t    nv.utils.inheritOptions(chart, content);\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t};\n\tnv.models.forceDirectedGraph = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t    var margin = {top: 2, right: 0, bottom: 2, left: 0}\n\t        , width = 400\n\t        , height = 32\n\t        , container = null\n\t        , dispatch = d3.dispatch('renderEnd')\n\t        , color = nv.utils.getColor(['#000'])\n\t        , tooltip      = nv.models.tooltip()\n\t        , noData = null\n\t        // Force directed graph specific parameters [default values]\n\t        , linkStrength = 0.1\n\t        , friction = 0.9\n\t        , linkDist = 30\n\t        , charge = -120\n\t        , gravity = 0.1\n\t        , theta = 0.8\n\t        , alpha = 0.1\n\t        , radius = 5\n\t        // These functions allow to add extra attributes to ndes and links\n\t        ,nodeExtras = function(nodes) { /* Do nothing */ }\n\t        ,linkExtras = function(links) { /* Do nothing */ }\n\t        ;\n\t\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var renderWatch = nv.utils.renderWatch(dispatch);\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t\n\t        selection.each(function(data) {\n\t          container = d3.select(this);\n\t          nv.utils.initSVG(container);\n\t\n\t          var availableWidth = nv.utils.availableWidth(width, container, margin),\n\t              availableHeight = nv.utils.availableHeight(height, container, margin);\n\t\n\t          container\n\t                  .attr(\"width\", availableWidth)\n\t                  .attr(\"height\", availableHeight);\n\t\n\t          // Display No Data message if there's nothing to show.\n\t          if (!data || !data.links || !data.nodes) {\n\t              nv.utils.noData(chart, container)\n\t              return chart;\n\t          } else {\n\t              container.selectAll('.nv-noData').remove();\n\t          }\n\t          container.selectAll('*').remove();\n\t\n\t          // Collect names of all fields in the nodes\n\t          var nodeFieldSet = new Set();\n\t          data.nodes.forEach(function(node) {\n\t            var keys = Object.keys(node);\n\t            keys.forEach(function(key) {\n\t              nodeFieldSet.add(key);\n\t            });\n\t          });\n\t\n\t          var force = d3.layout.force()\n\t                .nodes(data.nodes)\n\t                .links(data.links)\n\t                .size([availableWidth, availableHeight])\n\t                .linkStrength(linkStrength)\n\t                .friction(friction)\n\t                .linkDistance(linkDist)\n\t                .charge(charge)\n\t                .gravity(gravity)\n\t                .theta(theta)\n\t                .alpha(alpha)\n\t                .start();\n\t\n\t          var link = container.selectAll(\".link\")\n\t                .data(data.links)\n\t                .enter().append(\"line\")\n\t                .attr(\"class\", \"nv-force-link\")\n\t                .style(\"stroke-width\", function(d) { return Math.sqrt(d.value); });\n\t\n\t          var node = container.selectAll(\".node\")\n\t                .data(data.nodes)\n\t                .enter()\n\t                .append(\"g\")\n\t                .attr(\"class\", \"nv-force-node\")\n\t                .call(force.drag);\n\t\n\t          node\n\t            .append(\"circle\")\n\t            .attr(\"r\", radius)\n\t            .style(\"fill\", function(d) { return color(d) } )\n\t            .on(\"mouseover\", function(evt) {\n\t              container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n\t                  .attr('y1', evt.py);\n\t              container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n\t                  .attr('x2', evt.px);\n\t\n\t              // Add 'series' object to\n\t              var nodeColor = color(evt);\n\t              evt.series = [];\n\t              nodeFieldSet.forEach(function(field) {\n\t                evt.series.push({\n\t                  color: nodeColor,\n\t                  key:   field,\n\t                  value: evt[field]\n\t                });\n\t              });\n\t              tooltip.data(evt).hidden(false);\n\t            })\n\t            .on(\"mouseout\",  function(d) {\n\t              tooltip.hidden(true);\n\t            });\n\t\n\t          tooltip.headerFormatter(function(d) {return \"Node\";});\n\t\n\t          // Apply extra attributes to nodes and links (if any)\n\t          linkExtras(link);\n\t          nodeExtras(node);\n\t\n\t          force.on(\"tick\", function() {\n\t              link.attr(\"x1\", function(d) { return d.source.x; })\n\t                  .attr(\"y1\", function(d) { return d.source.y; })\n\t                  .attr(\"x2\", function(d) { return d.target.x; })\n\t                  .attr(\"y2\", function(d) { return d.target.y; });\n\t\n\t              node.attr(\"transform\", function(d) {\n\t                return \"translate(\" + d.x + \", \" + d.y + \")\";\n\t              });\n\t            });\n\t        });\n\t\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:     {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:    {get: function(){return height;}, set: function(_){height=_;}},\n\t\n\t        // Force directed graph specific parameters\n\t        linkStrength:{get: function(){return linkStrength;}, set: function(_){linkStrength=_;}},\n\t        friction:    {get: function(){return friction;}, set: function(_){friction=_;}},\n\t        linkDist:    {get: function(){return linkDist;}, set: function(_){linkDist=_;}},\n\t        charge:      {get: function(){return charge;}, set: function(_){charge=_;}},\n\t        gravity:     {get: function(){return gravity;}, set: function(_){gravity=_;}},\n\t        theta:       {get: function(){return theta;}, set: function(_){theta=_;}},\n\t        alpha:       {get: function(){return alpha;}, set: function(_){alpha=_;}},\n\t        radius:      {get: function(){return radius;}, set: function(_){radius=_;}},\n\t\n\t        //functor options\n\t        x: {get: function(){return getX;}, set: function(_){getX=d3.functor(_);}},\n\t        y: {get: function(){return getY;}, set: function(_){getY=d3.functor(_);}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t        }},\n\t        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\t        nodeExtras: {get: function(){return nodeExtras;}, set: function(_){\n\t            nodeExtras = _;\n\t        }},\n\t        linkExtras: {get: function(){return linkExtras;}, set: function(_){\n\t            linkExtras = _;\n\t        }}\n\t    });\n\t\n\t    chart.dispatch = dispatch;\n\t    chart.tooltip = tooltip;\n\t    nv.utils.initOptions(chart);\n\t    return chart;\n\t};\n\tnv.models.furiousLegend = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n\t        , width = 400\n\t        , height = 20\n\t        , getKey = function(d) { return d.key }\n\t        , keyFormatter = function (d) { return d }\n\t        , color = nv.utils.getColor()\n\t        , maxKeyLength = 20 //default value for key lengths\n\t        , align = true\n\t        , padding = 28 //define how much space between legend items. - recommend 32 for furious version\n\t        , rightAlign = true\n\t        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.\n\t        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)\n\t        , expanded = false\n\t        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')\n\t        , vers = 'classic' //Options are \"classic\" and \"furious\"\n\t        ;\n\t\n\t    function chart(selection) {\n\t        selection.each(function(data) {\n\t            var availableWidth = width - margin.left - margin.right,\n\t                container = d3.select(this);\n\t            nv.utils.initSVG(container);\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-legend').data([data]);\n\t            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');\n\t            var g = wrap.select('g');\n\t\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            var series = g.selectAll('.nv-series')\n\t                .data(function(d) {\n\t                    if(vers != 'furious') return d;\n\t\n\t                    return d.filter(function(n) {\n\t                        return expanded ? true : !n.disengaged;\n\t                    });\n\t                });\n\t            var seriesEnter = series.enter().append('g').attr('class', 'nv-series')\n\t\n\t            var seriesShape;\n\t\n\t            if(vers == 'classic') {\n\t                seriesEnter.append('circle')\n\t                    .style('stroke-width', 2)\n\t                    .attr('class','nv-legend-symbol')\n\t                    .attr('r', 5);\n\t\n\t                seriesShape = series.select('circle');\n\t            } else if (vers == 'furious') {\n\t                seriesEnter.append('rect')\n\t                    .style('stroke-width', 2)\n\t                    .attr('class','nv-legend-symbol')\n\t                    .attr('rx', 3)\n\t                    .attr('ry', 3);\n\t\n\t                seriesShape = series.select('rect');\n\t\n\t                seriesEnter.append('g')\n\t                    .attr('class', 'nv-check-box')\n\t                    .property('innerHTML','<path d=\"M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z\" class=\"nv-box\"></path><path d=\"M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511\" class=\"nv-check\"></path>')\n\t                    .attr('transform', 'translate(-10,-8)scale(0.5)');\n\t\n\t                var seriesCheckbox = series.select('.nv-check-box');\n\t\n\t                seriesCheckbox.each(function(d,i) {\n\t                    d3.select(this).selectAll('path')\n\t                        .attr('stroke', setTextColor(d,i));\n\t                });\n\t            }\n\t\n\t            seriesEnter.append('text')\n\t                .attr('text-anchor', 'start')\n\t                .attr('class','nv-legend-text')\n\t                .attr('dy', '.32em')\n\t                .attr('dx', '8');\n\t\n\t            var seriesText = series.select('text.nv-legend-text');\n\t\n\t            series\n\t                .on('mouseover', function(d,i) {\n\t                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects\n\t                })\n\t                .on('mouseout', function(d,i) {\n\t                    dispatch.legendMouseout(d,i);\n\t                })\n\t                .on('click', function(d,i) {\n\t                    dispatch.legendClick(d,i);\n\t                    // make sure we re-get data in case it was modified\n\t                    var data = series.data();\n\t                    if (updateState) {\n\t                        if(vers =='classic') {\n\t                            if (radioButtonMode) {\n\t                                //Radio button mode: set every series to disabled,\n\t                                //  and enable the clicked series.\n\t                                data.forEach(function(series) { series.disabled = true});\n\t                                d.disabled = false;\n\t                            }\n\t                            else {\n\t                                d.disabled = !d.disabled;\n\t                                if (data.every(function(series) { return series.disabled})) {\n\t                                    //the default behavior of NVD3 legends is, if every single series\n\t                                    // is disabled, turn all series' back on.\n\t                                    data.forEach(function(series) { series.disabled = false});\n\t                                }\n\t                            }\n\t                        } else if(vers == 'furious') {\n\t                            if(expanded) {\n\t                                d.disengaged = !d.disengaged;\n\t                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;\n\t                                d.disabled = d.disengaged || d.userDisabled;\n\t                            } else if (!expanded) {\n\t                                d.disabled = !d.disabled;\n\t                                d.userDisabled = d.disabled;\n\t                                var engaged = data.filter(function(d) { return !d.disengaged; });\n\t                                if (engaged.every(function(series) { return series.userDisabled })) {\n\t                                    //the default behavior of NVD3 legends is, if every single series\n\t                                    // is disabled, turn all series' back on.\n\t                                    data.forEach(function(series) {\n\t                                        series.disabled = series.userDisabled = false;\n\t                                    });\n\t                                }\n\t                            }\n\t                        }\n\t                        dispatch.stateChange({\n\t                            disabled: data.map(function(d) { return !!d.disabled }),\n\t                            disengaged: data.map(function(d) { return !!d.disengaged })\n\t                        });\n\t\n\t                    }\n\t                })\n\t                .on('dblclick', function(d,i) {\n\t                    if(vers == 'furious' && expanded) return;\n\t                    dispatch.legendDblclick(d,i);\n\t                    if (updateState) {\n\t                        // make sure we re-get data in case it was modified\n\t                        var data = series.data();\n\t                        //the default behavior of NVD3 legends, when double clicking one,\n\t                        // is to set all other series' to false, and make the double clicked series enabled.\n\t                        data.forEach(function(series) {\n\t                            series.disabled = true;\n\t                            if(vers == 'furious') series.userDisabled = series.disabled;\n\t                        });\n\t                        d.disabled = false;\n\t                        if(vers == 'furious') d.userDisabled = d.disabled;\n\t                        dispatch.stateChange({\n\t                            disabled: data.map(function(d) { return !!d.disabled })\n\t                        });\n\t                    }\n\t                });\n\t\n\t            series.classed('nv-disabled', function(d) { return d.userDisabled });\n\t            series.exit().remove();\n\t\n\t            seriesText\n\t                .attr('fill', setTextColor)\n\t                .text(function (d) { return keyFormatter(getKey(d)) });\n\t\n\t            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)\n\t            // NEW ALIGNING CODE, TODO: clean up\n\t\n\t            var versPadding;\n\t            switch(vers) {\n\t                case 'furious' :\n\t                    versPadding = 23;\n\t                    break;\n\t                case 'classic' :\n\t                    versPadding = 20;\n\t            }\n\t\n\t            if (align) {\n\t\n\t                var seriesWidths = [];\n\t                series.each(function(d,i) {\n\t                    var legendText;\n\t                    if (keyFormatter(getKey(d)) && keyFormatter(getKey(d)).length > maxKeyLength) {\n\t                        var trimmedKey = keyFormatter(getKey(d)).substring(0, maxKeyLength);\n\t                        legendText = d3.select(this).select('text').text(trimmedKey + \"...\");\n\t                        d3.select(this).append(\"svg:title\").text(keyFormatter(getKey(d)));\n\t                    } else {\n\t                        legendText = d3.select(this).select('text');\n\t                    }\n\t                    var nodeTextLength;\n\t                    try {\n\t                        nodeTextLength = legendText.node().getComputedTextLength();\n\t                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead\n\t                        if(nodeTextLength <= 0) throw Error();\n\t                    }\n\t                    catch(e) {\n\t                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);\n\t                    }\n\t\n\t                    seriesWidths.push(nodeTextLength + padding);\n\t                });\n\t\n\t                var seriesPerRow = 0;\n\t                var legendWidth = 0;\n\t                var columnWidths = [];\n\t\n\t                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {\n\t                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];\n\t                    legendWidth += seriesWidths[seriesPerRow++];\n\t                }\n\t                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row\n\t\n\t                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {\n\t                    columnWidths = [];\n\t                    seriesPerRow--;\n\t\n\t                    for (var k = 0; k < seriesWidths.length; k++) {\n\t                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )\n\t                            columnWidths[k % seriesPerRow] = seriesWidths[k];\n\t                    }\n\t\n\t                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {\n\t                        return prev + cur;\n\t                    });\n\t                }\n\t\n\t                var xPositions = [];\n\t                for (var i = 0, curX = 0; i < seriesPerRow; i++) {\n\t                    xPositions[i] = curX;\n\t                    curX += columnWidths[i];\n\t                }\n\t\n\t                series\n\t                    .attr('transform', function(d, i) {\n\t                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';\n\t                    });\n\t\n\t                //position legend as far right as possible within the total width\n\t                if (rightAlign) {\n\t                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');\n\t                }\n\t                else {\n\t                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');\n\t                }\n\t\n\t                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);\n\t\n\t            } else {\n\t\n\t                var ypos = 5,\n\t                    newxpos = 5,\n\t                    maxwidth = 0,\n\t                    xpos;\n\t                series\n\t                    .attr('transform', function(d, i) {\n\t                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;\n\t                        xpos = newxpos;\n\t\n\t                        if (width < margin.left + margin.right + xpos + length) {\n\t                            newxpos = xpos = 5;\n\t                            ypos += versPadding;\n\t                        }\n\t\n\t                        newxpos += length;\n\t                        if (newxpos > maxwidth) maxwidth = newxpos;\n\t\n\t                        return 'translate(' + xpos + ',' + ypos + ')';\n\t                    });\n\t\n\t                //position legend as far right as possible within the total width\n\t                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');\n\t\n\t                height = margin.top + margin.bottom + ypos + 15;\n\t            }\n\t\n\t            if(vers == 'furious') {\n\t                // Size rectangles after text is placed\n\t                seriesShape\n\t                    .attr('width', function(d,i) {\n\t                        return seriesText[0][i].getComputedTextLength() + 27;\n\t                    })\n\t                    .attr('height', 18)\n\t                    .attr('y', -9)\n\t                    .attr('x', -15)\n\t            }\n\t\n\t            seriesShape\n\t                .style('fill', setBGColor)\n\t                .style('stroke', function(d,i) { return d.color || color(d, i) });\n\t        });\n\t\n\t        function setTextColor(d,i) {\n\t            if(vers != 'furious') return '#000';\n\t            if(expanded) {\n\t                return d.disengaged ? color(d,i) : '#fff';\n\t            } else if (!expanded) {\n\t                return !!d.disabled ? color(d,i) : '#fff';\n\t            }\n\t        }\n\t\n\t        function setBGColor(d,i) {\n\t            if(expanded && vers == 'furious') {\n\t                return d.disengaged ? '#fff' : color(d,i);\n\t            } else {\n\t                return !!d.disabled ? '#fff' : color(d,i);\n\t            }\n\t        }\n\t\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    chart.dispatch = dispatch;\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:          {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:         {get: function(){return height;}, set: function(_){height=_;}},\n\t        key:            {get: function(){return getKey;}, set: function(_){getKey=_;}},\n\t        keyFormatter:   {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n\t        align:          {get: function(){return align;}, set: function(_){align=_;}},\n\t        rightAlign:     {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},\n\t        maxKeyLength:   {get: function(){return maxKeyLength;}, set: function(_){maxKeyLength=_;}},\n\t        padding:        {get: function(){return padding;}, set: function(_){padding=_;}},\n\t        updateState:    {get: function(){return updateState;}, set: function(_){updateState=_;}},\n\t        radioButtonMode:{get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},\n\t        expanded:       {get: function(){return expanded;}, set: function(_){expanded=_;}},\n\t        vers:           {get: function(){return vers;}, set: function(_){vers=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t        }}\n\t    });\n\t\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t};\n\t//TODO: consider deprecating and using multibar with single series for this\n\tnv.models.historicalBar = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t        , width = null\n\t        , height = null\n\t        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n\t        , container = null\n\t        , x = d3.scale.linear()\n\t        , y = d3.scale.linear()\n\t        , getX = function(d) { return d.x }\n\t        , getY = function(d) { return d.y }\n\t        , forceX = []\n\t        , forceY = [0]\n\t        , padData = false\n\t        , clipEdge = true\n\t        , color = nv.utils.defaultColor()\n\t        , xDomain\n\t        , yDomain\n\t        , xRange\n\t        , yRange\n\t        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n\t        , interactive = true\n\t        ;\n\t\n\t    var renderWatch = nv.utils.renderWatch(dispatch, 0);\n\t\n\t    function chart(selection) {\n\t        selection.each(function(data) {\n\t            renderWatch.reset();\n\t\n\t            container = d3.select(this);\n\t            var availableWidth = nv.utils.availableWidth(width, container, margin),\n\t                availableHeight = nv.utils.availableHeight(height, container, margin);\n\t\n\t            nv.utils.initSVG(container);\n\t\n\t            // Setup Scales\n\t            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\t\n\t            if (padData)\n\t                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n\t            else\n\t                x.range(xRange || [0, availableWidth]);\n\t\n\t            y.domain(yDomain || d3.extent(data[0].values.map(getY).concat(forceY) ))\n\t                .range(yRange || [availableHeight, 0]);\n\t\n\t            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n\t            if (x.domain()[0] === x.domain()[1])\n\t                x.domain()[0] ?\n\t                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n\t                    : x.domain([-1,1]);\n\t\n\t            if (y.domain()[0] === y.domain()[1])\n\t                y.domain()[0] ?\n\t                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n\t                    : y.domain([-1,1]);\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap.nv-historicalBar-' + id).data([data[0].values]);\n\t            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBar-' + id);\n\t            var defsEnter = wrapEnter.append('defs');\n\t            var gEnter = wrapEnter.append('g');\n\t            var g = wrap.select('g');\n\t\n\t            gEnter.append('g').attr('class', 'nv-bars');\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            container\n\t                .on('click', function(d,i) {\n\t                    dispatch.chartClick({\n\t                        data: d,\n\t                        index: i,\n\t                        pos: d3.event,\n\t                        id: id\n\t                    });\n\t                });\n\t\n\t            defsEnter.append('clipPath')\n\t                .attr('id', 'nv-chart-clip-path-' + id)\n\t                .append('rect');\n\t\n\t            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n\t                .attr('width', availableWidth)\n\t                .attr('height', availableHeight);\n\t\n\t            g.attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\t\n\t            var bars = wrap.select('.nv-bars').selectAll('.nv-bar')\n\t                .data(function(d) { return d }, function(d,i) {return getX(d,i)});\n\t            bars.exit().remove();\n\t\n\t            bars.enter().append('rect')\n\t                .attr('x', 0 )\n\t                .attr('y', function(d,i) {  return nv.utils.NaNtoZero(y(Math.max(0, getY(d,i)))) })\n\t                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.abs(y(getY(d,i)) - y(0))) })\n\t                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })\n\t                .on('mouseover', function(d,i) {\n\t                    if (!interactive) return;\n\t                    d3.select(this).classed('hover', true);\n\t                    dispatch.elementMouseover({\n\t                        data: d,\n\t                        index: i,\n\t                        color: d3.select(this).style(\"fill\")\n\t                    });\n\t\n\t                })\n\t                .on('mouseout', function(d,i) {\n\t                    if (!interactive) return;\n\t                    d3.select(this).classed('hover', false);\n\t                    dispatch.elementMouseout({\n\t                        data: d,\n\t                        index: i,\n\t                        color: d3.select(this).style(\"fill\")\n\t                    });\n\t                })\n\t                .on('mousemove', function(d,i) {\n\t                    if (!interactive) return;\n\t                    dispatch.elementMousemove({\n\t                        data: d,\n\t                        index: i,\n\t                        color: d3.select(this).style(\"fill\")\n\t                    });\n\t                })\n\t                .on('click', function(d,i) {\n\t                    if (!interactive) return;\n\t                    var element = this;\n\t                    dispatch.elementClick({\n\t                        data: d,\n\t                        index: i,\n\t                        color: d3.select(this).style(\"fill\"),\n\t                        event: d3.event,\n\t                        element: element\n\t                    });\n\t                    d3.event.stopPropagation();\n\t                })\n\t                .on('dblclick', function(d,i) {\n\t                    if (!interactive) return;\n\t                    dispatch.elementDblClick({\n\t                        data: d,\n\t                        index: i,\n\t                        color: d3.select(this).style(\"fill\")\n\t                    });\n\t                    d3.event.stopPropagation();\n\t                });\n\t\n\t            bars\n\t                .attr('fill', function(d,i) { return color(d, i); })\n\t                .attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })\n\t                .watchTransition(renderWatch, 'bars')\n\t                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })\n\t                //TODO: better width calculations that don't assume always uniform data spacing;w\n\t                .attr('width', (availableWidth / data[0].values.length) * .9 );\n\t\n\t            bars.watchTransition(renderWatch, 'bars')\n\t                .attr('y', function(d,i) {\n\t                    var rval = getY(d,i) < 0 ?\n\t                        y(0) :\n\t                            y(0) - y(getY(d,i)) < 1 ?\n\t                        y(0) - 1 :\n\t                        y(getY(d,i));\n\t                    return nv.utils.NaNtoZero(rval);\n\t                })\n\t                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.max(Math.abs(y(getY(d,i)) - y(0)),1)) });\n\t\n\t        });\n\t\n\t        renderWatch.renderEnd('historicalBar immediate');\n\t        return chart;\n\t    }\n\t\n\t    //Create methods to allow outside functions to highlight a specific bar.\n\t    chart.highlightPoint = function(pointIndex, isHoverOver) {\n\t        container\n\t            .select(\".nv-bars .nv-bar-0-\" + pointIndex)\n\t            .classed(\"hover\", isHoverOver)\n\t        ;\n\t    };\n\t\n\t    chart.clearHighlights = function() {\n\t        container\n\t            .select(\".nv-bars .nv-bar.hover\")\n\t            .classed(\"hover\", false)\n\t        ;\n\t    };\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    chart.dispatch = dispatch;\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:   {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:  {get: function(){return height;}, set: function(_){height=_;}},\n\t        forceX:  {get: function(){return forceX;}, set: function(_){forceX=_;}},\n\t        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n\t        padData: {get: function(){return padData;}, set: function(_){padData=_;}},\n\t        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n\t        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n\t        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n\t        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n\t        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n\t        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n\t        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n\t        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n\t        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n\t        id:          {get: function(){return id;}, set: function(_){id=_;}},\n\t        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t        }}\n\t    });\n\t\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t};\n\t\n\tnv.models.historicalBarChart = function(bar_model) {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var bars = bar_model || nv.models.historicalBar()\n\t        , xAxis = nv.models.axis()\n\t        , yAxis = nv.models.axis()\n\t        , legend = nv.models.legend()\n\t        , interactiveLayer = nv.interactiveGuideline()\n\t        , tooltip = nv.models.tooltip()\n\t        ;\n\t\n\t\n\t    var margin = {top: 30, right: 90, bottom: 50, left: 90}\n\t        , marginTop = null\n\t        , color = nv.utils.defaultColor()\n\t        , width = null\n\t        , height = null\n\t        , showLegend = false\n\t        , showXAxis = true\n\t        , showYAxis = true\n\t        , rightAlignYAxis = false\n\t        , useInteractiveGuideline = false\n\t        , x\n\t        , y\n\t        , state = {}\n\t        , defaultState = null\n\t        , noData = null\n\t        , dispatch = d3.dispatch('tooltipHide', 'stateChange', 'changeState', 'renderEnd')\n\t        , transitionDuration = 250\n\t        ;\n\t\n\t    xAxis.orient('bottom').tickPadding(7);\n\t    yAxis.orient( (rightAlignYAxis) ? 'right' : 'left');\n\t    tooltip\n\t        .duration(0)\n\t        .headerEnabled(false)\n\t        .valueFormatter(function(d, i) {\n\t            return yAxis.tickFormat()(d, i);\n\t        })\n\t        .headerFormatter(function(d, i) {\n\t            return xAxis.tickFormat()(d, i);\n\t        });\n\t\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var renderWatch = nv.utils.renderWatch(dispatch, 0);\n\t\n\t    function chart(selection) {\n\t        selection.each(function(data) {\n\t            renderWatch.reset();\n\t            renderWatch.models(bars);\n\t            if (showXAxis) renderWatch.models(xAxis);\n\t            if (showYAxis) renderWatch.models(yAxis);\n\t\n\t            var container = d3.select(this),\n\t                that = this;\n\t            nv.utils.initSVG(container);\n\t            var availableWidth = nv.utils.availableWidth(width, container, margin),\n\t                availableHeight = nv.utils.availableHeight(height, container, margin);\n\t\n\t            chart.update = function() { container.transition().duration(transitionDuration).call(chart) };\n\t            chart.container = this;\n\t\n\t            //set state.disabled\n\t            state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t            if (!defaultState) {\n\t                var key;\n\t                defaultState = {};\n\t                for (key in state) {\n\t                    if (state[key] instanceof Array)\n\t                        defaultState[key] = state[key].slice(0);\n\t                    else\n\t                        defaultState[key] = state[key];\n\t                }\n\t            }\n\t\n\t            // Display noData message if there's nothing to show.\n\t            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t                nv.utils.noData(chart, container)\n\t                return chart;\n\t            } else {\n\t                container.selectAll('.nv-noData').remove();\n\t            }\n\t\n\t            // Setup Scales\n\t            x = bars.xScale();\n\t            y = bars.yScale();\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap.nv-historicalBarChart').data([data]);\n\t            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBarChart').append('g');\n\t            var g = wrap.select('g');\n\t\n\t            gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t            gEnter.append('g').attr('class', 'nv-y nv-axis');\n\t            gEnter.append('g').attr('class', 'nv-barsWrap');\n\t            gEnter.append('g').attr('class', 'nv-legendWrap');\n\t            gEnter.append('g').attr('class', 'nv-interactive');\n\t\n\t            // Legend\n\t            if (!showLegend) {\n\t                g.select('.nv-legendWrap').selectAll('*').remove();\n\t            } else {\n\t                legend.width(availableWidth);\n\t\n\t                g.select('.nv-legendWrap')\n\t                    .datum(data)\n\t                    .call(legend);\n\t\n\t                if (!marginTop && legend.height() !== margin.top) {\n\t                    margin.top = legend.height();\n\t                    availableHeight = nv.utils.availableHeight(height, container, margin);\n\t                }\n\t\n\t                wrap.select('.nv-legendWrap')\n\t                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t            }\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            if (rightAlignYAxis) {\n\t                g.select(\".nv-y.nv-axis\")\n\t                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t            }\n\t\n\t            //Set up interactive layer\n\t            if (useInteractiveGuideline) {\n\t                interactiveLayer\n\t                    .width(availableWidth)\n\t                    .height(availableHeight)\n\t                    .margin({left:margin.left, top:margin.top})\n\t                    .svgContainer(container)\n\t                    .xScale(x);\n\t                wrap.select(\".nv-interactive\").call(interactiveLayer);\n\t            }\n\t            bars\n\t                .width(availableWidth)\n\t                .height(availableHeight)\n\t                .color(data.map(function(d,i) {\n\t                    return d.color || color(d, i);\n\t                }).filter(function(d,i) { return !data[i].disabled }));\n\t\n\t            var barsWrap = g.select('.nv-barsWrap')\n\t                .datum(data.filter(function(d) { return !d.disabled }));\n\t            barsWrap.transition().call(bars);\n\t\n\t            // Setup Axes\n\t            if (showXAxis) {\n\t                xAxis\n\t                    .scale(x)\n\t                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n\t                    .tickSize(-availableHeight, 0);\n\t\n\t                g.select('.nv-x.nv-axis')\n\t                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n\t                g.select('.nv-x.nv-axis')\n\t                    .transition()\n\t                    .call(xAxis);\n\t            }\n\t\n\t            if (showYAxis) {\n\t                yAxis\n\t                    .scale(y)\n\t                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n\t                    .tickSize( -availableWidth, 0);\n\t\n\t                g.select('.nv-y.nv-axis')\n\t                    .transition()\n\t                    .call(yAxis);\n\t            }\n\t\n\t            //============================================================\n\t            // Event Handling/Dispatching (in chart's scope)\n\t            //------------------------------------------------------------\n\t\n\t            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n\t                bars.clearHighlights();\n\t\n\t                var singlePoint, pointIndex, pointXLocation, allData = [];\n\t                data\n\t                    .filter(function(series, i) {\n\t                        series.seriesIndex = i;\n\t                        return !series.disabled;\n\t                    })\n\t                    .forEach(function(series,i) {\n\t                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n\t                        bars.highlightPoint(pointIndex,true);\n\t                        var point = series.values[pointIndex];\n\t                        if (point === undefined) return;\n\t                        if (singlePoint === undefined) singlePoint = point;\n\t                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n\t                        allData.push({\n\t                            key: series.key,\n\t                            value: chart.y()(point, pointIndex),\n\t                            color: color(series,series.seriesIndex),\n\t                            data: series.values[pointIndex]\n\t                        });\n\t                    });\n\t\n\t                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));\n\t                interactiveLayer.tooltip\n\t                    .valueFormatter(function(d,i) {\n\t                        return yAxis.tickFormat()(d);\n\t                    })\n\t                    .data({\n\t                        value: xValue,\n\t                        index: pointIndex,\n\t                        series: allData\n\t                    })();\n\t\n\t                interactiveLayer.renderGuideLine(pointXLocation);\n\t\n\t            });\n\t\n\t            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n\t                dispatch.tooltipHide();\n\t                bars.clearHighlights();\n\t            });\n\t\n\t            legend.dispatch.on('legendClick', function(d,i) {\n\t                d.disabled = !d.disabled;\n\t\n\t                if (!data.filter(function(d) { return !d.disabled }).length) {\n\t                    data.map(function(d) {\n\t                        d.disabled = false;\n\t                        wrap.selectAll('.nv-series').classed('disabled', false);\n\t                        return d;\n\t                    });\n\t                }\n\t\n\t                state.disabled = data.map(function(d) { return !!d.disabled });\n\t                dispatch.stateChange(state);\n\t\n\t                selection.transition().call(chart);\n\t            });\n\t\n\t            legend.dispatch.on('legendDblclick', function(d) {\n\t                //Double clicking should always enable current series, and disabled all others.\n\t                data.forEach(function(d) {\n\t                    d.disabled = true;\n\t                });\n\t                d.disabled = false;\n\t\n\t                state.disabled = data.map(function(d) { return !!d.disabled });\n\t                dispatch.stateChange(state);\n\t                chart.update();\n\t            });\n\t\n\t            dispatch.on('changeState', function(e) {\n\t                if (typeof e.disabled !== 'undefined') {\n\t                    data.forEach(function(series,i) {\n\t                        series.disabled = e.disabled[i];\n\t                    });\n\t\n\t                    state.disabled = e.disabled;\n\t                }\n\t\n\t                chart.update();\n\t            });\n\t        });\n\t\n\t        renderWatch.renderEnd('historicalBarChart immediate');\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Event Handling/Dispatching (out of chart's scope)\n\t    //------------------------------------------------------------\n\t\n\t    bars.dispatch.on('elementMouseover.tooltip', function(evt) {\n\t        evt['series'] = {\n\t            key: chart.x()(evt.data),\n\t            value: chart.y()(evt.data),\n\t            color: evt.color\n\t        };\n\t        tooltip.data(evt).hidden(false);\n\t    });\n\t\n\t    bars.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t        tooltip.hidden(true);\n\t    });\n\t\n\t    bars.dispatch.on('elementMousemove.tooltip', function(evt) {\n\t        tooltip();\n\t    });\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    // expose chart's sub-components\n\t    chart.dispatch = dispatch;\n\t    chart.bars = bars;\n\t    chart.legend = legend;\n\t    chart.xAxis = xAxis;\n\t    chart.yAxis = yAxis;\n\t    chart.interactiveLayer = interactiveLayer;\n\t    chart.tooltip = tooltip;\n\t\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:      {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\t        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n\t        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n\t        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n\t        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n\t        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            if (_.top !== undefined) {\n\t                margin.top = _.top;\n\t                marginTop = _.top;\n\t            }\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t            legend.color(color);\n\t            bars.color(color);\n\t        }},\n\t        duration:    {get: function(){return transitionDuration;}, set: function(_){\n\t            transitionDuration=_;\n\t            renderWatch.reset(transitionDuration);\n\t            yAxis.duration(transitionDuration);\n\t            xAxis.duration(transitionDuration);\n\t        }},\n\t        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n\t            rightAlignYAxis = _;\n\t            yAxis.orient( (_) ? 'right' : 'left');\n\t        }},\n\t        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n\t            useInteractiveGuideline = _;\n\t            if (_ === true) {\n\t                chart.interactive(false);\n\t            }\n\t        }}\n\t    });\n\t\n\t    nv.utils.inheritOptions(chart, bars);\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t};\n\t\n\t\n\t// ohlcChart is just a historical chart with ohlc bars and some tweaks\n\tnv.models.ohlcBarChart = function() {\n\t    var chart = nv.models.historicalBarChart(nv.models.ohlcBar());\n\t\n\t    // special default tooltip since we show multiple values per x\n\t    chart.useInteractiveGuideline(true);\n\t    chart.interactiveLayer.tooltip.contentGenerator(function(data) {\n\t        // we assume only one series exists for this chart\n\t        var d = data.series[0].data;\n\t        // match line colors as defined in nv.d3.css\n\t        var color = d.open < d.close ? \"2ca02c\" : \"d62728\";\n\t        return '' +\n\t            '<h3 style=\"color: #' + color + '\">' + data.value + '</h3>' +\n\t            '<table>' +\n\t            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +\n\t            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +\n\t            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +\n\t            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +\n\t            '</table>';\n\t    });\n\t    return chart;\n\t};\n\t\n\t// candlestickChart is just a historical chart with candlestick bars and some tweaks\n\tnv.models.candlestickBarChart = function() {\n\t    var chart = nv.models.historicalBarChart(nv.models.candlestickBar());\n\t\n\t    // special default tooltip since we show multiple values per x\n\t    chart.useInteractiveGuideline(true);\n\t    chart.interactiveLayer.tooltip.contentGenerator(function(data) {\n\t        // we assume only one series exists for this chart\n\t        var d = data.series[0].data;\n\t        // match line colors as defined in nv.d3.css\n\t        var color = d.open < d.close ? \"2ca02c\" : \"d62728\";\n\t        return '' +\n\t            '<h3 style=\"color: #' + color + '\">' + data.value + '</h3>' +\n\t            '<table>' +\n\t            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +\n\t            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +\n\t            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +\n\t            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +\n\t            '</table>';\n\t    });\n\t    return chart;\n\t};\n\tnv.models.legend = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n\t        , width = 400\n\t        , height = 20\n\t        , getKey = function(d) { return d.key }\n\t        , keyFormatter = function (d) { return d }\n\t        , color = nv.utils.getColor()\n\t        , maxKeyLength = 20 //default value for key lengths\n\t        , align = true\n\t        , padding = 32 //define how much space between legend items. - recommend 32 for furious version\n\t        , rightAlign = true\n\t        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.\n\t        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)\n\t        , expanded = false\n\t        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')\n\t        , vers = 'classic' //Options are \"classic\" and \"furious\"\n\t        ;\n\t\n\t    function chart(selection) {\n\t        selection.each(function(data) {\n\t            var availableWidth = width - margin.left - margin.right,\n\t                container = d3.select(this);\n\t            nv.utils.initSVG(container);\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-legend').data([data]);\n\t            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');\n\t            var g = wrap.select('g');\n\t\n\t            if (rightAlign)\n\t                wrap.attr('transform', 'translate(' + (- margin.right) + ',' + margin.top + ')');\n\t            else\n\t                wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            var series = g.selectAll('.nv-series')\n\t                .data(function(d) {\n\t                    if(vers != 'furious') return d;\n\t\n\t                    return d.filter(function(n) {\n\t                        return expanded ? true : !n.disengaged;\n\t                    });\n\t                });\n\t\n\t            var seriesEnter = series.enter().append('g').attr('class', 'nv-series');\n\t            var seriesShape;\n\t\n\t            var versPadding;\n\t            switch(vers) {\n\t                case 'furious' :\n\t                    versPadding = 23;\n\t                    break;\n\t                case 'classic' :\n\t                    versPadding = 20;\n\t            }\n\t\n\t            if(vers == 'classic') {\n\t                seriesEnter.append('circle')\n\t                    .style('stroke-width', 2)\n\t                    .attr('class','nv-legend-symbol')\n\t                    .attr('r', 5);\n\t\n\t                seriesShape = series.select('.nv-legend-symbol');\n\t            } else if (vers == 'furious') {\n\t                seriesEnter.append('rect')\n\t                    .style('stroke-width', 2)\n\t                    .attr('class','nv-legend-symbol')\n\t                    .attr('rx', 3)\n\t                    .attr('ry', 3);\n\t                seriesShape = series.select('.nv-legend-symbol');\n\t\n\t                seriesEnter.append('g')\n\t                    .attr('class', 'nv-check-box')\n\t                    .property('innerHTML','<path d=\"M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z\" class=\"nv-box\"></path><path d=\"M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511\" class=\"nv-check\"></path>')\n\t                    .attr('transform', 'translate(-10,-8)scale(0.5)');\n\t\n\t                var seriesCheckbox = series.select('.nv-check-box');\n\t\n\t                seriesCheckbox.each(function(d,i) {\n\t                    d3.select(this).selectAll('path')\n\t                        .attr('stroke', setTextColor(d,i));\n\t                });\n\t            }\n\t\n\t            seriesEnter.append('text')\n\t                .attr('text-anchor', 'start')\n\t                .attr('class','nv-legend-text')\n\t                .attr('dy', '.32em')\n\t                .attr('dx', '8');\n\t\n\t            var seriesText = series.select('text.nv-legend-text');\n\t\n\t            series\n\t                .on('mouseover', function(d,i) {\n\t                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects\n\t                })\n\t                .on('mouseout', function(d,i) {\n\t                    dispatch.legendMouseout(d,i);\n\t                })\n\t                .on('click', function(d,i) {\n\t                    dispatch.legendClick(d,i);\n\t                    // make sure we re-get data in case it was modified\n\t                    var data = series.data();\n\t                    if (updateState) {\n\t                        if(vers =='classic') {\n\t                            if (radioButtonMode) {\n\t                                //Radio button mode: set every series to disabled,\n\t                                //  and enable the clicked series.\n\t                                data.forEach(function(series) { series.disabled = true});\n\t                                d.disabled = false;\n\t                            }\n\t                            else {\n\t                                d.disabled = !d.disabled;\n\t                                if (data.every(function(series) { return series.disabled})) {\n\t                                    //the default behavior of NVD3 legends is, if every single series\n\t                                    // is disabled, turn all series' back on.\n\t                                    data.forEach(function(series) { series.disabled = false});\n\t                                }\n\t                            }\n\t                        } else if(vers == 'furious') {\n\t                            if(expanded) {\n\t                                d.disengaged = !d.disengaged;\n\t                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;\n\t                                d.disabled = d.disengaged || d.userDisabled;\n\t                            } else if (!expanded) {\n\t                                d.disabled = !d.disabled;\n\t                                d.userDisabled = d.disabled;\n\t                                var engaged = data.filter(function(d) { return !d.disengaged; });\n\t                                if (engaged.every(function(series) { return series.userDisabled })) {\n\t                                    //the default behavior of NVD3 legends is, if every single series\n\t                                    // is disabled, turn all series' back on.\n\t                                    data.forEach(function(series) {\n\t                                        series.disabled = series.userDisabled = false;\n\t                                    });\n\t                                }\n\t                            }\n\t                        }\n\t                        dispatch.stateChange({\n\t                            disabled: data.map(function(d) { return !!d.disabled }),\n\t                            disengaged: data.map(function(d) { return !!d.disengaged })\n\t                        });\n\t\n\t                    }\n\t                })\n\t                .on('dblclick', function(d,i) {\n\t                    if(vers == 'furious' && expanded) return;\n\t                    dispatch.legendDblclick(d,i);\n\t                    if (updateState) {\n\t                        // make sure we re-get data in case it was modified\n\t                        var data = series.data();\n\t                        //the default behavior of NVD3 legends, when double clicking one,\n\t                        // is to set all other series' to false, and make the double clicked series enabled.\n\t                        data.forEach(function(series) {\n\t                            series.disabled = true;\n\t                            if(vers == 'furious') series.userDisabled = series.disabled;\n\t                        });\n\t                        d.disabled = false;\n\t                        if(vers == 'furious') d.userDisabled = d.disabled;\n\t                        dispatch.stateChange({\n\t                            disabled: data.map(function(d) { return !!d.disabled })\n\t                        });\n\t                    }\n\t                });\n\t\n\t            series.classed('nv-disabled', function(d) { return d.userDisabled });\n\t            series.exit().remove();\n\t\n\t            seriesText\n\t                .attr('fill', setTextColor)\n\t                .text(function (d) { return keyFormatter(getKey(d)) });\n\t\n\t            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)\n\t            // NEW ALIGNING CODE, TODO: clean up\n\t            var legendWidth = 0;\n\t            if (align) {\n\t\n\t                var seriesWidths = [];\n\t                series.each(function(d,i) {\n\t                    var legendText;\n\t                    if (keyFormatter(getKey(d)) && keyFormatter(getKey(d)).length > maxKeyLength) {\n\t                        var trimmedKey = keyFormatter(getKey(d)).substring(0, maxKeyLength);\n\t                        legendText = d3.select(this).select('text').text(trimmedKey + \"...\");\n\t                        d3.select(this).append(\"svg:title\").text(keyFormatter(getKey(d)));\n\t                    } else {\n\t                        legendText = d3.select(this).select('text');\n\t                    }\n\t                    var nodeTextLength;\n\t                    try {\n\t                        nodeTextLength = legendText.node().getComputedTextLength();\n\t                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead\n\t                        if(nodeTextLength <= 0) throw Error();\n\t                    }\n\t                    catch(e) {\n\t                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);\n\t                    }\n\t\n\t                    seriesWidths.push(nodeTextLength + padding);\n\t                });\n\t\n\t                var seriesPerRow = 0;\n\t                var columnWidths = [];\n\t                legendWidth = 0;\n\t\n\t                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {\n\t                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];\n\t                    legendWidth += seriesWidths[seriesPerRow++];\n\t                }\n\t                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row\n\t\n\t                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {\n\t                    columnWidths = [];\n\t                    seriesPerRow--;\n\t\n\t                    for (var k = 0; k < seriesWidths.length; k++) {\n\t                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )\n\t                            columnWidths[k % seriesPerRow] = seriesWidths[k];\n\t                    }\n\t\n\t                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {\n\t                        return prev + cur;\n\t                    });\n\t                }\n\t\n\t                var xPositions = [];\n\t                for (var i = 0, curX = 0; i < seriesPerRow; i++) {\n\t                    xPositions[i] = curX;\n\t                    curX += columnWidths[i];\n\t                }\n\t\n\t                series\n\t                    .attr('transform', function(d, i) {\n\t                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';\n\t                    });\n\t\n\t                //position legend as far right as possible within the total width\n\t                if (rightAlign) {\n\t                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');\n\t                }\n\t                else {\n\t                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');\n\t                }\n\t\n\t                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);\n\t\n\t            } else {\n\t\n\t                var ypos = 5,\n\t                    newxpos = 5,\n\t                    maxwidth = 0,\n\t                    xpos;\n\t                series\n\t                    .attr('transform', function(d, i) {\n\t                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;\n\t                        xpos = newxpos;\n\t\n\t                        if (width < margin.left + margin.right + xpos + length) {\n\t                            newxpos = xpos = 5;\n\t                            ypos += versPadding;\n\t                        }\n\t\n\t                        newxpos += length;\n\t                        if (newxpos > maxwidth) maxwidth = newxpos;\n\t\n\t                        if(legendWidth < xpos + maxwidth) {\n\t                            legendWidth = xpos + maxwidth;\n\t                        }\n\t                        return 'translate(' + xpos + ',' + ypos + ')';\n\t                    });\n\t\n\t                //position legend as far right as possible within the total width\n\t                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');\n\t\n\t                height = margin.top + margin.bottom + ypos + 15;\n\t            }\n\t\n\t            if(vers == 'furious') {\n\t                // Size rectangles after text is placed\n\t                seriesShape\n\t                    .attr('width', function(d,i) {\n\t                        return seriesText[0][i].getComputedTextLength() + 27;\n\t                    })\n\t                    .attr('height', 18)\n\t                    .attr('y', -9)\n\t                    .attr('x', -15);\n\t\n\t                // The background for the expanded legend (UI)\n\t                gEnter.insert('rect',':first-child')\n\t                    .attr('class', 'nv-legend-bg')\n\t                    .attr('fill', '#eee')\n\t                    // .attr('stroke', '#444')\n\t                    .attr('opacity',0);\n\t\n\t                var seriesBG = g.select('.nv-legend-bg');\n\t\n\t                seriesBG\n\t                .transition().duration(300)\n\t                    .attr('x', -versPadding )\n\t                    .attr('width', legendWidth + versPadding - 12)\n\t                    .attr('height', height + 10)\n\t                    .attr('y', -margin.top - 10)\n\t                    .attr('opacity', expanded ? 1 : 0);\n\t\n\t\n\t            }\n\t\n\t            seriesShape\n\t                .style('fill', setBGColor)\n\t                .style('fill-opacity', setBGOpacity)\n\t                .style('stroke', setBGColor);\n\t        });\n\t\n\t        function setTextColor(d,i) {\n\t            if(vers != 'furious') return '#000';\n\t            if(expanded) {\n\t                return d.disengaged ? '#000' : '#fff';\n\t            } else if (!expanded) {\n\t                if(!d.color) d.color = color(d,i);\n\t                return !!d.disabled ? d.color : '#fff';\n\t            }\n\t        }\n\t\n\t        function setBGColor(d,i) {\n\t            if(expanded && vers == 'furious') {\n\t                return d.disengaged ? '#eee' : d.color || color(d,i);\n\t            } else {\n\t                return d.color || color(d,i);\n\t            }\n\t        }\n\t\n\t\n\t        function setBGOpacity(d,i) {\n\t            if(expanded && vers == 'furious') {\n\t                return 1;\n\t            } else {\n\t                return !!d.disabled ? 0 : 1;\n\t            }\n\t        }\n\t\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    chart.dispatch = dispatch;\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:          {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:         {get: function(){return height;}, set: function(_){height=_;}},\n\t        key:            {get: function(){return getKey;}, set: function(_){getKey=_;}},\n\t        keyFormatter:   {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n\t        align:          {get: function(){return align;}, set: function(_){align=_;}},\n\t        maxKeyLength:   {get: function(){return maxKeyLength;}, set: function(_){maxKeyLength=_;}},\n\t        rightAlign:     {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},\n\t        padding:        {get: function(){return padding;}, set: function(_){padding=_;}},\n\t        updateState:    {get: function(){return updateState;}, set: function(_){updateState=_;}},\n\t        radioButtonMode:{get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},\n\t        expanded:       {get: function(){return expanded;}, set: function(_){expanded=_;}},\n\t        vers:           {get: function(){return vers;}, set: function(_){vers=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t        }}\n\t    });\n\t\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t};\n\t\n\tnv.models.line = function() {\n\t    \"use strict\";\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var  scatter = nv.models.scatter()\n\t        ;\n\t\n\t    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t        , width = 960\n\t        , height = 500\n\t        , container = null\n\t        , strokeWidth = 1.5\n\t        , color = nv.utils.defaultColor() // a function that returns a color\n\t        , getX = function(d) { return d.x } // accessor to get the x value from a data point\n\t        , getY = function(d) { return d.y } // accessor to get the y value from a data point\n\t        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined\n\t        , isArea = function(d) { return d.area } // decides if a line is an area or just a line\n\t        , clipEdge = false // if true, masks lines within x and y scale\n\t        , x //can be accessed via chart.xScale()\n\t        , y //can be accessed via chart.yScale()\n\t        , interpolate = \"linear\" // controls the line interpolation\n\t        , duration = 250\n\t        , dispatch = d3.dispatch('elementClick', 'elementMouseover', 'elementMouseout', 'renderEnd')\n\t        ;\n\t\n\t    scatter\n\t        .pointSize(16) // default size\n\t        .pointDomain([16,256]) //set to speed up calculation, needs to be unset if there is a custom size accessor\n\t    ;\n\t\n\t    //============================================================\n\t\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var x0, y0 //used to store previous scales\n\t        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n\t        ;\n\t\n\t    //============================================================\n\t\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        renderWatch.models(scatter);\n\t        selection.each(function(data) {\n\t            container = d3.select(this);\n\t            var availableWidth = nv.utils.availableWidth(width, container, margin),\n\t                availableHeight = nv.utils.availableHeight(height, container, margin);\n\t            nv.utils.initSVG(container);\n\t\n\t            // Setup Scales\n\t            x = scatter.xScale();\n\t            y = scatter.yScale();\n\t\n\t            x0 = x0 || x;\n\t            y0 = y0 || y;\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap.nv-line').data([data]);\n\t            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-line');\n\t            var defsEnter = wrapEnter.append('defs');\n\t            var gEnter = wrapEnter.append('g');\n\t            var g = wrap.select('g');\n\t\n\t            gEnter.append('g').attr('class', 'nv-groups');\n\t            gEnter.append('g').attr('class', 'nv-scatterWrap');\n\t\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            scatter\n\t                .width(availableWidth)\n\t                .height(availableHeight);\n\t\n\t            var scatterWrap = wrap.select('.nv-scatterWrap');\n\t            scatterWrap.call(scatter);\n\t\n\t            defsEnter.append('clipPath')\n\t                .attr('id', 'nv-edge-clip-' + scatter.id())\n\t                .append('rect');\n\t\n\t            wrap.select('#nv-edge-clip-' + scatter.id() + ' rect')\n\t                .attr('width', availableWidth)\n\t                .attr('height', (availableHeight > 0) ? availableHeight : 0);\n\t\n\t            g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n\t            scatterWrap\n\t                .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n\t\n\t            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n\t                .data(function(d) { return d }, function(d) { return d.key });\n\t            groups.enter().append('g')\n\t                .style('stroke-opacity', 1e-6)\n\t                .style('stroke-width', function(d) { return d.strokeWidth || strokeWidth })\n\t                .style('fill-opacity', 1e-6);\n\t\n\t            groups.exit().remove();\n\t\n\t            groups\n\t                .attr('class', function(d,i) {\n\t                    return (d.classed || '') + ' nv-group nv-series-' + i;\n\t                })\n\t                .classed('hover', function(d) { return d.hover })\n\t                .style('fill', function(d,i){ return color(d, i) })\n\t                .style('stroke', function(d,i){ return color(d, i)});\n\t            groups.watchTransition(renderWatch, 'line: groups')\n\t                .style('stroke-opacity', 1)\n\t                .style('fill-opacity', function(d) { return d.fillOpacity || .5});\n\t\n\t            var areaPaths = groups.selectAll('path.nv-area')\n\t                .data(function(d) { return isArea(d) ? [d] : [] }); // this is done differently than lines because I need to check if series is an area\n\t            areaPaths.enter().append('path')\n\t                .attr('class', 'nv-area')\n\t                .attr('d', function(d) {\n\t                    return d3.svg.area()\n\t                        .interpolate(interpolate)\n\t                        .defined(defined)\n\t                        .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n\t                        .y0(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n\t                        .y1(function(d,i) { return y0( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n\t                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n\t                        .apply(this, [d.values])\n\t                });\n\t            groups.exit().selectAll('path.nv-area')\n\t                .remove();\n\t\n\t            areaPaths.watchTransition(renderWatch, 'line: areaPaths')\n\t                .attr('d', function(d) {\n\t                    return d3.svg.area()\n\t                        .interpolate(interpolate)\n\t                        .defined(defined)\n\t                        .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n\t                        .y0(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n\t                        .y1(function(d,i) { return y( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n\t                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n\t                        .apply(this, [d.values])\n\t                });\n\t\n\t            var linePaths = groups.selectAll('path.nv-line')\n\t                .data(function(d) { return [d.values] });\n\t\n\t            linePaths.enter().append('path')\n\t                .attr('class', 'nv-line')\n\t                .attr('d',\n\t                    d3.svg.line()\n\t                    .interpolate(interpolate)\n\t                    .defined(defined)\n\t                    .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n\t                    .y(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n\t            );\n\t\n\t            linePaths.watchTransition(renderWatch, 'line: linePaths')\n\t                .attr('d',\n\t                    d3.svg.line()\n\t                    .interpolate(interpolate)\n\t                    .defined(defined)\n\t                    .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n\t                    .y(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n\t            );\n\t\n\t            //store old scales for use in transitions on update\n\t            x0 = x.copy();\n\t            y0 = y.copy();\n\t        });\n\t        renderWatch.renderEnd('line immediate');\n\t        return chart;\n\t    }\n\t\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    chart.dispatch = dispatch;\n\t    chart.scatter = scatter;\n\t    // Pass through events\n\t    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });\n\t    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });\n\t    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });\n\t\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:      {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\t        defined: {get: function(){return defined;}, set: function(_){defined=_;}},\n\t        interpolate:      {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n\t        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        duration: {get: function(){return duration;}, set: function(_){\n\t            duration = _;\n\t            renderWatch.reset(duration);\n\t            scatter.duration(duration);\n\t        }},\n\t        isArea: {get: function(){return isArea;}, set: function(_){\n\t            isArea = d3.functor(_);\n\t        }},\n\t        x: {get: function(){return getX;}, set: function(_){\n\t            getX = _;\n\t            scatter.x(_);\n\t        }},\n\t        y: {get: function(){return getY;}, set: function(_){\n\t            getY = _;\n\t            scatter.y(_);\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t            scatter.color(color);\n\t        }}\n\t    });\n\t\n\t    nv.utils.inheritOptions(chart, scatter);\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t};\n\tnv.models.lineChart = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var lines = nv.models.line()\n\t        , xAxis = nv.models.axis()\n\t        , yAxis = nv.models.axis()\n\t        , legend = nv.models.legend()\n\t        , interactiveLayer = nv.interactiveGuideline()\n\t        , tooltip = nv.models.tooltip()\n\t        , focus = nv.models.focus(nv.models.line())\n\t        ;\n\t\n\t    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n\t        , marginTop = null\n\t        , color = nv.utils.defaultColor()\n\t        , width = null\n\t        , height = null\n\t        , showLegend = true\n\t        , legendPosition = 'top'\n\t        , showXAxis = true\n\t        , showYAxis = true\n\t        , rightAlignYAxis = false\n\t        , useInteractiveGuideline = false\n\t        , x\n\t        , y\n\t        , focusEnable = false\n\t        , state = nv.utils.state()\n\t        , defaultState = null\n\t        , noData = null\n\t        , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState', 'renderEnd')\n\t        , duration = 250\n\t        ;\n\t\n\t    // set options on sub-objects for this chart\n\t    xAxis.orient('bottom').tickPadding(7);\n\t    yAxis.orient(rightAlignYAxis ? 'right' : 'left');\n\t\n\t    lines.clipEdge(true).duration(0);\n\t\n\t    tooltip.valueFormatter(function(d, i) {\n\t        return yAxis.tickFormat()(d, i);\n\t    }).headerFormatter(function(d, i) {\n\t        return xAxis.tickFormat()(d, i);\n\t    });\n\t\n\t    interactiveLayer.tooltip.valueFormatter(function(d, i) {\n\t        return yAxis.tickFormat()(d, i);\n\t    }).headerFormatter(function(d, i) {\n\t        return xAxis.tickFormat()(d, i);\n\t    });\n\t\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\t\n\t    var stateGetter = function(data) {\n\t        return function(){\n\t            return {\n\t                active: data.map(function(d) { return !d.disabled; })\n\t            };\n\t        };\n\t    };\n\t\n\t    var stateSetter = function(data) {\n\t        return function(state) {\n\t            if (state.active !== undefined)\n\t                data.forEach(function(series,i) {\n\t                    series.disabled = !state.active[i];\n\t                });\n\t        };\n\t    };\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        renderWatch.models(lines);\n\t        if (showXAxis) renderWatch.models(xAxis);\n\t        if (showYAxis) renderWatch.models(yAxis);\n\t\n\t        selection.each(function(data) {\n\t            var container = d3.select(this);\n\t            nv.utils.initSVG(container);\n\t            var availableWidth = nv.utils.availableWidth(width, container, margin),\n\t                availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n\t            chart.update = function() {\n\t                if( duration === 0 ) {\n\t                    container.call( chart );\n\t                } else {\n\t                    container.transition().duration(duration).call(chart);\n\t                }\n\t            };\n\t            chart.container = this;\n\t\n\t            state\n\t                .setter(stateSetter(data), chart.update)\n\t                .getter(stateGetter(data))\n\t                .update();\n\t\n\t            // DEPRECATED set state.disabled\n\t            state.disabled = data.map(function(d) { return !!d.disabled; });\n\t\n\t            if (!defaultState) {\n\t                var key;\n\t                defaultState = {};\n\t                for (key in state) {\n\t                    if (state[key] instanceof Array)\n\t                        defaultState[key] = state[key].slice(0);\n\t                    else\n\t                        defaultState[key] = state[key];\n\t                }\n\t            }\n\t\n\t            // Display noData message if there's nothing to show.\n\t            if (!data || !data.length || !data.filter(function(d) { return d.values.length; }).length) {\n\t                nv.utils.noData(chart, container);\n\t                return chart;\n\t            } else {\n\t                container.selectAll('.nv-noData').remove();\n\t            }\n\t\n\t            /* Update `main' graph on brush update. */\n\t            focus.dispatch.on(\"onBrush\", function(extent) {\n\t                onBrush(extent);\n\t            });\n\t\n\t            // Setup Scales\n\t            x = lines.xScale();\n\t            y = lines.yScale();\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap.nv-lineChart').data([data]);\n\t            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineChart').append('g');\n\t            var g = wrap.select('g');\n\t\n\t            gEnter.append('g').attr('class', 'nv-legendWrap');\n\t\n\t            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n\t            focusEnter.append('g').attr('class', 'nv-background').append('rect');\n\t            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n\t            focusEnter.append('g').attr('class', 'nv-y nv-axis');\n\t            focusEnter.append('g').attr('class', 'nv-linesWrap');\n\t            focusEnter.append('g').attr('class', 'nv-interactive');\n\t\n\t            var contextEnter = gEnter.append('g').attr('class', 'nv-focusWrap');\n\t\n\t            // Legend\n\t            if (!showLegend) {\n\t                g.select('.nv-legendWrap').selectAll('*').remove();\n\t            } else {\n\t                legend.width(availableWidth);\n\t\n\t                g.select('.nv-legendWrap')\n\t                    .datum(data)\n\t                    .call(legend);\n\t\n\t                if (legendPosition === 'bottom') {\n\t                    wrap.select('.nv-legendWrap')\n\t                        .attr('transform', 'translate(0,' + availableHeight +')');\n\t                } else if (legendPosition === 'top') {\n\t                    if (!marginTop && legend.height() !== margin.top) {\n\t                        margin.top = legend.height();\n\t                        availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n\t                    }\n\t\n\t                    wrap.select('.nv-legendWrap')\n\t                        .attr('transform', 'translate(0,' + (-margin.top) +')');\n\t                }\n\t            }\n\t\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            if (rightAlignYAxis) {\n\t                g.select(\".nv-y.nv-axis\")\n\t                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t            }\n\t\n\t            //Set up interactive layer\n\t            if (useInteractiveGuideline) {\n\t                interactiveLayer\n\t                    .width(availableWidth)\n\t                    .height(availableHeight)\n\t                    .margin({left:margin.left, top:margin.top})\n\t                    .svgContainer(container)\n\t                    .xScale(x);\n\t                wrap.select(\".nv-interactive\").call(interactiveLayer);\n\t            }\n\t\n\t            g.select('.nv-focus .nv-background rect')\n\t                .attr('width', availableWidth)\n\t                .attr('height', availableHeight);\n\t\n\t            lines\n\t                .width(availableWidth)\n\t                .height(availableHeight)\n\t                .color(data.map(function(d,i) {\n\t                    return d.color || color(d, i);\n\t                }).filter(function(d,i) { return !data[i].disabled; }));\n\t\n\t            var linesWrap = g.select('.nv-linesWrap')\n\t                .datum(data.filter(function(d) { return !d.disabled; }));\n\t\n\t\n\t            // Setup Main (Focus) Axes\n\t            if (showXAxis) {\n\t                xAxis\n\t                    .scale(x)\n\t                    ._ticks(nv.utils.calcTicksX(availableWidth/100, data) )\n\t                    .tickSize(-availableHeight, 0);\n\t            }\n\t\n\t            if (showYAxis) {\n\t                yAxis\n\t                    .scale(y)\n\t                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n\t                    .tickSize( -availableWidth, 0);\n\t            }\n\t\n\t            //============================================================\n\t            // Update Axes\n\t            //============================================================\n\t            function updateXAxis() {\n\t              if(showXAxis) {\n\t                g.select('.nv-focus .nv-x.nv-axis')\n\t                  .transition()\n\t                  .duration(duration)\n\t                  .call(xAxis)\n\t                ;\n\t              }\n\t            }\n\t\n\t            function updateYAxis() {\n\t              if(showYAxis) {\n\t                g.select('.nv-focus .nv-y.nv-axis')\n\t                  .transition()\n\t                  .duration(duration)\n\t                  .call(yAxis)\n\t                ;\n\t              }\n\t            }\n\t\n\t            g.select('.nv-focus .nv-x.nv-axis')\n\t                .attr('transform', 'translate(0,' + availableHeight + ')');\n\t\n\t            //============================================================\n\t            // Update Focus\n\t            //============================================================\n\t            if(!focusEnable) {\n\t                linesWrap.call(lines);\n\t                updateXAxis();\n\t                updateYAxis();\n\t            } else {\n\t                focus.width(availableWidth);\n\t                g.select('.nv-focusWrap')\n\t                    .attr('transform', 'translate(0,' + ( availableHeight + margin.bottom + focus.margin().top) + ')')\n\t                    .datum(data.filter(function(d) { return !d.disabled; }))\n\t                    .call(focus);\n\t                var extent = focus.brush.empty() ? focus.xDomain() : focus.brush.extent();\n\t                if(extent !== null){\n\t                    onBrush(extent);\n\t                }\n\t            }\n\t            //============================================================\n\t            // Event Handling/Dispatching (in chart's scope)\n\t            //------------------------------------------------------------\n\t\n\t            legend.dispatch.on('stateChange', function(newState) {\n\t                for (var key in newState)\n\t                    state[key] = newState[key];\n\t                dispatch.stateChange(state);\n\t                chart.update();\n\t            });\n\t\n\t            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n\t                lines.clearHighlights();\n\t                var singlePoint, pointIndex, pointXLocation, allData = [];\n\t                data\n\t                    .filter(function(series, i) {\n\t                        series.seriesIndex = i;\n\t                        return !series.disabled && !series.disableTooltip;\n\t                    })\n\t                    .forEach(function(series,i) {\n\t                        var extent = focusEnable ? (focus.brush.empty() ? focus.xScale().domain() : focus.brush.extent()) : x.domain();\n\t                        var currentValues = series.values.filter(function(d,i) {\n\t                            // Checks if the x point is between the extents, handling case where extent[0] is greater than extent[1]\n\t                            // (e.g. x domain is manually set to reverse the x-axis)\n\t                            if(extent[0] <= extent[1]) {\n\t                                return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n\t                            } else {\n\t                                return lines.x()(d,i) >= extent[1] && lines.x()(d,i) <= extent[0];\n\t                            }\n\t                        });\n\t\n\t                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, lines.x());\n\t                        var point = currentValues[pointIndex];\n\t                        var pointYValue = chart.y()(point, pointIndex);\n\t                        if (pointYValue !== null) {\n\t                            lines.highlightPoint(i, pointIndex, true);\n\t                        }\n\t                        if (point === undefined) return;\n\t                        if (singlePoint === undefined) singlePoint = point;\n\t                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n\t                        allData.push({\n\t                            key: series.key,\n\t                            value: pointYValue,\n\t                            color: color(series,series.seriesIndex),\n\t                            data: point\n\t                        });\n\t                    });\n\t                //Highlight the tooltip entry based on which point the mouse is closest to.\n\t                if (allData.length > 2) {\n\t                    var yValue = chart.yScale().invert(e.mouseY);\n\t                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n\t                    var threshold = 0.03 * domainExtent;\n\t                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value;}),yValue,threshold);\n\t                    if (indexToHighlight !== null)\n\t                        allData[indexToHighlight].highlight = true;\n\t                }\n\t\n\t                var defaultValueFormatter = function(d,i) {\n\t                    return d == null ? \"N/A\" : yAxis.tickFormat()(d);\n\t                };\n\t\n\t                interactiveLayer.tooltip\n\t                    .valueFormatter(interactiveLayer.tooltip.valueFormatter() || defaultValueFormatter)\n\t                    .data({\n\t                        value: chart.x()( singlePoint,pointIndex ),\n\t                        index: pointIndex,\n\t                        series: allData\n\t                    })();\n\t\n\t                interactiveLayer.renderGuideLine(pointXLocation);\n\t\n\t            });\n\t\n\t            interactiveLayer.dispatch.on('elementClick', function(e) {\n\t                var pointXLocation, allData = [];\n\t\n\t                data.filter(function(series, i) {\n\t                    series.seriesIndex = i;\n\t                    return !series.disabled;\n\t                }).forEach(function(series) {\n\t                    var pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n\t                    var point = series.values[pointIndex];\n\t                    if (typeof point === 'undefined') return;\n\t                    if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n\t                    var yPos = chart.yScale()(chart.y()(point,pointIndex));\n\t                    allData.push({\n\t                        point: point,\n\t                        pointIndex: pointIndex,\n\t                        pos: [pointXLocation, yPos],\n\t                        seriesIndex: series.seriesIndex,\n\t                        series: series\n\t                    });\n\t                });\n\t\n\t                lines.dispatch.elementClick(allData);\n\t            });\n\t\n\t            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n\t                lines.clearHighlights();\n\t            });\n\t\n\t            dispatch.on('changeState', function(e) {\n\t                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n\t                    data.forEach(function(series,i) {\n\t                        series.disabled = e.disabled[i];\n\t                    });\n\t\n\t                    state.disabled = e.disabled;\n\t                }\n\t                chart.update();\n\t            });\n\t\n\t            //============================================================\n\t            // Functions\n\t            //------------------------------------------------------------\n\t\n\t            // Taken from crossfilter (http://square.github.com/crossfilter/)\n\t            function resizePath(d) {\n\t                var e = +(d == 'e'),\n\t                    x = e ? 1 : -1,\n\t                    y = availableHeight / 3;\n\t                return 'M' + (0.5 * x) + ',' + y\n\t                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n\t                    + 'V' + (2 * y - 6)\n\t                    + 'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y)\n\t                    + 'Z'\n\t                    + 'M' + (2.5 * x) + ',' + (y + 8)\n\t                    + 'V' + (2 * y - 8)\n\t                    + 'M' + (4.5 * x) + ',' + (y + 8)\n\t                    + 'V' + (2 * y - 8);\n\t            }\n\t\n\t            function onBrush(extent) {\n\t                // Update Main (Focus)\n\t                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n\t                    .datum(\n\t                    data.filter(function(d) { return !d.disabled; })\n\t                        .map(function(d,i) {\n\t                            return {\n\t                                key: d.key,\n\t                                area: d.area,\n\t                                classed: d.classed,\n\t                                values: d.values.filter(function(d,i) {\n\t                                    return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n\t                                }),\n\t                                disableTooltip: d.disableTooltip\n\t                            };\n\t                        })\n\t                );\n\t                focusLinesWrap.transition().duration(duration).call(lines);\n\t\n\t                // Update Main (Focus) Axes\n\t                updateXAxis();\n\t                updateYAxis();\n\t            }\n\t        });\n\t\n\t        renderWatch.renderEnd('lineChart immediate');\n\t        return chart;\n\t    }\n\t\n\t\n\t    //============================================================\n\t    // Event Handling/Dispatching (out of chart's scope)\n\t    //------------------------------------------------------------\n\t\n\t    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n\t        if(!evt.series.disableTooltip){\n\t            tooltip.data(evt).hidden(false);\n\t        }\n\t    });\n\t\n\t    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t        tooltip.hidden(true);\n\t    });\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    // expose chart's sub-components\n\t    chart.dispatch = dispatch;\n\t    chart.lines = lines;\n\t    chart.legend = legend;\n\t    chart.focus = focus;\n\t    chart.xAxis = xAxis;\n\t    chart.x2Axis = focus.xAxis\n\t    chart.yAxis = yAxis;\n\t    chart.y2Axis = focus.yAxis\n\t    chart.interactiveLayer = interactiveLayer;\n\t    chart.tooltip = tooltip;\n\t    chart.state = state;\n\t    chart.dispatch = dispatch;\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:      {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\t        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n\t        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n\t        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n\t        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n\t        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n\t        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\t        // Focus options, mostly passed onto focus model.\n\t        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n\t        focusHeight:     {get: function(){return focus.height();}, set: function(_){focus.height(_);}},\n\t        focusShowAxisX:    {get: function(){return focus.showXAxis();}, set: function(_){focus.showXAxis(_);}},\n\t        focusShowAxisY:    {get: function(){return focus.showYAxis();}, set: function(_){focus.showYAxis(_);}},\n\t        brushExtent: {get: function(){return focus.brushExtent();}, set: function(_){focus.brushExtent(_);}},\n\t\n\t        // options that require extra logic in the setter\n\t        focusMargin: {get: function(){return focus.margin}, set: function(_){\n\t            if (_.top !== undefined) {\n\t                margin.top = _.top;\n\t                marginTop = _.top;\n\t            }\n\t            focus.margin.right  = _.right  !== undefined ? _.right  : focus.margin.right;\n\t            focus.margin.bottom = _.bottom !== undefined ? _.bottom : focus.margin.bottom;\n\t            focus.margin.left   = _.left   !== undefined ? _.left   : focus.margin.left;\n\t        }},\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        duration: {get: function(){return duration;}, set: function(_){\n\t            duration = _;\n\t            renderWatch.reset(duration);\n\t            lines.duration(duration);\n\t            focus.duration(duration);\n\t            xAxis.duration(duration);\n\t            yAxis.duration(duration);\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t            legend.color(color);\n\t            lines.color(color);\n\t            focus.color(color);\n\t        }},\n\t        interpolate: {get: function(){return lines.interpolate();}, set: function(_){\n\t            lines.interpolate(_);\n\t            focus.interpolate(_);\n\t        }},\n\t        xTickFormat: {get: function(){return xAxis.tickFormat();}, set: function(_){\n\t            xAxis.tickFormat(_);\n\t            focus.xTickFormat(_);\n\t        }},\n\t        yTickFormat: {get: function(){return yAxis.tickFormat();}, set: function(_){\n\t            yAxis.tickFormat(_);\n\t            focus.yTickFormat(_);\n\t        }},\n\t        x: {get: function(){return lines.x();}, set: function(_){\n\t            lines.x(_);\n\t            focus.x(_);\n\t        }},\n\t        y: {get: function(){return lines.y();}, set: function(_){\n\t            lines.y(_);\n\t            focus.y(_);\n\t        }},\n\t        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n\t            rightAlignYAxis = _;\n\t            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n\t        }},\n\t        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n\t            useInteractiveGuideline = _;\n\t            if (useInteractiveGuideline) {\n\t                lines.interactive(false);\n\t                lines.useVoronoi(false);\n\t            }\n\t        }}\n\t    });\n\t\n\t    nv.utils.inheritOptions(chart, lines);\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t};\n\t\n\tnv.models.lineWithFocusChart = function() {\n\t  return nv.models.lineChart()\n\t    .margin({ bottom: 30 })\n\t    .focusEnable( true );\n\t};\n\tnv.models.linePlusBarChart = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var lines = nv.models.line()\n\t        , lines2 = nv.models.line()\n\t        , bars = nv.models.historicalBar()\n\t        , bars2 = nv.models.historicalBar()\n\t        , xAxis = nv.models.axis()\n\t        , x2Axis = nv.models.axis()\n\t        , y1Axis = nv.models.axis()\n\t        , y2Axis = nv.models.axis()\n\t        , y3Axis = nv.models.axis()\n\t        , y4Axis = nv.models.axis()\n\t        , legend = nv.models.legend()\n\t        , brush = d3.svg.brush()\n\t        , tooltip = nv.models.tooltip()\n\t        ;\n\t\n\t    var margin = {top: 30, right: 30, bottom: 30, left: 60}\n\t        , marginTop = null\n\t        , margin2 = {top: 0, right: 30, bottom: 20, left: 60}\n\t        , width = null\n\t        , height = null\n\t        , getX = function(d) { return d.x }\n\t        , getY = function(d) { return d.y }\n\t        , color = nv.utils.defaultColor()\n\t        , showLegend = true\n\t        , focusEnable = true\n\t        , focusShowAxisY = false\n\t        , focusShowAxisX = true\n\t        , focusHeight = 50\n\t        , extent\n\t        , brushExtent = null\n\t        , x\n\t        , x2\n\t        , y1\n\t        , y2\n\t        , y3\n\t        , y4\n\t        , noData = null\n\t        , dispatch = d3.dispatch('brush', 'stateChange', 'changeState')\n\t        , transitionDuration = 0\n\t        , state = nv.utils.state()\n\t        , defaultState = null\n\t        , legendLeftAxisHint = ' (left axis)'\n\t        , legendRightAxisHint = ' (right axis)'\n\t        , switchYAxisOrder = false\n\t        ;\n\t\n\t    lines.clipEdge(true);\n\t    lines2.interactive(false);\n\t    // We don't want any points emitted for the focus chart's scatter graph.\n\t    lines2.pointActive(function(d) { return false });\n\t    xAxis.orient('bottom').tickPadding(5);\n\t    y1Axis.orient('left');\n\t    y2Axis.orient('right');\n\t    x2Axis.orient('bottom').tickPadding(5);\n\t    y3Axis.orient('left');\n\t    y4Axis.orient('right');\n\t\n\t    tooltip.headerEnabled(true).headerFormatter(function(d, i) {\n\t        return xAxis.tickFormat()(d, i);\n\t    });\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var getBarsAxis = function() {\n\t        return switchYAxisOrder\n\t            ? { main: y2Axis, focus: y4Axis }\n\t            : { main: y1Axis, focus: y3Axis }\n\t    }\n\t\n\t    var getLinesAxis = function() {\n\t        return switchYAxisOrder\n\t            ? { main: y1Axis, focus: y3Axis }\n\t            : { main: y2Axis, focus: y4Axis }\n\t    }\n\t\n\t    var stateGetter = function(data) {\n\t        return function(){\n\t            return {\n\t                active: data.map(function(d) { return !d.disabled })\n\t            };\n\t        }\n\t    };\n\t\n\t    var stateSetter = function(data) {\n\t        return function(state) {\n\t            if (state.active !== undefined)\n\t                data.forEach(function(series,i) {\n\t                    series.disabled = !state.active[i];\n\t                });\n\t        }\n\t    };\n\t\n\t    var allDisabled = function(data) {\n\t      return data.every(function(series) {\n\t        return series.disabled;\n\t      });\n\t    }\n\t\n\t    function chart(selection) {\n\t        selection.each(function(data) {\n\t            var container = d3.select(this),\n\t                that = this;\n\t            nv.utils.initSVG(container);\n\t            var availableWidth = nv.utils.availableWidth(width, container, margin),\n\t                availableHeight1 = nv.utils.availableHeight(height, container, margin)\n\t                    - (focusEnable ? focusHeight : 0),\n\t                availableHeight2 = focusHeight - margin2.top - margin2.bottom;\n\t\n\t            chart.update = function() { container.transition().duration(transitionDuration).call(chart); };\n\t            chart.container = this;\n\t\n\t            state\n\t                .setter(stateSetter(data), chart.update)\n\t                .getter(stateGetter(data))\n\t                .update();\n\t\n\t            // DEPRECATED set state.disableddisabled\n\t            state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t            if (!defaultState) {\n\t                var key;\n\t                defaultState = {};\n\t                for (key in state) {\n\t                    if (state[key] instanceof Array)\n\t                        defaultState[key] = state[key].slice(0);\n\t                    else\n\t                        defaultState[key] = state[key];\n\t                }\n\t            }\n\t\n\t            // Display No Data message if there's nothing to show.\n\t            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t                nv.utils.noData(chart, container)\n\t                return chart;\n\t            } else {\n\t                container.selectAll('.nv-noData').remove();\n\t            }\n\t\n\t            // Setup Scales\n\t            var dataBars = data.filter(function(d) { return !d.disabled && d.bar });\n\t            var dataLines = data.filter(function(d) { return !d.bar }); // removed the !d.disabled clause here to fix Issue #240\n\t\n\t            if (dataBars.length && !switchYAxisOrder) {\n\t                x = bars.xScale();\n\t            } else {\n\t                x = lines.xScale();\n\t            }\n\t\n\t            x2 = x2Axis.scale();\n\t\n\t            // select the scales and series based on the position of the yAxis\n\t            y1 = switchYAxisOrder ? lines.yScale() : bars.yScale();\n\t            y2 = switchYAxisOrder ? bars.yScale() : lines.yScale();\n\t            y3 = switchYAxisOrder ? lines2.yScale() : bars2.yScale();\n\t            y4 = switchYAxisOrder ? bars2.yScale() : lines2.yScale();\n\t\n\t            var series1 = data\n\t                .filter(function(d) { return !d.disabled && (switchYAxisOrder ? !d.bar : d.bar) })\n\t                .map(function(d) {\n\t                    return d.values.map(function(d,i) {\n\t                        return { x: getX(d,i), y: getY(d,i) }\n\t                    })\n\t                });\n\t\n\t            var series2 = data\n\t                .filter(function(d) { return !d.disabled && (switchYAxisOrder ? d.bar : !d.bar) })\n\t                .map(function(d) {\n\t                    return d.values.map(function(d,i) {\n\t                        return { x: getX(d,i), y: getY(d,i) }\n\t                    })\n\t                });\n\t\n\t            x.range([0, availableWidth]);\n\t\n\t            x2  .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x } ))\n\t                .range([0, availableWidth]);\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap.nv-linePlusBar').data([data]);\n\t            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');\n\t            var g = wrap.select('g');\n\t\n\t            gEnter.append('g').attr('class', 'nv-legendWrap');\n\t\n\t            // this is the main chart\n\t            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n\t            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n\t            focusEnter.append('g').attr('class', 'nv-y1 nv-axis');\n\t            focusEnter.append('g').attr('class', 'nv-y2 nv-axis');\n\t            focusEnter.append('g').attr('class', 'nv-barsWrap');\n\t            focusEnter.append('g').attr('class', 'nv-linesWrap');\n\t\n\t            // context chart is where you can focus in\n\t            var contextEnter = gEnter.append('g').attr('class', 'nv-context');\n\t            contextEnter.append('g').attr('class', 'nv-x nv-axis');\n\t            contextEnter.append('g').attr('class', 'nv-y1 nv-axis');\n\t            contextEnter.append('g').attr('class', 'nv-y2 nv-axis');\n\t            contextEnter.append('g').attr('class', 'nv-barsWrap');\n\t            contextEnter.append('g').attr('class', 'nv-linesWrap');\n\t            contextEnter.append('g').attr('class', 'nv-brushBackground');\n\t            contextEnter.append('g').attr('class', 'nv-x nv-brush');\n\t\n\t            //============================================================\n\t            // Legend\n\t            //------------------------------------------------------------\n\t\n\t            if (!showLegend) {\n\t                g.select('.nv-legendWrap').selectAll('*').remove();\n\t            } else {\n\t                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;\n\t                var legendXPosition = legend.align() ? legendWidth : 0;\n\t\n\t                legend.width(legendWidth);\n\t\n\t                g.select('.nv-legendWrap')\n\t                    .datum(data.map(function(series) {\n\t                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n\t                        if(switchYAxisOrder) {\n\t                            series.key = series.originalKey + (series.bar ? legendRightAxisHint : legendLeftAxisHint);\n\t                        } else {\n\t                            series.key = series.originalKey + (series.bar ? legendLeftAxisHint : legendRightAxisHint);\n\t                        }\n\t                        return series;\n\t                    }))\n\t                    .call(legend);\n\t\n\t                if (!marginTop && legend.height() !== margin.top) {\n\t                    margin.top = legend.height();\n\t                    // FIXME: shouldn't this be \"- (focusEnabled ? focusHeight : 0)\"?\n\t                    availableHeight1 = nv.utils.availableHeight(height, container, margin) - focusHeight;\n\t                }\n\t\n\t                g.select('.nv-legendWrap')\n\t                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');\n\t            }\n\t\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            //============================================================\n\t            // Context chart (focus chart) components\n\t            //------------------------------------------------------------\n\t\n\t            // hide or show the focus context chart\n\t            g.select('.nv-context').style('display', focusEnable ? 'initial' : 'none');\n\t\n\t            bars2\n\t                .width(availableWidth)\n\t                .height(availableHeight2)\n\t                .color(data.map(function (d, i) {\n\t                    return d.color || color(d, i);\n\t                }).filter(function (d, i) {\n\t                    return !data[i].disabled && data[i].bar\n\t                }));\n\t            lines2\n\t                .width(availableWidth)\n\t                .height(availableHeight2)\n\t                .color(data.map(function (d, i) {\n\t                    return d.color || color(d, i);\n\t                }).filter(function (d, i) {\n\t                    return !data[i].disabled && !data[i].bar\n\t                }));\n\t\n\t            var bars2Wrap = g.select('.nv-context .nv-barsWrap')\n\t                .datum(dataBars.length ? dataBars : [\n\t                    {values: []}\n\t                ]);\n\t            var lines2Wrap = g.select('.nv-context .nv-linesWrap')\n\t                .datum(allDisabled(dataLines) ?\n\t                       [{values: []}] :\n\t                       dataLines.filter(function(dataLine) {\n\t                         return !dataLine.disabled;\n\t                       }));\n\t\n\t            g.select('.nv-context')\n\t                .attr('transform', 'translate(0,' + ( availableHeight1 + margin.bottom + margin2.top) + ')');\n\t\n\t            bars2Wrap.transition().call(bars2);\n\t            lines2Wrap.transition().call(lines2);\n\t\n\t            // context (focus chart) axis controls\n\t            if (focusShowAxisX) {\n\t                x2Axis\n\t                    ._ticks( nv.utils.calcTicksX(availableWidth / 100, data))\n\t                    .tickSize(-availableHeight2, 0);\n\t                g.select('.nv-context .nv-x.nv-axis')\n\t                    .attr('transform', 'translate(0,' + y3.range()[0] + ')');\n\t                g.select('.nv-context .nv-x.nv-axis').transition()\n\t                    .call(x2Axis);\n\t            }\n\t\n\t            if (focusShowAxisY) {\n\t                y3Axis\n\t                    .scale(y3)\n\t                    ._ticks( availableHeight2 / 36 )\n\t                    .tickSize( -availableWidth, 0);\n\t                y4Axis\n\t                    .scale(y4)\n\t                    ._ticks( availableHeight2 / 36 )\n\t                    .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none\n\t\n\t                g.select('.nv-context .nv-y3.nv-axis')\n\t                    .style('opacity', dataBars.length ? 1 : 0)\n\t                    .attr('transform', 'translate(0,' + x2.range()[0] + ')');\n\t                g.select('.nv-context .nv-y2.nv-axis')\n\t                    .style('opacity', dataLines.length ? 1 : 0)\n\t                    .attr('transform', 'translate(' + x2.range()[1] + ',0)');\n\t\n\t                g.select('.nv-context .nv-y1.nv-axis').transition()\n\t                    .call(y3Axis);\n\t                g.select('.nv-context .nv-y2.nv-axis').transition()\n\t                    .call(y4Axis);\n\t            }\n\t\n\t            // Setup Brush\n\t            brush.x(x2).on('brush', onBrush);\n\t\n\t            if (brushExtent) brush.extent(brushExtent);\n\t\n\t            var brushBG = g.select('.nv-brushBackground').selectAll('g')\n\t                .data([brushExtent || brush.extent()]);\n\t\n\t            var brushBGenter = brushBG.enter()\n\t                .append('g');\n\t\n\t            brushBGenter.append('rect')\n\t                .attr('class', 'left')\n\t                .attr('x', 0)\n\t                .attr('y', 0)\n\t                .attr('height', availableHeight2);\n\t\n\t            brushBGenter.append('rect')\n\t                .attr('class', 'right')\n\t                .attr('x', 0)\n\t                .attr('y', 0)\n\t                .attr('height', availableHeight2);\n\t\n\t            var gBrush = g.select('.nv-x.nv-brush')\n\t                .call(brush);\n\t            gBrush.selectAll('rect')\n\t                //.attr('y', -5)\n\t                .attr('height', availableHeight2);\n\t            gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\t\n\t            //============================================================\n\t            // Event Handling/Dispatching (in chart's scope)\n\t            //------------------------------------------------------------\n\t\n\t            legend.dispatch.on('stateChange', function(newState) {\n\t                for (var key in newState)\n\t                    state[key] = newState[key];\n\t                dispatch.stateChange(state);\n\t                chart.update();\n\t            });\n\t\n\t            // Update chart from a state object passed to event handler\n\t            dispatch.on('changeState', function(e) {\n\t                if (typeof e.disabled !== 'undefined') {\n\t                    data.forEach(function(series,i) {\n\t                        series.disabled = e.disabled[i];\n\t                    });\n\t                    state.disabled = e.disabled;\n\t                }\n\t                chart.update();\n\t            });\n\t\n\t            //============================================================\n\t            // Functions\n\t            //------------------------------------------------------------\n\t\n\t            // Taken from crossfilter (http://square.github.com/crossfilter/)\n\t            function resizePath(d) {\n\t                var e = +(d == 'e'),\n\t                    x = e ? 1 : -1,\n\t                    y = availableHeight2 / 3;\n\t                return 'M' + (.5 * x) + ',' + y\n\t                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n\t                    + 'V' + (2 * y - 6)\n\t                    + 'A6,6 0 0 ' + e + ' ' + (.5 * x) + ',' + (2 * y)\n\t                    + 'Z'\n\t                    + 'M' + (2.5 * x) + ',' + (y + 8)\n\t                    + 'V' + (2 * y - 8)\n\t                    + 'M' + (4.5 * x) + ',' + (y + 8)\n\t                    + 'V' + (2 * y - 8);\n\t            }\n\t\n\t\n\t            function updateBrushBG() {\n\t                if (!brush.empty()) brush.extent(brushExtent);\n\t                brushBG\n\t                    .data([brush.empty() ? x2.domain() : brushExtent])\n\t                    .each(function(d,i) {\n\t                        var leftWidth = x2(d[0]) - x2.range()[0],\n\t                            rightWidth = x2.range()[1] - x2(d[1]);\n\t                        d3.select(this).select('.left')\n\t                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n\t\n\t                        d3.select(this).select('.right')\n\t                            .attr('x', x2(d[1]))\n\t                            .attr('width', rightWidth < 0 ? 0 : rightWidth);\n\t                    });\n\t            }\n\t\n\t            function onBrush() {\n\t                brushExtent = brush.empty() ? null : brush.extent();\n\t                extent = brush.empty() ? x2.domain() : brush.extent();\n\t                dispatch.brush({extent: extent, brush: brush});\n\t                updateBrushBG();\n\t\n\t                // Prepare Main (Focus) Bars and Lines\n\t                bars\n\t                    .width(availableWidth)\n\t                    .height(availableHeight1)\n\t                    .color(data.map(function(d,i) {\n\t                        return d.color || color(d, i);\n\t                    }).filter(function(d,i) { return !data[i].disabled && data[i].bar }));\n\t\n\t                lines\n\t                    .width(availableWidth)\n\t                    .height(availableHeight1)\n\t                    .color(data.map(function(d,i) {\n\t                        return d.color || color(d, i);\n\t                    }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }));\n\t\n\t                var focusBarsWrap = g.select('.nv-focus .nv-barsWrap')\n\t                    .datum(!dataBars.length ? [{values:[]}] :\n\t                        dataBars\n\t                            .map(function(d,i) {\n\t                                return {\n\t                                    key: d.key,\n\t                                    values: d.values.filter(function(d,i) {\n\t                                        return bars.x()(d,i) >= extent[0] && bars.x()(d,i) <= extent[1];\n\t                                    })\n\t                                }\n\t                            })\n\t                );\n\t\n\t                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n\t                    .datum(allDisabled(dataLines) ? [{values:[]}] :\n\t                           dataLines\n\t                           .filter(function(dataLine) { return !dataLine.disabled; })\n\t                           .map(function(d,i) {\n\t                                return {\n\t                                    area: d.area,\n\t                                    fillOpacity: d.fillOpacity,\n\t                                    strokeWidth: d.strokeWidth,\n\t                                    key: d.key,\n\t                                    values: d.values.filter(function(d,i) {\n\t                                        return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n\t                                    })\n\t                                }\n\t                            })\n\t                );\n\t\n\t                // Update Main (Focus) X Axis\n\t                if (dataBars.length && !switchYAxisOrder) {\n\t                    x = bars.xScale();\n\t                } else {\n\t                    x = lines.xScale();\n\t                }\n\t\n\t                xAxis\n\t                    .scale(x)\n\t                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n\t                    .tickSize(-availableHeight1, 0);\n\t\n\t                xAxis.domain([Math.ceil(extent[0]), Math.floor(extent[1])]);\n\t\n\t                g.select('.nv-x.nv-axis').transition().duration(transitionDuration)\n\t                    .call(xAxis);\n\t\n\t                // Update Main (Focus) Bars and Lines\n\t                focusBarsWrap.transition().duration(transitionDuration).call(bars);\n\t                focusLinesWrap.transition().duration(transitionDuration).call(lines);\n\t\n\t                // Setup and Update Main (Focus) Y Axes\n\t                g.select('.nv-focus .nv-x.nv-axis')\n\t                    .attr('transform', 'translate(0,' + y1.range()[0] + ')');\n\t\n\t                y1Axis\n\t                    .scale(y1)\n\t                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) )\n\t                    .tickSize(-availableWidth, 0);\n\t                y2Axis\n\t                    .scale(y2)\n\t                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) );\n\t\n\t                // Show the y2 rules only if y1 has none\n\t                if(!switchYAxisOrder) {\n\t                    y2Axis.tickSize(dataBars.length ? 0 : -availableWidth, 0);\n\t                } else {\n\t                    y2Axis.tickSize(dataLines.length ? 0 : -availableWidth, 0);\n\t                }\n\t\n\t                // Calculate opacity of the axis\n\t                var barsOpacity = dataBars.length ? 1 : 0;\n\t                var linesOpacity = dataLines.length && !allDisabled(dataLines) ? 1 : 0;\n\t\n\t                var y1Opacity = switchYAxisOrder ? linesOpacity : barsOpacity;\n\t                var y2Opacity = switchYAxisOrder ? barsOpacity : linesOpacity;\n\t\n\t                g.select('.nv-focus .nv-y1.nv-axis')\n\t                    .style('opacity', y1Opacity);\n\t                g.select('.nv-focus .nv-y2.nv-axis')\n\t                    .style('opacity', y2Opacity)\n\t                    .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\t\n\t                g.select('.nv-focus .nv-y1.nv-axis').transition().duration(transitionDuration)\n\t                    .call(y1Axis);\n\t                g.select('.nv-focus .nv-y2.nv-axis').transition().duration(transitionDuration)\n\t                    .call(y2Axis);\n\t            }\n\t\n\t            onBrush();\n\t\n\t        });\n\t\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Event Handling/Dispatching (out of chart's scope)\n\t    //------------------------------------------------------------\n\t\n\t    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n\t        tooltip\n\t            .duration(100)\n\t            .valueFormatter(function(d, i) {\n\t                return getLinesAxis().main.tickFormat()(d, i);\n\t            })\n\t            .data(evt)\n\t            .hidden(false);\n\t    });\n\t\n\t    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t        tooltip.hidden(true)\n\t    });\n\t\n\t    bars.dispatch.on('elementMouseover.tooltip', function(evt) {\n\t        evt.value = chart.x()(evt.data);\n\t        evt['series'] = {\n\t            value: chart.y()(evt.data),\n\t            color: evt.color\n\t        };\n\t        tooltip\n\t            .duration(0)\n\t            .valueFormatter(function(d, i) {\n\t                return getBarsAxis().main.tickFormat()(d, i);\n\t            })\n\t            .data(evt)\n\t            .hidden(false);\n\t    });\n\t\n\t    bars.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t        tooltip.hidden(true);\n\t    });\n\t\n\t    bars.dispatch.on('elementMousemove.tooltip', function(evt) {\n\t        tooltip();\n\t    });\n\t\n\t    //============================================================\n\t\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    // expose chart's sub-components\n\t    chart.dispatch = dispatch;\n\t    chart.legend = legend;\n\t    chart.lines = lines;\n\t    chart.lines2 = lines2;\n\t    chart.bars = bars;\n\t    chart.bars2 = bars2;\n\t    chart.xAxis = xAxis;\n\t    chart.x2Axis = x2Axis;\n\t    chart.y1Axis = y1Axis;\n\t    chart.y2Axis = y2Axis;\n\t    chart.y3Axis = y3Axis;\n\t    chart.y4Axis = y4Axis;\n\t    chart.tooltip = tooltip;\n\t\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:      {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\t        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n\t        brushExtent:    {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},\n\t        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\t        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n\t        focusHeight:    {get: function(){return focusHeight;}, set: function(_){focusHeight=_;}},\n\t        focusShowAxisX:    {get: function(){return focusShowAxisX;}, set: function(_){focusShowAxisX=_;}},\n\t        focusShowAxisY:    {get: function(){return focusShowAxisY;}, set: function(_){focusShowAxisY=_;}},\n\t        legendLeftAxisHint:    {get: function(){return legendLeftAxisHint;}, set: function(_){legendLeftAxisHint=_;}},\n\t        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            if (_.top !== undefined) {\n\t                margin.top = _.top;\n\t                marginTop = _.top;\n\t            }\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        focusMargin: {get: function(){return margin2;}, set: function(_){\n\t            margin2.top    = _.top    !== undefined ? _.top    : margin2.top;\n\t            margin2.right  = _.right  !== undefined ? _.right  : margin2.right;\n\t            margin2.bottom = _.bottom !== undefined ? _.bottom : margin2.bottom;\n\t            margin2.left   = _.left   !== undefined ? _.left   : margin2.left;\n\t        }},\n\t        duration: {get: function(){return transitionDuration;}, set: function(_){\n\t            transitionDuration = _;\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t            legend.color(color);\n\t        }},\n\t        x: {get: function(){return getX;}, set: function(_){\n\t            getX = _;\n\t            lines.x(_);\n\t            lines2.x(_);\n\t            bars.x(_);\n\t            bars2.x(_);\n\t        }},\n\t        y: {get: function(){return getY;}, set: function(_){\n\t            getY = _;\n\t            lines.y(_);\n\t            lines2.y(_);\n\t            bars.y(_);\n\t            bars2.y(_);\n\t        }},\n\t        switchYAxisOrder:    {get: function(){return switchYAxisOrder;}, set: function(_){\n\t            // Switch the tick format for the yAxis\n\t            if(switchYAxisOrder !== _) {\n\t                var y1 = y1Axis;\n\t                y1Axis = y2Axis;\n\t                y2Axis = y1;\n\t\n\t                var y3 = y3Axis;\n\t                y3Axis = y4Axis;\n\t                y4Axis = y3;\n\t            }\n\t            switchYAxisOrder=_;\n\t\n\t            y1Axis.orient('left');\n\t            y2Axis.orient('right');\n\t            y3Axis.orient('left');\n\t            y4Axis.orient('right');\n\t        }}\n\t    });\n\t\n\t    nv.utils.inheritOptions(chart, lines);\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t};\n\t\n\tnv.models.multiBar = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t        , width = 960\n\t        , height = 500\n\t        , x = d3.scale.ordinal()\n\t        , y = d3.scale.linear()\n\t        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n\t        , container = null\n\t        , getX = function(d) { return d.x }\n\t        , getY = function(d) { return d.y }\n\t        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n\t        , clipEdge = true\n\t        , stacked = false\n\t        , stackOffset = 'zero' // options include 'silhouette', 'wiggle', 'expand', 'zero', or a custom function\n\t        , color = nv.utils.defaultColor()\n\t        , hideable = false\n\t        , barColor = null // adding the ability to set the color for each rather than the whole group\n\t        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n\t        , duration = 500\n\t        , xDomain\n\t        , yDomain\n\t        , xRange\n\t        , yRange\n\t        , groupSpacing = 0.1\n\t        , fillOpacity = 0.75\n\t        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n\t        ;\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var x0, y0 //used to store previous scales\n\t        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n\t        ;\n\t\n\t    var last_datalength = 0;\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        selection.each(function(data) {\n\t            var availableWidth = width - margin.left - margin.right,\n\t                availableHeight = height - margin.top - margin.bottom;\n\t\n\t            container = d3.select(this);\n\t            nv.utils.initSVG(container);\n\t            var nonStackableCount = 0;\n\t            // This function defines the requirements for render complete\n\t            var endFn = function(d, i) {\n\t                if (d.series === data.length - 1 && i === data[0].values.length - 1)\n\t                    return true;\n\t                return false;\n\t            };\n\t\n\t            if(hideable && data.length) hideable = [{\n\t                values: data[0].values.map(function(d) {\n\t                        return {\n\t                            x: d.x,\n\t                            y: 0,\n\t                            series: d.series,\n\t                            size: 0.01\n\t                        };}\n\t                )}];\n\t\n\t            if (stacked) {\n\t                var parsed = d3.layout.stack()\n\t                    .offset(stackOffset)\n\t                    .values(function(d){ return d.values })\n\t                    .y(getY)\n\t                (!data.length && hideable ? hideable : data);\n\t\n\t                parsed.forEach(function(series, i){\n\t                    // if series is non-stackable, use un-parsed data\n\t                    if (series.nonStackable) {\n\t                        data[i].nonStackableSeries = nonStackableCount++;\n\t                        parsed[i] = data[i];\n\t                    } else {\n\t                        // don't stack this seires on top of the nonStackable seriees\n\t                        if (i > 0 && parsed[i - 1].nonStackable){\n\t                            parsed[i].values.map(function(d,j){\n\t                                d.y0 -= parsed[i - 1].values[j].y;\n\t                                d.y1 = d.y0 + d.y;\n\t                            });\n\t                        }\n\t                    }\n\t                });\n\t                data = parsed;\n\t            }\n\t            //add series index and key to each data point for reference\n\t            data.forEach(function(series, i) {\n\t                series.values.forEach(function(point) {\n\t                    point.series = i;\n\t                    point.key = series.key;\n\t                });\n\t            });\n\t\n\t            // HACK for negative value stacking\n\t            if (stacked && data.length > 0) {\n\t                data[0].values.map(function(d,i) {\n\t                    var posBase = 0, negBase = 0;\n\t                    data.map(function(d, idx) {\n\t                        if (!data[idx].nonStackable) {\n\t                            var f = d.values[i]\n\t                            f.size = Math.abs(f.y);\n\t                            if (f.y<0)  {\n\t                                f.y1 = negBase;\n\t                                negBase = negBase - f.size;\n\t                            } else\n\t                            {\n\t                                f.y1 = f.size + posBase;\n\t                                posBase = posBase + f.size;\n\t                            }\n\t                        }\n\t\n\t                    });\n\t                });\n\t            }\n\t            // Setup Scales\n\t            // remap and flatten the data for use in calculating the scales' domains\n\t            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n\t                data.map(function(d, idx) {\n\t                    return d.values.map(function(d,i) {\n\t                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1, idx:idx }\n\t                    })\n\t                });\n\t\n\t            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n\t                .rangeBands(xRange || [0, availableWidth], groupSpacing);\n\t\n\t            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) {\n\t                var domain = d.y;\n\t                // increase the domain range if this series is stackable\n\t                if (stacked && !data[d.idx].nonStackable) {\n\t                    if (d.y > 0){\n\t                        domain = d.y1\n\t                    } else {\n\t                        domain = d.y1 + d.y\n\t                    }\n\t                }\n\t                return domain;\n\t            }).concat(forceY)))\n\t            .range(yRange || [availableHeight, 0]);\n\t\n\t            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n\t            if (x.domain()[0] === x.domain()[1])\n\t                x.domain()[0] ?\n\t                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n\t                    : x.domain([-1,1]);\n\t\n\t            if (y.domain()[0] === y.domain()[1])\n\t                y.domain()[0] ?\n\t                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n\t                    : y.domain([-1,1]);\n\t\n\t            x0 = x0 || x;\n\t            y0 = y0 || y;\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap.nv-multibar').data([data]);\n\t            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibar');\n\t            var defsEnter = wrapEnter.append('defs');\n\t            var gEnter = wrapEnter.append('g');\n\t            var g = wrap.select('g');\n\t\n\t            gEnter.append('g').attr('class', 'nv-groups');\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            defsEnter.append('clipPath')\n\t                .attr('id', 'nv-edge-clip-' + id)\n\t                .append('rect');\n\t            wrap.select('#nv-edge-clip-' + id + ' rect')\n\t                .attr('width', availableWidth)\n\t                .attr('height', availableHeight);\n\t\n\t            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\t\n\t            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n\t                .data(function(d) { return d }, function(d,i) { return i });\n\t            groups.enter().append('g')\n\t                .style('stroke-opacity', 1e-6)\n\t                .style('fill-opacity', 1e-6);\n\t\n\t            var exitTransition = renderWatch\n\t                .transition(groups.exit().selectAll('rect.nv-bar'), 'multibarExit', Math.min(100, duration))\n\t                .attr('y', function(d, i, j) {\n\t                    var yVal = y0(0) || 0;\n\t                    if (stacked) {\n\t                        if (data[d.series] && !data[d.series].nonStackable) {\n\t                            yVal = y0(d.y0);\n\t                        }\n\t                    }\n\t                    return yVal;\n\t                })\n\t                .attr('height', 0)\n\t                .remove();\n\t            if (exitTransition.delay)\n\t                exitTransition.delay(function(d,i) {\n\t                    var delay = i * (duration / (last_datalength + 1)) - i;\n\t                    return delay;\n\t                });\n\t            groups\n\t                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n\t                .classed('hover', function(d) { return d.hover })\n\t                .style('fill', function(d,i){ return color(d, i) })\n\t                .style('stroke', function(d,i){ return color(d, i) });\n\t            groups\n\t                .style('stroke-opacity', 1)\n\t                .style('fill-opacity', fillOpacity);\n\t\n\t            var bars = groups.selectAll('rect.nv-bar')\n\t                .data(function(d) { return (hideable && !data.length) ? hideable.values : d.values });\n\t            bars.exit().remove();\n\t\n\t            var barsEnter = bars.enter().append('rect')\n\t                    .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n\t                    .attr('x', function(d,i,j) {\n\t                        return stacked && !data[j].nonStackable ? 0 : (j * x.rangeBand() / data.length )\n\t                    })\n\t                    .attr('y', function(d,i,j) { return y0(stacked && !data[j].nonStackable ? d.y0 : 0) || 0 })\n\t                    .attr('height', 0)\n\t                    .attr('width', function(d,i,j) { return x.rangeBand() / (stacked && !data[j].nonStackable ? 1 : data.length) })\n\t                    .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n\t                ;\n\t            bars\n\t                .style('fill', function(d,i,j){ return color(d, j, i);  })\n\t                .style('stroke', function(d,i,j){ return color(d, j, i); })\n\t                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n\t                    d3.select(this).classed('hover', true);\n\t                    dispatch.elementMouseover({\n\t                        data: d,\n\t                        index: i,\n\t                        color: d3.select(this).style(\"fill\")\n\t                    });\n\t                })\n\t                .on('mouseout', function(d,i) {\n\t                    d3.select(this).classed('hover', false);\n\t                    dispatch.elementMouseout({\n\t                        data: d,\n\t                        index: i,\n\t                        color: d3.select(this).style(\"fill\")\n\t                    });\n\t                })\n\t                .on('mousemove', function(d,i) {\n\t                    dispatch.elementMousemove({\n\t                        data: d,\n\t                        index: i,\n\t                        color: d3.select(this).style(\"fill\")\n\t                    });\n\t                })\n\t                .on('click', function(d,i) {\n\t                    var element = this;\n\t                    dispatch.elementClick({\n\t                        data: d,\n\t                        index: i,\n\t                        color: d3.select(this).style(\"fill\"),\n\t                        event: d3.event,\n\t                        element: element\n\t                    });\n\t                    d3.event.stopPropagation();\n\t                })\n\t                .on('dblclick', function(d,i) {\n\t                    dispatch.elementDblClick({\n\t                        data: d,\n\t                        index: i,\n\t                        color: d3.select(this).style(\"fill\")\n\t                    });\n\t                    d3.event.stopPropagation();\n\t                });\n\t            bars\n\t                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n\t                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n\t\n\t            if (barColor) {\n\t                if (!disabled) disabled = data.map(function() { return true });\n\t                bars\n\t                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n\t                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n\t            }\n\t\n\t            var barSelection =\n\t                bars.watchTransition(renderWatch, 'multibar', Math.min(250, duration))\n\t                    .delay(function(d,i) {\n\t                        return i * duration / data[0].values.length;\n\t                    });\n\t            if (stacked){\n\t                barSelection\n\t                    .attr('y', function(d,i,j) {\n\t                        var yVal = 0;\n\t                        // if stackable, stack it on top of the previous series\n\t                        if (!data[j].nonStackable) {\n\t                            yVal = y(d.y1);\n\t                        } else {\n\t                            if (getY(d,i) < 0){\n\t                                yVal = y(0);\n\t                            } else {\n\t                                if (y(0) - y(getY(d,i)) < -1){\n\t                                    yVal = y(0) - 1;\n\t                                } else {\n\t                                    yVal = y(getY(d, i)) || 0;\n\t                                }\n\t                            }\n\t                        }\n\t                        return yVal;\n\t                    })\n\t                    .attr('height', function(d,i,j) {\n\t                        if (!data[j].nonStackable) {\n\t                            return Math.max(Math.abs(y(d.y+d.y0) - y(d.y0)), 0);\n\t                        } else {\n\t                            return Math.max(Math.abs(y(getY(d,i)) - y(0)), 0) || 0;\n\t                        }\n\t                    })\n\t                    .attr('x', function(d,i,j) {\n\t                        var width = 0;\n\t                        if (data[j].nonStackable) {\n\t                            width = d.series * x.rangeBand() / data.length;\n\t                            if (data.length !== nonStackableCount){\n\t                                width = data[j].nonStackableSeries * x.rangeBand()/(nonStackableCount*2);\n\t                            }\n\t                        }\n\t                        return width;\n\t                    })\n\t                    .attr('width', function(d,i,j){\n\t                        if (!data[j].nonStackable) {\n\t                            return x.rangeBand();\n\t                        } else {\n\t                            // if all series are nonStacable, take the full width\n\t                            var width = (x.rangeBand() / nonStackableCount);\n\t                            // otherwise, nonStackable graph will be only taking the half-width\n\t                            // of the x rangeBand\n\t                            if (data.length !== nonStackableCount) {\n\t                                width = x.rangeBand()/(nonStackableCount*2);\n\t                            }\n\t                            return width;\n\t                        }\n\t                    });\n\t            }\n\t            else {\n\t                barSelection\n\t                    .attr('x', function(d,i) {\n\t                        return d.series * x.rangeBand() / data.length;\n\t                    })\n\t                    .attr('width', x.rangeBand() / data.length)\n\t                    .attr('y', function(d,i) {\n\t                        return getY(d,i) < 0 ?\n\t                            y(0) :\n\t                                y(0) - y(getY(d,i)) < 1 ?\n\t                            y(0) - 1 :\n\t                            y(getY(d,i)) || 0;\n\t                    })\n\t                    .attr('height', function(d,i) {\n\t                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0;\n\t                    });\n\t            }\n\t\n\t            //store old scales for use in transitions on update\n\t            x0 = x.copy();\n\t            y0 = y.copy();\n\t\n\t            // keep track of the last data value length for transition calculations\n\t            if (data[0] && data[0].values) {\n\t                last_datalength = data[0].values.length;\n\t            }\n\t\n\t        });\n\t\n\t        renderWatch.renderEnd('multibar immediate');\n\t\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    chart.dispatch = dispatch;\n\t\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:   {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:  {get: function(){return height;}, set: function(_){height=_;}},\n\t        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n\t        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n\t        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n\t        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n\t        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n\t        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n\t        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n\t        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n\t        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n\t        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},\n\t        stackOffset: {get: function(){return stackOffset;}, set: function(_){stackOffset=_;}},\n\t        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n\t        disabled:    {get: function(){return disabled;}, set: function(_){disabled=_;}},\n\t        id:          {get: function(){return id;}, set: function(_){id=_;}},\n\t        hideable:    {get: function(){return hideable;}, set: function(_){hideable=_;}},\n\t        groupSpacing:{get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},\n\t        fillOpacity: {get: function(){return fillOpacity;}, set: function(_){fillOpacity=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        duration: {get: function(){return duration;}, set: function(_){\n\t            duration = _;\n\t            renderWatch.reset(duration);\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t        }},\n\t        barColor:  {get: function(){return barColor;}, set: function(_){\n\t            barColor = _ ? nv.utils.getColor(_) : null;\n\t        }}\n\t    });\n\t\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t};\n\tnv.models.multiBarChart = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var multibar = nv.models.multiBar()\n\t        , xAxis = nv.models.axis()\n\t        , yAxis = nv.models.axis()\n\t        , interactiveLayer = nv.interactiveGuideline()\n\t        , legend = nv.models.legend()\n\t        , controls = nv.models.legend()\n\t        , tooltip = nv.models.tooltip()\n\t        ;\n\t\n\t    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n\t        , marginTop = null\n\t        , width = null\n\t        , height = null\n\t        , color = nv.utils.defaultColor()\n\t        , showControls = true\n\t        , controlLabels = {}\n\t        , showLegend = true\n\t        , showXAxis = true\n\t        , showYAxis = true\n\t        , rightAlignYAxis = false\n\t        , reduceXTicks = true // if false a tick will show for every data point\n\t        , staggerLabels = false\n\t        , wrapLabels = false\n\t        , rotateLabels = 0\n\t        , x //can be accessed via chart.xScale()\n\t        , y //can be accessed via chart.yScale()\n\t        , state = nv.utils.state()\n\t        , defaultState = null\n\t        , noData = null\n\t        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n\t        , controlWidth = function() { return showControls ? 180 : 0 }\n\t        , duration = 250\n\t        , useInteractiveGuideline = false\n\t        ;\n\t\n\t    state.stacked = false // DEPRECATED Maintained for backward compatibility\n\t\n\t    multibar.stacked(false);\n\t    xAxis\n\t        .orient('bottom')\n\t        .tickPadding(7)\n\t        .showMaxMin(false)\n\t        .tickFormat(function(d) { return d })\n\t    ;\n\t    yAxis\n\t        .orient((rightAlignYAxis) ? 'right' : 'left')\n\t        .tickFormat(d3.format(',.1f'))\n\t    ;\n\t\n\t    tooltip\n\t        .duration(0)\n\t        .valueFormatter(function(d, i) {\n\t            return yAxis.tickFormat()(d, i);\n\t        })\n\t        .headerFormatter(function(d, i) {\n\t            return xAxis.tickFormat()(d, i);\n\t        });\n\t\n\t    interactiveLayer.tooltip\n\t        .valueFormatter(function(d, i) {\n\t            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n\t        })\n\t        .headerFormatter(function(d, i) {\n\t            return xAxis.tickFormat()(d, i);\n\t        });\n\t\n\t    interactiveLayer.tooltip\n\t        .valueFormatter(function (d, i) {\n\t            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n\t        })\n\t        .headerFormatter(function (d, i) {\n\t            return xAxis.tickFormat()(d, i);\n\t        });\n\t\n\t    interactiveLayer.tooltip\n\t        .duration(0)\n\t        .valueFormatter(function(d, i) {\n\t            return yAxis.tickFormat()(d, i);\n\t        })\n\t        .headerFormatter(function(d, i) {\n\t            return xAxis.tickFormat()(d, i);\n\t        });\n\t\n\t    controls.updateState(false);\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var renderWatch = nv.utils.renderWatch(dispatch);\n\t    var stacked = false;\n\t\n\t    var stateGetter = function(data) {\n\t        return function(){\n\t            return {\n\t                active: data.map(function(d) { return !d.disabled }),\n\t                stacked: stacked\n\t            };\n\t        }\n\t    };\n\t\n\t    var stateSetter = function(data) {\n\t        return function(state) {\n\t            if (state.stacked !== undefined)\n\t                stacked = state.stacked;\n\t            if (state.active !== undefined)\n\t                data.forEach(function(series,i) {\n\t                    series.disabled = !state.active[i];\n\t                });\n\t        }\n\t    };\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        renderWatch.models(multibar);\n\t        if (showXAxis) renderWatch.models(xAxis);\n\t        if (showYAxis) renderWatch.models(yAxis);\n\t\n\t        selection.each(function(data) {\n\t            var container = d3.select(this),\n\t                that = this;\n\t            nv.utils.initSVG(container);\n\t            var availableWidth = nv.utils.availableWidth(width, container, margin),\n\t                availableHeight = nv.utils.availableHeight(height, container, margin);\n\t\n\t            chart.update = function() {\n\t                if (duration === 0)\n\t                    container.call(chart);\n\t                else\n\t                    container.transition()\n\t                        .duration(duration)\n\t                        .call(chart);\n\t            };\n\t            chart.container = this;\n\t\n\t            state\n\t                .setter(stateSetter(data), chart.update)\n\t                .getter(stateGetter(data))\n\t                .update();\n\t\n\t            // DEPRECATED set state.disableddisabled\n\t            state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t            if (!defaultState) {\n\t                var key;\n\t                defaultState = {};\n\t                for (key in state) {\n\t                    if (state[key] instanceof Array)\n\t                        defaultState[key] = state[key].slice(0);\n\t                    else\n\t                        defaultState[key] = state[key];\n\t                }\n\t            }\n\t\n\t            // Display noData message if there's nothing to show.\n\t            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t                nv.utils.noData(chart, container)\n\t                return chart;\n\t            } else {\n\t                container.selectAll('.nv-noData').remove();\n\t            }\n\t\n\t            // Setup Scales\n\t            x = multibar.xScale();\n\t            y = multibar.yScale();\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap.nv-multiBarWithLegend').data([data]);\n\t            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarWithLegend').append('g');\n\t            var g = wrap.select('g');\n\t\n\t            gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t            gEnter.append('g').attr('class', 'nv-y nv-axis');\n\t            gEnter.append('g').attr('class', 'nv-barsWrap');\n\t            gEnter.append('g').attr('class', 'nv-legendWrap');\n\t            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\t            gEnter.append('g').attr('class', 'nv-interactive');\n\t\n\t            // Legend\n\t            if (!showLegend) {\n\t                g.select('.nv-legendWrap').selectAll('*').remove();\n\t            } else {\n\t                legend.width(availableWidth - controlWidth());\n\t\n\t                g.select('.nv-legendWrap')\n\t                    .datum(data)\n\t                    .call(legend);\n\t\n\t                if (!marginTop && legend.height() !== margin.top) {\n\t                    margin.top = legend.height();\n\t                    availableHeight = nv.utils.availableHeight(height, container, margin);\n\t                }\n\t\n\t                g.select('.nv-legendWrap')\n\t                    .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n\t            }\n\t\n\t            // Controls\n\t            if (!showControls) {\n\t                 g.select('.nv-controlsWrap').selectAll('*').remove();\n\t            } else {\n\t                var controlsData = [\n\t                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },\n\t                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }\n\t                ];\n\t\n\t                controls.width(controlWidth()).color(['#444', '#444', '#444']);\n\t                g.select('.nv-controlsWrap')\n\t                    .datum(controlsData)\n\t                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t                    .call(controls);\n\t            }\n\t\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t            if (rightAlignYAxis) {\n\t                g.select(\".nv-y.nv-axis\")\n\t                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t            }\n\t\n\t            // Main Chart Component(s)\n\t            multibar\n\t                .disabled(data.map(function(series) { return series.disabled }))\n\t                .width(availableWidth)\n\t                .height(availableHeight)\n\t                .color(data.map(function(d,i) {\n\t                    return d.color || color(d, i);\n\t                }).filter(function(d,i) { return !data[i].disabled }));\n\t\n\t\n\t            var barsWrap = g.select('.nv-barsWrap')\n\t                .datum(data.filter(function(d) { return !d.disabled }));\n\t\n\t            barsWrap.call(multibar);\n\t\n\t            // Setup Axes\n\t            if (showXAxis) {\n\t                xAxis\n\t                    .scale(x)\n\t                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n\t                    .tickSize(-availableHeight, 0);\n\t\n\t                g.select('.nv-x.nv-axis')\n\t                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n\t                g.select('.nv-x.nv-axis')\n\t                    .call(xAxis);\n\t\n\t                var xTicks = g.select('.nv-x.nv-axis > g').selectAll('g');\n\t\n\t                xTicks\n\t                    .selectAll('line, text')\n\t                    .style('opacity', 1)\n\t\n\t                if (staggerLabels) {\n\t                    var getTranslate = function(x,y) {\n\t                        return \"translate(\" + x + \",\" + y + \")\";\n\t                    };\n\t\n\t                    var staggerUp = 5, staggerDown = 17;  //pixels to stagger by\n\t                    // Issue #140\n\t                    xTicks\n\t                        .selectAll(\"text\")\n\t                        .attr('transform', function(d,i,j) {\n\t                            return  getTranslate(0, (j % 2 == 0 ? staggerUp : staggerDown));\n\t                        });\n\t\n\t                    var totalInBetweenTicks = d3.selectAll(\".nv-x.nv-axis .nv-wrap g g text\")[0].length;\n\t                    g.selectAll(\".nv-x.nv-axis .nv-axisMaxMin text\")\n\t                        .attr(\"transform\", function(d,i) {\n\t                            return getTranslate(0, (i === 0 || totalInBetweenTicks % 2 !== 0) ? staggerDown : staggerUp);\n\t                        });\n\t                }\n\t\n\t                if (wrapLabels) {\n\t                    g.selectAll('.tick text')\n\t                        .call(nv.utils.wrapTicks, chart.xAxis.rangeBand())\n\t                }\n\t\n\t                if (reduceXTicks)\n\t                    xTicks\n\t                        .filter(function(d,i) {\n\t                            return i % Math.ceil(data[0].values.length / (availableWidth / 100)) !== 0;\n\t                        })\n\t                        .selectAll('text, line')\n\t                        .style('opacity', 0);\n\t\n\t                if(rotateLabels)\n\t                    xTicks\n\t                        .selectAll('.tick text')\n\t                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')\n\t                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');\n\t\n\t                g.select('.nv-x.nv-axis').selectAll('g.nv-axisMaxMin text')\n\t                    .style('opacity', 1);\n\t            }\n\t\n\t            if (showYAxis) {\n\t                yAxis\n\t                    .scale(y)\n\t                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n\t                    .tickSize( -availableWidth, 0);\n\t\n\t                g.select('.nv-y.nv-axis')\n\t                    .call(yAxis);\n\t            }\n\t\n\t            //Set up interactive layer\n\t            if (useInteractiveGuideline) {\n\t                interactiveLayer\n\t                    .width(availableWidth)\n\t                    .height(availableHeight)\n\t                    .margin({left:margin.left, top:margin.top})\n\t                    .svgContainer(container)\n\t                    .xScale(x);\n\t                wrap.select(\".nv-interactive\").call(interactiveLayer);\n\t            }\n\t\n\t            //============================================================\n\t            // Event Handling/Dispatching (in chart's scope)\n\t            //------------------------------------------------------------\n\t\n\t            legend.dispatch.on('stateChange', function(newState) {\n\t                for (var key in newState)\n\t                    state[key] = newState[key];\n\t                dispatch.stateChange(state);\n\t                chart.update();\n\t            });\n\t\n\t            controls.dispatch.on('legendClick', function(d,i) {\n\t                if (!d.disabled) return;\n\t                controlsData = controlsData.map(function(s) {\n\t                    s.disabled = true;\n\t                    return s;\n\t                });\n\t                d.disabled = false;\n\t\n\t                switch (d.key) {\n\t                    case 'Grouped':\n\t                    case controlLabels.grouped:\n\t                        multibar.stacked(false);\n\t                        break;\n\t                    case 'Stacked':\n\t                    case controlLabels.stacked:\n\t                        multibar.stacked(true);\n\t                        break;\n\t                }\n\t\n\t                state.stacked = multibar.stacked();\n\t                dispatch.stateChange(state);\n\t                chart.update();\n\t            });\n\t\n\t            // Update chart from a state object passed to event handler\n\t            dispatch.on('changeState', function(e) {\n\t                if (typeof e.disabled !== 'undefined') {\n\t                    data.forEach(function(series,i) {\n\t                        series.disabled = e.disabled[i];\n\t                    });\n\t                    state.disabled = e.disabled;\n\t                }\n\t                if (typeof e.stacked !== 'undefined') {\n\t                    multibar.stacked(e.stacked);\n\t                    state.stacked = e.stacked;\n\t                    stacked = e.stacked;\n\t                }\n\t                chart.update();\n\t            });\n\t\n\t            if (useInteractiveGuideline) {\n\t                interactiveLayer.dispatch.on('elementMousemove', function(e) {\n\t                    if (e.pointXValue == undefined) return;\n\t\n\t                    var singlePoint, pointIndex, pointXLocation, xValue, allData = [];\n\t                    data\n\t                        .filter(function(series, i) {\n\t                            series.seriesIndex = i;\n\t                            return !series.disabled;\n\t                        })\n\t                        .forEach(function(series,i) {\n\t                            pointIndex = x.domain().indexOf(e.pointXValue)\n\t\n\t                            var point = series.values[pointIndex];\n\t                            if (point === undefined) return;\n\t\n\t                            xValue = point.x;\n\t                            if (singlePoint === undefined) singlePoint = point;\n\t                            if (pointXLocation === undefined) pointXLocation = e.mouseX\n\t                            allData.push({\n\t                                key: series.key,\n\t                                value: chart.y()(point, pointIndex),\n\t                                color: color(series,series.seriesIndex),\n\t                                data: series.values[pointIndex]\n\t                            });\n\t                        });\n\t\n\t                    interactiveLayer.tooltip\n\t                        .data({\n\t                            value: xValue,\n\t                            index: pointIndex,\n\t                            series: allData\n\t                        })();\n\t\n\t                    interactiveLayer.renderGuideLine(pointXLocation);\n\t                });\n\t\n\t                interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n\t                    interactiveLayer.tooltip.hidden(true);\n\t                });\n\t            }\n\t            else {\n\t                multibar.dispatch.on('elementMouseover.tooltip', function(evt) {\n\t                    evt.value = chart.x()(evt.data);\n\t                    evt['series'] = {\n\t                        key: evt.data.key,\n\t                        value: chart.y()(evt.data),\n\t                        color: evt.color\n\t                    };\n\t                    tooltip.data(evt).hidden(false);\n\t                });\n\t\n\t                multibar.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t                    tooltip.hidden(true);\n\t                });\n\t\n\t                multibar.dispatch.on('elementMousemove.tooltip', function(evt) {\n\t                    tooltip();\n\t                });\n\t            }\n\t        });\n\t\n\t        renderWatch.renderEnd('multibarchart immediate');\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    // expose chart's sub-components\n\t    chart.dispatch = dispatch;\n\t    chart.multibar = multibar;\n\t    chart.legend = legend;\n\t    chart.controls = controls;\n\t    chart.xAxis = xAxis;\n\t    chart.yAxis = yAxis;\n\t    chart.state = state;\n\t    chart.tooltip = tooltip;\n\t    chart.interactiveLayer = interactiveLayer;\n\t\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:      {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\t        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n\t        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},\n\t        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n\t        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n\t        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n\t        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n\t        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\t        reduceXTicks:    {get: function(){return reduceXTicks;}, set: function(_){reduceXTicks=_;}},\n\t        rotateLabels:    {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n\t        staggerLabels:    {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n\t        wrapLabels:   {get: function(){return wrapLabels;}, set: function(_){wrapLabels=!!_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            if (_.top !== undefined) {\n\t                margin.top = _.top;\n\t                marginTop = _.top;\n\t            }\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        duration: {get: function(){return duration;}, set: function(_){\n\t            duration = _;\n\t            multibar.duration(duration);\n\t            xAxis.duration(duration);\n\t            yAxis.duration(duration);\n\t            renderWatch.reset(duration);\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t            legend.color(color);\n\t        }},\n\t        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n\t            rightAlignYAxis = _;\n\t            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n\t        }},\n\t        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n\t            useInteractiveGuideline = _;\n\t        }},\n\t        barColor:  {get: function(){return multibar.barColor;}, set: function(_){\n\t            multibar.barColor(_);\n\t            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})\n\t        }}\n\t    });\n\t\n\t    nv.utils.inheritOptions(chart, multibar);\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t};\n\t\n\tnv.models.multiBarHorizontal = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t        , width = 960\n\t        , height = 500\n\t        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n\t        , container = null\n\t        , x = d3.scale.ordinal()\n\t        , y = d3.scale.linear()\n\t        , getX = function(d) { return d.x }\n\t        , getY = function(d) { return d.y }\n\t        , getYerr = function(d) { return d.yErr }\n\t        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n\t        , color = nv.utils.defaultColor()\n\t        , barColor = null // adding the ability to set the color for each rather than the whole group\n\t        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n\t        , stacked = false\n\t        , showValues = false\n\t        , showBarLabels = false\n\t        , valuePadding = 60\n\t        , groupSpacing = 0.1\n\t        , fillOpacity = 0.75\n\t        , valueFormat = d3.format(',.2f')\n\t        , delay = 1200\n\t        , xDomain\n\t        , yDomain\n\t        , xRange\n\t        , yRange\n\t        , duration = 250\n\t        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n\t        ;\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var x0, y0; //used to store previous scales\n\t    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        selection.each(function(data) {\n\t            var availableWidth = width - margin.left - margin.right,\n\t                availableHeight = height - margin.top - margin.bottom;\n\t\n\t            container = d3.select(this);\n\t            nv.utils.initSVG(container);\n\t\n\t            if (stacked)\n\t                data = d3.layout.stack()\n\t                    .offset('zero')\n\t                    .values(function(d){ return d.values })\n\t                    .y(getY)\n\t                (data);\n\t\n\t            //add series index and key to each data point for reference\n\t            data.forEach(function(series, i) {\n\t                series.values.forEach(function(point) {\n\t                    point.series = i;\n\t                    point.key = series.key;\n\t                });\n\t            });\n\t\n\t            // HACK for negative value stacking\n\t            if (stacked)\n\t                data[0].values.map(function(d,i) {\n\t                    var posBase = 0, negBase = 0;\n\t                    data.map(function(d) {\n\t                        var f = d.values[i]\n\t                        f.size = Math.abs(f.y);\n\t                        if (f.y<0)  {\n\t                            f.y1 = negBase - f.size;\n\t                            negBase = negBase - f.size;\n\t                        } else\n\t                        {\n\t                            f.y1 = posBase;\n\t                            posBase = posBase + f.size;\n\t                        }\n\t                    });\n\t                });\n\t\n\t            // Setup Scales\n\t            // remap and flatten the data for use in calculating the scales' domains\n\t            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n\t                data.map(function(d) {\n\t                    return d.values.map(function(d,i) {\n\t                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1 }\n\t                    })\n\t                });\n\t\n\t            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n\t                .rangeBands(xRange || [0, availableHeight], groupSpacing);\n\t\n\t            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return stacked ? (d.y > 0 ? d.y1 + d.y : d.y1 ) : d.y }).concat(forceY)))\n\t\n\t            if (showValues && !stacked)\n\t                y.range(yRange || [(y.domain()[0] < 0 ? valuePadding : 0), availableWidth - (y.domain()[1] > 0 ? valuePadding : 0) ]);\n\t            else\n\t                y.range(yRange || [0, availableWidth]);\n\t\n\t            x0 = x0 || x;\n\t            y0 = y0 || d3.scale.linear().domain(y.domain()).range([y(0),y(0)]);\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-multibarHorizontal').data([data]);\n\t            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibarHorizontal');\n\t            var defsEnter = wrapEnter.append('defs');\n\t            var gEnter = wrapEnter.append('g');\n\t            var g = wrap.select('g');\n\t\n\t            gEnter.append('g').attr('class', 'nv-groups');\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n\t                .data(function(d) { return d }, function(d,i) { return i });\n\t            groups.enter().append('g')\n\t                .style('stroke-opacity', 1e-6)\n\t                .style('fill-opacity', 1e-6);\n\t            groups.exit().watchTransition(renderWatch, 'multibarhorizontal: exit groups')\n\t                .style('stroke-opacity', 1e-6)\n\t                .style('fill-opacity', 1e-6)\n\t                .remove();\n\t            groups\n\t                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n\t                .classed('hover', function(d) { return d.hover })\n\t                .style('fill', function(d,i){ return color(d, i) })\n\t                .style('stroke', function(d,i){ return color(d, i) });\n\t            groups.watchTransition(renderWatch, 'multibarhorizontal: groups')\n\t                .style('stroke-opacity', 1)\n\t                .style('fill-opacity', fillOpacity);\n\t\n\t            var bars = groups.selectAll('g.nv-bar')\n\t                .data(function(d) { return d.values });\n\t            bars.exit().remove();\n\t\n\t            var barsEnter = bars.enter().append('g')\n\t                .attr('transform', function(d,i,j) {\n\t                    return 'translate(' + y0(stacked ? d.y0 : 0) + ',' + (stacked ? 0 : (j * x.rangeBand() / data.length ) + x(getX(d,i))) + ')'\n\t                });\n\t\n\t            barsEnter.append('rect')\n\t                .attr('width', 0)\n\t                .attr('height', x.rangeBand() / (stacked ? 1 : data.length) )\n\t\n\t            bars\n\t                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n\t                    d3.select(this).classed('hover', true);\n\t                    dispatch.elementMouseover({\n\t                        data: d,\n\t                        index: i,\n\t                        color: d3.select(this).style(\"fill\")\n\t                    });\n\t                })\n\t                .on('mouseout', function(d,i) {\n\t                    d3.select(this).classed('hover', false);\n\t                    dispatch.elementMouseout({\n\t                        data: d,\n\t                        index: i,\n\t                        color: d3.select(this).style(\"fill\")\n\t                    });\n\t                })\n\t                .on('mouseout', function(d,i) {\n\t                    dispatch.elementMouseout({\n\t                        data: d,\n\t                        index: i,\n\t                        color: d3.select(this).style(\"fill\")\n\t                    });\n\t                })\n\t                .on('mousemove', function(d,i) {\n\t                    dispatch.elementMousemove({\n\t                        data: d,\n\t                        index: i,\n\t                        color: d3.select(this).style(\"fill\")\n\t                    });\n\t                })\n\t                .on('click', function(d,i) {\n\t                    var element = this;\n\t                    dispatch.elementClick({\n\t                        data: d,\n\t                        index: i,\n\t                        color: d3.select(this).style(\"fill\"),\n\t                        event: d3.event,\n\t                        element: element\n\t                    });\n\t                    d3.event.stopPropagation();\n\t                })\n\t                .on('dblclick', function(d,i) {\n\t                    dispatch.elementDblClick({\n\t                        data: d,\n\t                        index: i,\n\t                        color: d3.select(this).style(\"fill\")\n\t                    });\n\t                    d3.event.stopPropagation();\n\t                });\n\t\n\t            if (getYerr(data[0],0)) {\n\t                barsEnter.append('polyline');\n\t\n\t                bars.select('polyline')\n\t                    .attr('fill', 'none')\n\t                    .attr('points', function(d,i) {\n\t                        var xerr = getYerr(d,i)\n\t                            , mid = 0.8 * x.rangeBand() / ((stacked ? 1 : data.length) * 2);\n\t                        xerr = xerr.length ? xerr : [-Math.abs(xerr), Math.abs(xerr)];\n\t                        xerr = xerr.map(function(e) { return y(e) - y(0); });\n\t                        var a = [[xerr[0],-mid], [xerr[0],mid], [xerr[0],0], [xerr[1],0], [xerr[1],-mid], [xerr[1],mid]];\n\t                        return a.map(function (path) { return path.join(',') }).join(' ');\n\t                    })\n\t                    .attr('transform', function(d,i) {\n\t                        var mid = x.rangeBand() / ((stacked ? 1 : data.length) * 2);\n\t                        return 'translate(' + (getY(d,i) < 0 ? 0 : y(getY(d,i)) - y(0)) + ', ' + mid + ')'\n\t                    });\n\t            }\n\t\n\t            barsEnter.append('text');\n\t\n\t            if (showValues && !stacked) {\n\t                bars.select('text')\n\t                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'end' : 'start' })\n\t                    .attr('y', x.rangeBand() / (data.length * 2))\n\t                    .attr('dy', '.32em')\n\t                    .text(function(d,i) {\n\t                        var t = valueFormat(getY(d,i))\n\t                            , yerr = getYerr(d,i);\n\t                        if (yerr === undefined)\n\t                            return t;\n\t                        if (!yerr.length)\n\t                            return t + '±' + valueFormat(Math.abs(yerr));\n\t                        return t + '+' + valueFormat(Math.abs(yerr[1])) + '-' + valueFormat(Math.abs(yerr[0]));\n\t                    });\n\t                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n\t                    .select('text')\n\t                    .attr('x', function(d,i) { return getY(d,i) < 0 ? -4 : y(getY(d,i)) - y(0) + 4 })\n\t            } else {\n\t                bars.selectAll('text').text('');\n\t            }\n\t\n\t            if (showBarLabels && !stacked) {\n\t                barsEnter.append('text').classed('nv-bar-label',true);\n\t                bars.select('text.nv-bar-label')\n\t                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'start' : 'end' })\n\t                    .attr('y', x.rangeBand() / (data.length * 2))\n\t                    .attr('dy', '.32em')\n\t                    .text(function(d,i) { return getX(d,i) });\n\t                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n\t                    .select('text.nv-bar-label')\n\t                    .attr('x', function(d,i) { return getY(d,i) < 0 ? y(0) - y(getY(d,i)) + 4 : -4 });\n\t            }\n\t            else {\n\t                bars.selectAll('text.nv-bar-label').text('');\n\t            }\n\t\n\t            bars\n\t                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n\t\n\t            if (barColor) {\n\t                if (!disabled) disabled = data.map(function() { return true });\n\t                bars\n\t                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n\t                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n\t            }\n\t\n\t            if (stacked)\n\t                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n\t                    .attr('transform', function(d,i) {\n\t                        return 'translate(' + y(d.y1) + ',' + x(getX(d,i)) + ')'\n\t                    })\n\t                    .select('rect')\n\t                    .attr('width', function(d,i) {\n\t                        return Math.abs(y(getY(d,i) + d.y0) - y(d.y0)) || 0\n\t                    })\n\t                    .attr('height', x.rangeBand() );\n\t            else\n\t                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n\t                    .attr('transform', function(d,i) {\n\t                        //TODO: stacked must be all positive or all negative, not both?\n\t                        return 'translate(' +\n\t                            (getY(d,i) < 0 ? y(getY(d,i)) : y(0))\n\t                            + ',' +\n\t                            (d.series * x.rangeBand() / data.length\n\t                                +\n\t                                x(getX(d,i)) )\n\t                            + ')'\n\t                    })\n\t                    .select('rect')\n\t                    .attr('height', x.rangeBand() / data.length )\n\t                    .attr('width', function(d,i) {\n\t                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0\n\t                    });\n\t\n\t            //store old scales for use in transitions on update\n\t            x0 = x.copy();\n\t            y0 = y.copy();\n\t\n\t        });\n\t\n\t        renderWatch.renderEnd('multibarHorizontal immediate');\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    chart.dispatch = dispatch;\n\t\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:   {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:  {get: function(){return height;}, set: function(_){height=_;}},\n\t        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n\t        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n\t        yErr:       {get: function(){return getYerr;}, set: function(_){getYerr=_;}},\n\t        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n\t        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n\t        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n\t        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n\t        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n\t        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n\t        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n\t        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},\n\t        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},\n\t        // this shows the group name, seems pointless?\n\t        //showBarLabels:    {get: function(){return showBarLabels;}, set: function(_){showBarLabels=_;}},\n\t        disabled:     {get: function(){return disabled;}, set: function(_){disabled=_;}},\n\t        id:           {get: function(){return id;}, set: function(_){id=_;}},\n\t        valueFormat:  {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n\t        valuePadding: {get: function(){return valuePadding;}, set: function(_){valuePadding=_;}},\n\t        groupSpacing: {get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},\n\t        fillOpacity:  {get: function(){return fillOpacity;}, set: function(_){fillOpacity=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        duration: {get: function(){return duration;}, set: function(_){\n\t            duration = _;\n\t            renderWatch.reset(duration);\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t        }},\n\t        barColor:  {get: function(){return barColor;}, set: function(_){\n\t            barColor = _ ? nv.utils.getColor(_) : null;\n\t        }}\n\t    });\n\t\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t};\n\t\n\tnv.models.multiBarHorizontalChart = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var multibar = nv.models.multiBarHorizontal()\n\t        , xAxis = nv.models.axis()\n\t        , yAxis = nv.models.axis()\n\t        , legend = nv.models.legend().height(30)\n\t        , controls = nv.models.legend().height(30)\n\t        , tooltip = nv.models.tooltip()\n\t        ;\n\t\n\t    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n\t        , marginTop = null\n\t        , width = null\n\t        , height = null\n\t        , color = nv.utils.defaultColor()\n\t        , showControls = true\n\t        , controlLabels = {}\n\t        , showLegend = true\n\t        , showXAxis = true\n\t        , showYAxis = true\n\t        , stacked = false\n\t        , x //can be accessed via chart.xScale()\n\t        , y //can be accessed via chart.yScale()\n\t        , state = nv.utils.state()\n\t        , defaultState = null\n\t        , noData = null\n\t        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n\t        , controlWidth = function() { return showControls ? 180 : 0 }\n\t        , duration = 250\n\t        ;\n\t\n\t    state.stacked = false; // DEPRECATED Maintained for backward compatibility\n\t\n\t    multibar.stacked(stacked);\n\t\n\t    xAxis\n\t        .orient('left')\n\t        .tickPadding(5)\n\t        .showMaxMin(false)\n\t        .tickFormat(function(d) { return d })\n\t    ;\n\t    yAxis\n\t        .orient('bottom')\n\t        .tickFormat(d3.format(',.1f'))\n\t    ;\n\t\n\t    tooltip\n\t        .duration(0)\n\t        .valueFormatter(function(d, i) {\n\t            return yAxis.tickFormat()(d, i);\n\t        })\n\t        .headerFormatter(function(d, i) {\n\t            return xAxis.tickFormat()(d, i);\n\t        });\n\t\n\t    controls.updateState(false);\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var stateGetter = function(data) {\n\t        return function(){\n\t            return {\n\t                active: data.map(function(d) { return !d.disabled }),\n\t                stacked: stacked\n\t            };\n\t        }\n\t    };\n\t\n\t    var stateSetter = function(data) {\n\t        return function(state) {\n\t            if (state.stacked !== undefined)\n\t                stacked = state.stacked;\n\t            if (state.active !== undefined)\n\t                data.forEach(function(series,i) {\n\t                    series.disabled = !state.active[i];\n\t                });\n\t        }\n\t    };\n\t\n\t    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        renderWatch.models(multibar);\n\t        if (showXAxis) renderWatch.models(xAxis);\n\t        if (showYAxis) renderWatch.models(yAxis);\n\t\n\t        selection.each(function(data) {\n\t            var container = d3.select(this),\n\t                that = this;\n\t            nv.utils.initSVG(container);\n\t            var availableWidth = nv.utils.availableWidth(width, container, margin),\n\t                availableHeight = nv.utils.availableHeight(height, container, margin);\n\t\n\t            chart.update = function() { container.transition().duration(duration).call(chart) };\n\t            chart.container = this;\n\t\n\t            stacked = multibar.stacked();\n\t\n\t            state\n\t                .setter(stateSetter(data), chart.update)\n\t                .getter(stateGetter(data))\n\t                .update();\n\t\n\t            // DEPRECATED set state.disableddisabled\n\t            state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t            if (!defaultState) {\n\t                var key;\n\t                defaultState = {};\n\t                for (key in state) {\n\t                    if (state[key] instanceof Array)\n\t                        defaultState[key] = state[key].slice(0);\n\t                    else\n\t                        defaultState[key] = state[key];\n\t                }\n\t            }\n\t\n\t            // Display No Data message if there's nothing to show.\n\t            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t                nv.utils.noData(chart, container)\n\t                return chart;\n\t            } else {\n\t                container.selectAll('.nv-noData').remove();\n\t            }\n\t\n\t            // Setup Scales\n\t            x = multibar.xScale();\n\t            y = multibar.yScale().clamp(true);\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap.nv-multiBarHorizontalChart').data([data]);\n\t            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarHorizontalChart').append('g');\n\t            var g = wrap.select('g');\n\t\n\t            gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t            gEnter.append('g').attr('class', 'nv-y nv-axis')\n\t                .append('g').attr('class', 'nv-zeroLine')\n\t                .append('line');\n\t            gEnter.append('g').attr('class', 'nv-barsWrap');\n\t            gEnter.append('g').attr('class', 'nv-legendWrap');\n\t            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\t\n\t            // Legend\n\t            if (!showLegend) {\n\t                g.select('.nv-legendWrap').selectAll('*').remove();\n\t            } else {\n\t                legend.width(availableWidth - controlWidth());\n\t\n\t                g.select('.nv-legendWrap')\n\t                    .datum(data)\n\t                    .call(legend);\n\t\n\t                if (!marginTop && legend.height() !== margin.top) {\n\t                    margin.top = legend.height();\n\t                    availableHeight = nv.utils.availableHeight(height, container, margin);\n\t                }\n\t\n\t                g.select('.nv-legendWrap')\n\t                    .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n\t            }\n\t\n\t            // Controls\n\t            if (!showControls) {\n\t                 g.select('.nv-controlsWrap').selectAll('*').remove();\n\t            } else {\n\t                var controlsData = [\n\t                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },\n\t                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }\n\t                ];\n\t\n\t                controls.width(controlWidth()).color(['#444', '#444', '#444']);\n\t                g.select('.nv-controlsWrap')\n\t                    .datum(controlsData)\n\t                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n\t                    .call(controls);\n\t            }\n\t\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            // Main Chart Component(s)\n\t            multibar\n\t                .disabled(data.map(function(series) { return series.disabled }))\n\t                .width(availableWidth)\n\t                .height(availableHeight)\n\t                .color(data.map(function(d,i) {\n\t                    return d.color || color(d, i);\n\t                }).filter(function(d,i) { return !data[i].disabled }));\n\t\n\t            var barsWrap = g.select('.nv-barsWrap')\n\t                .datum(data.filter(function(d) { return !d.disabled }));\n\t\n\t            barsWrap.transition().call(multibar);\n\t\n\t            // Setup Axes\n\t            if (showXAxis) {\n\t                xAxis\n\t                    .scale(x)\n\t                    ._ticks( nv.utils.calcTicksY(availableHeight/24, data) )\n\t                    .tickSize(-availableWidth, 0);\n\t\n\t                g.select('.nv-x.nv-axis').call(xAxis);\n\t\n\t                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n\t\n\t                xTicks\n\t                    .selectAll('line, text');\n\t            }\n\t\n\t            if (showYAxis) {\n\t                yAxis\n\t                    .scale(y)\n\t                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n\t                    .tickSize( -availableHeight, 0);\n\t\n\t                g.select('.nv-y.nv-axis')\n\t                    .attr('transform', 'translate(0,' + availableHeight + ')');\n\t                g.select('.nv-y.nv-axis').call(yAxis);\n\t            }\n\t\n\t            // Zero line\n\t            g.select(\".nv-zeroLine line\")\n\t                .attr(\"x1\", y(0))\n\t                .attr(\"x2\", y(0))\n\t                .attr(\"y1\", 0)\n\t                .attr(\"y2\", -availableHeight)\n\t            ;\n\t\n\t            //============================================================\n\t            // Event Handling/Dispatching (in chart's scope)\n\t            //------------------------------------------------------------\n\t\n\t            legend.dispatch.on('stateChange', function(newState) {\n\t                for (var key in newState)\n\t                    state[key] = newState[key];\n\t                dispatch.stateChange(state);\n\t                chart.update();\n\t            });\n\t\n\t            controls.dispatch.on('legendClick', function(d,i) {\n\t                if (!d.disabled) return;\n\t                controlsData = controlsData.map(function(s) {\n\t                    s.disabled = true;\n\t                    return s;\n\t                });\n\t                d.disabled = false;\n\t\n\t                switch (d.key) {\n\t                    case 'Grouped':\n\t                    case controlLabels.grouped:\n\t                        multibar.stacked(false);\n\t                        break;\n\t                    case 'Stacked':\n\t                    case controlLabels.stacked:\n\t                        multibar.stacked(true);\n\t                        break;\n\t                }\n\t\n\t                state.stacked = multibar.stacked();\n\t                dispatch.stateChange(state);\n\t                stacked = multibar.stacked();\n\t\n\t                chart.update();\n\t            });\n\t\n\t            // Update chart from a state object passed to event handler\n\t            dispatch.on('changeState', function(e) {\n\t\n\t                if (typeof e.disabled !== 'undefined') {\n\t                    data.forEach(function(series,i) {\n\t                        series.disabled = e.disabled[i];\n\t                    });\n\t\n\t                    state.disabled = e.disabled;\n\t                }\n\t\n\t                if (typeof e.stacked !== 'undefined') {\n\t                    multibar.stacked(e.stacked);\n\t                    state.stacked = e.stacked;\n\t                    stacked = e.stacked;\n\t                }\n\t\n\t                chart.update();\n\t            });\n\t        });\n\t        renderWatch.renderEnd('multibar horizontal chart immediate');\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Event Handling/Dispatching (out of chart's scope)\n\t    //------------------------------------------------------------\n\t\n\t    multibar.dispatch.on('elementMouseover.tooltip', function(evt) {\n\t        evt.value = chart.x()(evt.data);\n\t        evt['series'] = {\n\t            key: evt.data.key,\n\t            value: chart.y()(evt.data),\n\t            color: evt.color\n\t        };\n\t        tooltip.data(evt).hidden(false);\n\t    });\n\t\n\t    multibar.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t        tooltip.hidden(true);\n\t    });\n\t\n\t    multibar.dispatch.on('elementMousemove.tooltip', function(evt) {\n\t        tooltip();\n\t    });\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    // expose chart's sub-components\n\t    chart.dispatch = dispatch;\n\t    chart.multibar = multibar;\n\t    chart.legend = legend;\n\t    chart.controls = controls;\n\t    chart.xAxis = xAxis;\n\t    chart.yAxis = yAxis;\n\t    chart.state = state;\n\t    chart.tooltip = tooltip;\n\t\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:      {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\t        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n\t        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},\n\t        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n\t        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n\t        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n\t        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n\t        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            if (_.top !== undefined) {\n\t                margin.top = _.top;\n\t                marginTop = _.top;\n\t            }\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        duration: {get: function(){return duration;}, set: function(_){\n\t            duration = _;\n\t            renderWatch.reset(duration);\n\t            multibar.duration(duration);\n\t            xAxis.duration(duration);\n\t            yAxis.duration(duration);\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t            legend.color(color);\n\t        }},\n\t        barColor:  {get: function(){return multibar.barColor;}, set: function(_){\n\t            multibar.barColor(_);\n\t            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})\n\t        }}\n\t    });\n\t\n\t    nv.utils.inheritOptions(chart, multibar);\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t};\n\tnv.models.multiChart = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var margin = {top: 30, right: 20, bottom: 50, left: 60},\n\t        marginTop = null,\n\t        color = nv.utils.defaultColor(),\n\t        width = null,\n\t        height = null,\n\t        showLegend = true,\n\t        noData = null,\n\t        yDomain1,\n\t        yDomain2,\n\t        getX = function(d) { return d.x },\n\t        getY = function(d) { return d.y},\n\t        interpolate = 'linear',\n\t        useVoronoi = true,\n\t        interactiveLayer = nv.interactiveGuideline(),\n\t        useInteractiveGuideline = false,\n\t        legendRightAxisHint = ' (right axis)',\n\t        duration = 250\n\t        ;\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var x = d3.scale.linear(),\n\t        yScale1 = d3.scale.linear(),\n\t        yScale2 = d3.scale.linear(),\n\t\n\t        lines1 = nv.models.line().yScale(yScale1).duration(duration),\n\t        lines2 = nv.models.line().yScale(yScale2).duration(duration),\n\t\n\t        scatters1 = nv.models.scatter().yScale(yScale1).duration(duration),\n\t        scatters2 = nv.models.scatter().yScale(yScale2).duration(duration),\n\t\n\t        bars1 = nv.models.multiBar().stacked(false).yScale(yScale1).duration(duration),\n\t        bars2 = nv.models.multiBar().stacked(false).yScale(yScale2).duration(duration),\n\t\n\t        stack1 = nv.models.stackedArea().yScale(yScale1).duration(duration),\n\t        stack2 = nv.models.stackedArea().yScale(yScale2).duration(duration),\n\t\n\t        xAxis = nv.models.axis().scale(x).orient('bottom').tickPadding(5).duration(duration),\n\t        yAxis1 = nv.models.axis().scale(yScale1).orient('left').duration(duration),\n\t        yAxis2 = nv.models.axis().scale(yScale2).orient('right').duration(duration),\n\t\n\t        legend = nv.models.legend().height(30),\n\t        tooltip = nv.models.tooltip(),\n\t        dispatch = d3.dispatch();\n\t\n\t    var charts = [lines1, lines2, scatters1, scatters2, bars1, bars2, stack1, stack2];\n\t\n\t    function chart(selection) {\n\t        selection.each(function(data) {\n\t            var container = d3.select(this),\n\t                that = this;\n\t            nv.utils.initSVG(container);\n\t\n\t            chart.update = function() { container.transition().call(chart); };\n\t            chart.container = this;\n\t\n\t            var availableWidth = nv.utils.availableWidth(width, container, margin),\n\t                availableHeight = nv.utils.availableHeight(height, container, margin);\n\t\n\t            var dataLines1 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 1});\n\t            var dataLines2 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 2});\n\t            var dataScatters1 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 1});\n\t            var dataScatters2 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 2});\n\t            var dataBars1 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 1});\n\t            var dataBars2 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 2});\n\t            var dataStack1 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 1});\n\t            var dataStack2 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 2});\n\t\n\t            // Display noData message if there's nothing to show.\n\t            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t                nv.utils.noData(chart, container);\n\t                return chart;\n\t            } else {\n\t                container.selectAll('.nv-noData').remove();\n\t            }\n\t\n\t            var series1 = data.filter(function(d) {return !d.disabled && d.yAxis == 1})\n\t                .map(function(d) {\n\t                    return d.values.map(function(d,i) {\n\t                        return { x: getX(d), y: getY(d) }\n\t                    })\n\t                });\n\t\n\t            var series2 = data.filter(function(d) {return !d.disabled && d.yAxis == 2})\n\t                .map(function(d) {\n\t                    return d.values.map(function(d,i) {\n\t                        return { x: getX(d), y: getY(d) }\n\t                    })\n\t                });\n\t\n\t            x   .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x }))\n\t                .range([0, availableWidth]);\n\t\n\t            var wrap = container.selectAll('g.wrap.multiChart').data([data]);\n\t            var gEnter = wrap.enter().append('g').attr('class', 'wrap nvd3 multiChart').append('g');\n\t\n\t            gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t            gEnter.append('g').attr('class', 'nv-y1 nv-axis');\n\t            gEnter.append('g').attr('class', 'nv-y2 nv-axis');\n\t            gEnter.append('g').attr('class', 'stack1Wrap');\n\t            gEnter.append('g').attr('class', 'stack2Wrap');\n\t            gEnter.append('g').attr('class', 'bars1Wrap');\n\t            gEnter.append('g').attr('class', 'bars2Wrap');\n\t            gEnter.append('g').attr('class', 'scatters1Wrap');\n\t            gEnter.append('g').attr('class', 'scatters2Wrap');\n\t            gEnter.append('g').attr('class', 'lines1Wrap');\n\t            gEnter.append('g').attr('class', 'lines2Wrap');\n\t            gEnter.append('g').attr('class', 'legendWrap');\n\t            gEnter.append('g').attr('class', 'nv-interactive');\n\t\n\t            var g = wrap.select('g');\n\t\n\t            var color_array = data.map(function(d,i) {\n\t                return data[i].color || color(d, i);\n\t            });\n\t\n\t            // Legend\n\t            if (!showLegend) {\n\t                g.select('.legendWrap').selectAll('*').remove();\n\t            } else {\n\t                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;\n\t                var legendXPosition = legend.align() ? legendWidth : 0;\n\t\n\t                legend.width(legendWidth);\n\t                legend.color(color_array);\n\t\n\t                g.select('.legendWrap')\n\t                    .datum(data.map(function(series) {\n\t                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n\t                        series.key = series.originalKey + (series.yAxis == 1 ? '' : legendRightAxisHint);\n\t                        return series;\n\t                    }))\n\t                    .call(legend);\n\t\n\t                if (!marginTop && legend.height() !== margin.top) {\n\t                    margin.top = legend.height();\n\t                    availableHeight = nv.utils.availableHeight(height, container, margin);\n\t                }\n\t\n\t                g.select('.legendWrap')\n\t                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');\n\t            }\n\t\n\t            lines1\n\t                .width(availableWidth)\n\t                .height(availableHeight)\n\t                .interpolate(interpolate)\n\t                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'line'}));\n\t            lines2\n\t                .width(availableWidth)\n\t                .height(availableHeight)\n\t                .interpolate(interpolate)\n\t                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'line'}));\n\t            scatters1\n\t                .width(availableWidth)\n\t                .height(availableHeight)\n\t                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'scatter'}));\n\t            scatters2\n\t                .width(availableWidth)\n\t                .height(availableHeight)\n\t                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'scatter'}));\n\t            bars1\n\t                .width(availableWidth)\n\t                .height(availableHeight)\n\t                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'bar'}));\n\t            bars2\n\t                .width(availableWidth)\n\t                .height(availableHeight)\n\t                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'bar'}));\n\t            stack1\n\t                .width(availableWidth)\n\t                .height(availableHeight)\n\t                .interpolate(interpolate)\n\t                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'area'}));\n\t            stack2\n\t                .width(availableWidth)\n\t                .height(availableHeight)\n\t                .interpolate(interpolate)\n\t                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'area'}));\n\t\n\t            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            var lines1Wrap = g.select('.lines1Wrap')\n\t                .datum(dataLines1.filter(function(d){return !d.disabled}));\n\t            var scatters1Wrap = g.select('.scatters1Wrap')\n\t                .datum(dataScatters1.filter(function(d){return !d.disabled}));\n\t            var bars1Wrap = g.select('.bars1Wrap')\n\t                .datum(dataBars1.filter(function(d){return !d.disabled}));\n\t            var stack1Wrap = g.select('.stack1Wrap')\n\t                .datum(dataStack1.filter(function(d){return !d.disabled}));\n\t            var lines2Wrap = g.select('.lines2Wrap')\n\t                .datum(dataLines2.filter(function(d){return !d.disabled}));\n\t            var scatters2Wrap = g.select('.scatters2Wrap')\n\t                .datum(dataScatters2.filter(function(d){return !d.disabled}));\n\t            var bars2Wrap = g.select('.bars2Wrap')\n\t                .datum(dataBars2.filter(function(d){return !d.disabled}));\n\t            var stack2Wrap = g.select('.stack2Wrap')\n\t                .datum(dataStack2.filter(function(d){return !d.disabled}));\n\t\n\t            var extraValue1 = dataStack1.length ? dataStack1.map(function(a){return a.values}).reduce(function(a,b){\n\t                return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n\t            }).concat([{x:0, y:0}]) : [];\n\t            var extraValue2 = dataStack2.length ? dataStack2.map(function(a){return a.values}).reduce(function(a,b){\n\t                return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n\t            }).concat([{x:0, y:0}]) : [];\n\t\n\t            yScale1 .domain(yDomain1 || d3.extent(d3.merge(series1).concat(extraValue1), function(d) { return d.y } ))\n\t                .range([0, availableHeight]);\n\t\n\t            yScale2 .domain(yDomain2 || d3.extent(d3.merge(series2).concat(extraValue2), function(d) { return d.y } ))\n\t                .range([0, availableHeight]);\n\t\n\t            lines1.yDomain(yScale1.domain());\n\t            scatters1.yDomain(yScale1.domain());\n\t            bars1.yDomain(yScale1.domain());\n\t            stack1.yDomain(yScale1.domain());\n\t\n\t            lines2.yDomain(yScale2.domain());\n\t            scatters2.yDomain(yScale2.domain());\n\t            bars2.yDomain(yScale2.domain());\n\t            stack2.yDomain(yScale2.domain());\n\t\n\t            if(dataStack1.length){d3.transition(stack1Wrap).call(stack1);}\n\t            if(dataStack2.length){d3.transition(stack2Wrap).call(stack2);}\n\t\n\t            if(dataBars1.length){d3.transition(bars1Wrap).call(bars1);}\n\t            if(dataBars2.length){d3.transition(bars2Wrap).call(bars2);}\n\t\n\t            if(dataLines1.length){d3.transition(lines1Wrap).call(lines1);}\n\t            if(dataLines2.length){d3.transition(lines2Wrap).call(lines2);}\n\t\n\t            if(dataScatters1.length){d3.transition(scatters1Wrap).call(scatters1);}\n\t            if(dataScatters2.length){d3.transition(scatters2Wrap).call(scatters2);}\n\t\n\t            xAxis\n\t                ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n\t                .tickSize(-availableHeight, 0);\n\t\n\t            g.select('.nv-x.nv-axis')\n\t                .attr('transform', 'translate(0,' + availableHeight + ')');\n\t            d3.transition(g.select('.nv-x.nv-axis'))\n\t                .call(xAxis);\n\t\n\t            yAxis1\n\t                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n\t                .tickSize( -availableWidth, 0);\n\t\n\t\n\t            d3.transition(g.select('.nv-y1.nv-axis'))\n\t                .call(yAxis1);\n\t\n\t            yAxis2\n\t                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n\t                .tickSize( -availableWidth, 0);\n\t\n\t            d3.transition(g.select('.nv-y2.nv-axis'))\n\t                .call(yAxis2);\n\t\n\t            g.select('.nv-y1.nv-axis')\n\t                .classed('nv-disabled', series1.length ? false : true)\n\t                .attr('transform', 'translate(' + x.range()[0] + ',0)');\n\t\n\t            g.select('.nv-y2.nv-axis')\n\t                .classed('nv-disabled', series2.length ? false : true)\n\t                .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\t\n\t            legend.dispatch.on('stateChange', function(newState) {\n\t                chart.update();\n\t            });\n\t\n\t            if(useInteractiveGuideline){\n\t                interactiveLayer\n\t                    .width(availableWidth)\n\t                    .height(availableHeight)\n\t                    .margin({left:margin.left, top:margin.top})\n\t                    .svgContainer(container)\n\t                    .xScale(x);\n\t                wrap.select(\".nv-interactive\").call(interactiveLayer);\n\t            }\n\t\n\t            //============================================================\n\t            // Event Handling/Dispatching\n\t            //------------------------------------------------------------\n\t\n\t            function mouseover_line(evt) {\n\t                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;\n\t                evt.value = evt.point.x;\n\t                evt.series = {\n\t                    value: evt.point.y,\n\t                    color: evt.point.color,\n\t                    key: evt.series.key\n\t                };\n\t                tooltip\n\t                    .duration(0)\n\t                    .headerFormatter(function(d, i) {\n\t                    \treturn xAxis.tickFormat()(d, i);\n\t                    })\n\t                    .valueFormatter(function(d, i) {\n\t                        return yaxis.tickFormat()(d, i);\n\t                    })\n\t                    .data(evt)\n\t                    .hidden(false);\n\t            }\n\t\n\t            function mouseover_scatter(evt) {\n\t                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;\n\t                evt.value = evt.point.x;\n\t                evt.series = {\n\t                    value: evt.point.y,\n\t                    color: evt.point.color,\n\t                    key: evt.series.key\n\t                };\n\t                tooltip\n\t                    .duration(100)\n\t                    .headerFormatter(function(d, i) {\n\t                    \treturn xAxis.tickFormat()(d, i);\n\t                    })\n\t                    .valueFormatter(function(d, i) {\n\t                        return yaxis.tickFormat()(d, i);\n\t                    })\n\t                    .data(evt)\n\t                    .hidden(false);\n\t            }\n\t\n\t            function mouseover_stack(evt) {\n\t                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;\n\t                evt.point['x'] = stack1.x()(evt.point);\n\t                evt.point['y'] = stack1.y()(evt.point);\n\t                tooltip\n\t                    .duration(0)\n\t                    .headerFormatter(function(d, i) {\n\t                    \treturn xAxis.tickFormat()(d, i);\n\t                    })\n\t                    .valueFormatter(function(d, i) {\n\t                        return yaxis.tickFormat()(d, i);\n\t                    })\n\t                    .data(evt)\n\t                    .hidden(false);\n\t            }\n\t\n\t            function mouseover_bar(evt) {\n\t                var yaxis = data[evt.data.series].yAxis === 2 ? yAxis2 : yAxis1;\n\t\n\t                evt.value = bars1.x()(evt.data);\n\t                evt['series'] = {\n\t                    value: bars1.y()(evt.data),\n\t                    color: evt.color,\n\t                    key: evt.data.key\n\t                };\n\t                tooltip\n\t                    .duration(0)\n\t                    .headerFormatter(function(d, i) {\n\t                    \treturn xAxis.tickFormat()(d, i);\n\t                    })\n\t                    .valueFormatter(function(d, i) {\n\t                        return yaxis.tickFormat()(d, i);\n\t                    })\n\t                    .data(evt)\n\t                    .hidden(false);\n\t            }\n\t\n\t\n\t\n\t            function clearHighlights() {\n\t              for(var i=0, il=charts.length; i < il; i++){\n\t                var chart = charts[i];\n\t                try {\n\t                  chart.clearHighlights();\n\t                } catch(e){}\n\t              }\n\t            }\n\t\n\t            function highlightPoint(serieIndex, pointIndex, b){\n\t              for(var i=0, il=charts.length; i < il; i++){\n\t                var chart = charts[i];\n\t                try {\n\t                  chart.highlightPoint(serieIndex, pointIndex, b);\n\t                } catch(e){}\n\t              }\n\t            }\n\t\n\t            if(useInteractiveGuideline){\n\t                interactiveLayer.dispatch.on('elementMousemove', function(e) {\n\t                    clearHighlights();\n\t                    var singlePoint, pointIndex, pointXLocation, allData = [];\n\t                    data\n\t                    .filter(function(series, i) {\n\t                        series.seriesIndex = i;\n\t                        return !series.disabled;\n\t                    })\n\t                    .forEach(function(series,i) {\n\t                        var extent = x.domain();\n\t                        var currentValues = series.values.filter(function(d,i) {\n\t                            return chart.x()(d,i) >= extent[0] && chart.x()(d,i) <= extent[1];\n\t                        });\n\t\n\t                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, chart.x());\n\t                        var point = currentValues[pointIndex];\n\t                        var pointYValue = chart.y()(point, pointIndex);\n\t                        if (pointYValue !== null) {\n\t                            highlightPoint(i, pointIndex, true);\n\t                        }\n\t                        if (point === undefined) return;\n\t                        if (singlePoint === undefined) singlePoint = point;\n\t                        if (pointXLocation === undefined) pointXLocation = x(chart.x()(point,pointIndex));\n\t                        allData.push({\n\t                            key: series.key,\n\t                            value: pointYValue,\n\t                            color: color(series,series.seriesIndex),\n\t                            data: point,\n\t                            yAxis: series.yAxis == 2 ? yAxis2 : yAxis1\n\t                        });\n\t                    });\n\t\n\t                    var defaultValueFormatter = function(d,i) {\n\t                        var yAxis = allData[i].yAxis;\n\t                        return d == null ? \"N/A\" : yAxis.tickFormat()(d);\n\t                    };\n\t\n\t                    interactiveLayer.tooltip\n\t                        .headerFormatter(function(d, i) {\n\t                            return xAxis.tickFormat()(d, i);\n\t                        })\n\t                        .valueFormatter(interactiveLayer.tooltip.valueFormatter() || defaultValueFormatter)\n\t                        .data({\n\t                            value: chart.x()( singlePoint,pointIndex ),\n\t                            index: pointIndex,\n\t                            series: allData\n\t                        })();\n\t\n\t                    interactiveLayer.renderGuideLine(pointXLocation);\n\t                });\n\t\n\t                interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n\t                    clearHighlights();\n\t                });\n\t            } else {\n\t                lines1.dispatch.on('elementMouseover.tooltip', mouseover_line);\n\t                lines2.dispatch.on('elementMouseover.tooltip', mouseover_line);\n\t                lines1.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t                    tooltip.hidden(true)\n\t                });\n\t                lines2.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t                    tooltip.hidden(true)\n\t                });\n\t\n\t                scatters1.dispatch.on('elementMouseover.tooltip', mouseover_scatter);\n\t                scatters2.dispatch.on('elementMouseover.tooltip', mouseover_scatter);\n\t                scatters1.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t                    tooltip.hidden(true)\n\t                });\n\t                scatters2.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t                    tooltip.hidden(true)\n\t                });\n\t\n\t                stack1.dispatch.on('elementMouseover.tooltip', mouseover_stack);\n\t                stack2.dispatch.on('elementMouseover.tooltip', mouseover_stack);\n\t                stack1.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t                    tooltip.hidden(true)\n\t                });\n\t                stack2.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t                    tooltip.hidden(true)\n\t                });\n\t\n\t                bars1.dispatch.on('elementMouseover.tooltip', mouseover_bar);\n\t                bars2.dispatch.on('elementMouseover.tooltip', mouseover_bar);\n\t\n\t                bars1.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t                    tooltip.hidden(true);\n\t                });\n\t                bars2.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t                    tooltip.hidden(true);\n\t                });\n\t                bars1.dispatch.on('elementMousemove.tooltip', function(evt) {\n\t                    tooltip();\n\t                });\n\t                bars2.dispatch.on('elementMousemove.tooltip', function(evt) {\n\t                    tooltip();\n\t                });\n\t            }\n\t        });\n\t\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Global getters and setters\n\t    //------------------------------------------------------------\n\t\n\t    chart.dispatch = dispatch;\n\t    chart.legend = legend;\n\t    chart.lines1 = lines1;\n\t    chart.lines2 = lines2;\n\t    chart.scatters1 = scatters1;\n\t    chart.scatters2 = scatters2;\n\t    chart.bars1 = bars1;\n\t    chart.bars2 = bars2;\n\t    chart.stack1 = stack1;\n\t    chart.stack2 = stack2;\n\t    chart.xAxis = xAxis;\n\t    chart.yAxis1 = yAxis1;\n\t    chart.yAxis2 = yAxis2;\n\t    chart.tooltip = tooltip;\n\t    chart.interactiveLayer = interactiveLayer;\n\t\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:      {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\t        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n\t        yDomain1:      {get: function(){return yDomain1;}, set: function(_){yDomain1=_;}},\n\t        yDomain2:    {get: function(){return yDomain2;}, set: function(_){yDomain2=_;}},\n\t        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\t        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n\t        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            if (_.top !== undefined) {\n\t                margin.top = _.top;\n\t                marginTop = _.top;\n\t            }\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t        }},\n\t        x: {get: function(){return getX;}, set: function(_){\n\t            getX = _;\n\t            lines1.x(_);\n\t            lines2.x(_);\n\t            scatters1.x(_);\n\t            scatters2.x(_);\n\t            bars1.x(_);\n\t            bars2.x(_);\n\t            stack1.x(_);\n\t            stack2.x(_);\n\t        }},\n\t        y: {get: function(){return getY;}, set: function(_){\n\t            getY = _;\n\t            lines1.y(_);\n\t            lines2.y(_);\n\t            scatters1.y(_);\n\t            scatters2.y(_);\n\t            stack1.y(_);\n\t            stack2.y(_);\n\t            bars1.y(_);\n\t            bars2.y(_);\n\t        }},\n\t        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){\n\t            useVoronoi=_;\n\t            lines1.useVoronoi(_);\n\t            lines2.useVoronoi(_);\n\t            stack1.useVoronoi(_);\n\t            stack2.useVoronoi(_);\n\t        }},\n\t\n\t        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n\t            useInteractiveGuideline = _;\n\t            if (useInteractiveGuideline) {\n\t                lines1.interactive(false);\n\t                lines1.useVoronoi(false);\n\t                lines2.interactive(false);\n\t                lines2.useVoronoi(false);\n\t                stack1.interactive(false);\n\t                stack1.useVoronoi(false);\n\t                stack2.interactive(false);\n\t                stack2.useVoronoi(false);\n\t                scatters1.interactive(false);\n\t                scatters2.interactive(false);\n\t            }\n\t        }},\n\t\n\t        duration: {get: function(){return duration;}, set: function(_) {\n\t            duration = _;\n\t            [lines1, lines2, stack1, stack2, scatters1, scatters2, xAxis, yAxis1, yAxis2].forEach(function(model){\n\t              model.duration(duration);\n\t            });\n\t        }}\n\t    });\n\t\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t};\n\t\n\tnv.models.ohlcBar = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t        , width = null\n\t        , height = null\n\t        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n\t        , container = null\n\t        , x = d3.scale.linear()\n\t        , y = d3.scale.linear()\n\t        , getX = function(d) { return d.x }\n\t        , getY = function(d) { return d.y }\n\t        , getOpen = function(d) { return d.open }\n\t        , getClose = function(d) { return d.close }\n\t        , getHigh = function(d) { return d.high }\n\t        , getLow = function(d) { return d.low }\n\t        , forceX = []\n\t        , forceY = []\n\t        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n\t        , clipEdge = true\n\t        , color = nv.utils.defaultColor()\n\t        , interactive = false\n\t        , xDomain\n\t        , yDomain\n\t        , xRange\n\t        , yRange\n\t        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')\n\t        ;\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    function chart(selection) {\n\t        selection.each(function(data) {\n\t            container = d3.select(this);\n\t            var availableWidth = nv.utils.availableWidth(width, container, margin),\n\t                availableHeight = nv.utils.availableHeight(height, container, margin);\n\t\n\t            nv.utils.initSVG(container);\n\t\n\t            // ohlc bar width.\n\t            var w = (availableWidth / data[0].values.length) * .9;\n\t\n\t            // Setup Scales\n\t            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\t\n\t            if (padData)\n\t                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n\t            else\n\t                x.range(xRange || [5 + w/2, availableWidth - w/2 - 5]);\n\t\n\t            y.domain(yDomain || [\n\t                    d3.min(data[0].values.map(getLow).concat(forceY)),\n\t                    d3.max(data[0].values.map(getHigh).concat(forceY))\n\t                ]\n\t            ).range(yRange || [availableHeight, 0]);\n\t\n\t            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n\t            if (x.domain()[0] === x.domain()[1])\n\t                x.domain()[0] ?\n\t                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n\t                    : x.domain([-1,1]);\n\t\n\t            if (y.domain()[0] === y.domain()[1])\n\t                y.domain()[0] ?\n\t                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n\t                    : y.domain([-1,1]);\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-ohlcBar').data([data[0].values]);\n\t            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-ohlcBar');\n\t            var defsEnter = wrapEnter.append('defs');\n\t            var gEnter = wrapEnter.append('g');\n\t            var g = wrap.select('g');\n\t\n\t            gEnter.append('g').attr('class', 'nv-ticks');\n\t\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            container\n\t                .on('click', function(d,i) {\n\t                    dispatch.chartClick({\n\t                        data: d,\n\t                        index: i,\n\t                        pos: d3.event,\n\t                        id: id\n\t                    });\n\t                });\n\t\n\t            defsEnter.append('clipPath')\n\t                .attr('id', 'nv-chart-clip-path-' + id)\n\t                .append('rect');\n\t\n\t            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n\t                .attr('width', availableWidth)\n\t                .attr('height', availableHeight);\n\t\n\t            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\t\n\t            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')\n\t                .data(function(d) { return d });\n\t            ticks.exit().remove();\n\t\n\t            ticks.enter().append('path')\n\t                .attr('class', function(d,i,j) { return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i })\n\t                .attr('d', function(d,i) {\n\t                    return 'm0,0l0,'\n\t                        + (y(getOpen(d,i))\n\t                            - y(getHigh(d,i)))\n\t                        + 'l'\n\t                        + (-w/2)\n\t                        + ',0l'\n\t                        + (w/2)\n\t                        + ',0l0,'\n\t                        + (y(getLow(d,i)) - y(getOpen(d,i)))\n\t                        + 'l0,'\n\t                        + (y(getClose(d,i))\n\t                            - y(getLow(d,i)))\n\t                        + 'l'\n\t                        + (w/2)\n\t                        + ',0l'\n\t                        + (-w/2)\n\t                        + ',0z';\n\t                })\n\t                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n\t                .attr('fill', function(d,i) { return color[0]; })\n\t                .attr('stroke', function(d,i) { return color[0]; })\n\t                .attr('x', 0 )\n\t                .attr('y', function(d,i) {  return y(Math.max(0, getY(d,i))) })\n\t                .attr('height', function(d,i) { return Math.abs(y(getY(d,i)) - y(0)) });\n\t\n\t            // the bar colors are controlled by CSS currently\n\t            ticks.attr('class', function(d,i,j) {\n\t                return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i;\n\t            });\n\t\n\t            d3.transition(ticks)\n\t                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n\t                .attr('d', function(d,i) {\n\t                    var w = (availableWidth / data[0].values.length) * .9;\n\t                    return 'm0,0l0,'\n\t                        + (y(getOpen(d,i))\n\t                            - y(getHigh(d,i)))\n\t                        + 'l'\n\t                        + (-w/2)\n\t                        + ',0l'\n\t                        + (w/2)\n\t                        + ',0l0,'\n\t                        + (y(getLow(d,i))\n\t                            - y(getOpen(d,i)))\n\t                        + 'l0,'\n\t                        + (y(getClose(d,i))\n\t                            - y(getLow(d,i)))\n\t                        + 'l'\n\t                        + (w/2)\n\t                        + ',0l'\n\t                        + (-w/2)\n\t                        + ',0z';\n\t                });\n\t        });\n\t\n\t        return chart;\n\t    }\n\t\n\t\n\t    //Create methods to allow outside functions to highlight a specific bar.\n\t    chart.highlightPoint = function(pointIndex, isHoverOver) {\n\t        chart.clearHighlights();\n\t        container.select(\".nv-ohlcBar .nv-tick-0-\" + pointIndex)\n\t            .classed(\"hover\", isHoverOver)\n\t        ;\n\t    };\n\t\n\t    chart.clearHighlights = function() {\n\t        container.select(\".nv-ohlcBar .nv-tick.hover\")\n\t            .classed(\"hover\", false)\n\t        ;\n\t    };\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    chart.dispatch = dispatch;\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:    {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:   {get: function(){return height;}, set: function(_){height=_;}},\n\t        xScale:   {get: function(){return x;}, set: function(_){x=_;}},\n\t        yScale:   {get: function(){return y;}, set: function(_){y=_;}},\n\t        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n\t        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n\t        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},\n\t        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},\n\t        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},\n\t        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},\n\t        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},\n\t        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n\t        id:       {get: function(){return id;}, set: function(_){id=_;}},\n\t        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\t\n\t        x:     {get: function(){return getX;}, set: function(_){getX=_;}},\n\t        y:     {get: function(){return getY;}, set: function(_){getY=_;}},\n\t        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},\n\t        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},\n\t        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},\n\t        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    != undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  != undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   != undefined ? _.left   : margin.left;\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t        }}\n\t    });\n\t\n\t    nv.utils.initOptions(chart);\n\t    return chart;\n\t};\n\t// Code adapted from Jason Davies' \"Parallel Coordinates\"\n\t// http://bl.ocks.org/jasondavies/1341281\n\tnv.models.parallelCoordinates = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var margin = {top: 30, right: 0, bottom: 10, left: 0}\n\t        , width = null\n\t        , height = null\n\t        , availableWidth = null\n\t        , availableHeight = null\n\t        , x = d3.scale.ordinal()\n\t        , y = {}\n\t        , undefinedValuesLabel = \"undefined values\"\n\t        , dimensionData = []\n\t        , enabledDimensions = []\n\t        , dimensionNames = []\n\t        , displayBrush = true\n\t        , color = nv.utils.defaultColor()\n\t        , filters = []\n\t        , active = []\n\t        , dragging = []\n\t        , axisWithUndefinedValues = []\n\t        , lineTension = 1\n\t        , foreground\n\t        , background\n\t        , dimensions\n\t        , line = d3.svg.line()\n\t        , axis = d3.svg.axis()\n\t        , dispatch = d3.dispatch('brushstart', 'brush', 'brushEnd', 'dimensionsOrder', \"stateChange\", 'elementClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd', 'activeChanged')\n\t        ;\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var renderWatch = nv.utils.renderWatch(dispatch);\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        selection.each(function(data) {\n\t            var container = d3.select(this);\n\t            availableWidth = nv.utils.availableWidth(width, container, margin);\n\t            availableHeight = nv.utils.availableHeight(height, container, margin);\n\t\n\t            nv.utils.initSVG(container);\n\t\n\t           //Convert old data to new format (name, values)\n\t            if (data[0].values === undefined) {\n\t                var newData = [];\n\t                data.forEach(function (d) {\n\t                        var val = {};\n\t                        var key = Object.keys(d);\n\t                        key.forEach(function (k) { if (k !== \"name\") val[k] = d[k] });\n\t                        newData.push({ key: d.name, values: val });\n\t                });\n\t                data = newData;\n\t            }\n\t\n\t            var dataValues = data.map(function (d) {return d.values});\n\t            if (active.length === 0) {\n\t                active = data;\n\t            }; //set all active before first brush call\n\t            \n\t            dimensionNames = dimensionData.sort(function (a, b) { return a.currentPosition - b.currentPosition; }).map(function (d) { return d.key });\n\t            enabledDimensions = dimensionData.filter(function (d) { return !d.disabled; });\n\t            \n\t            // Setup Scales\n\t            x.rangePoints([0, availableWidth], 1).domain(enabledDimensions.map(function (d) { return d.key; }));\n\t\n\t            //Set as true if all values on an axis are missing.\n\t            // Extract the list of dimensions and create a scale for each.\n\t            var oldDomainMaxValue = {};\n\t            var displayMissingValuesline = false;\n\t            var currentTicks = [];\n\t            \n\t            dimensionNames.forEach(function(d) {\n\t                var extent = d3.extent(dataValues, function (p) { return +p[d]; });\n\t                var min = extent[0];\n\t                var max = extent[1];\n\t                var onlyUndefinedValues = false;\n\t                //If there is no values to display on an axis, set the extent to 0\n\t                if (isNaN(min) || isNaN(max)) {\n\t                    onlyUndefinedValues = true;\n\t                    min = 0;\n\t                    max = 0;\n\t                }\n\t                //Scale axis if there is only one value\n\t                if (min === max) {\n\t                    min = min - 1;\n\t                    max = max + 1;\n\t                }\n\t                var f = filters.filter(function (k) { return k.dimension == d; });\n\t                if (f.length !== 0) {\n\t                    //If there is only NaN values, keep the existing domain.\n\t                    if (onlyUndefinedValues) {\n\t                        min = y[d].domain()[0];\n\t                        max = y[d].domain()[1];\n\t                    }\n\t                        //If the brush extent is > max (< min), keep the extent value.\n\t                    else if (!f[0].hasOnlyNaN && displayBrush) {\n\t                        min = min > f[0].extent[0] ? f[0].extent[0] : min;\n\t                        max = max < f[0].extent[1] ? f[0].extent[1] : max;\n\t                    }\n\t                        //If there is NaN values brushed be sure the brush extent is on the domain.\n\t                    else if (f[0].hasNaN) {\n\t                        max = max < f[0].extent[1] ? f[0].extent[1] : max;\n\t                        oldDomainMaxValue[d] = y[d].domain()[1];\n\t                        displayMissingValuesline = true;\n\t                    }\n\t                }\n\t                //Use 90% of (availableHeight - 12) for the axis range, 12 reprensenting the space necessary to display \"undefined values\" text.\n\t                //The remaining 10% are used to display the missingValue line.\n\t                y[d] = d3.scale.linear()\n\t                    .domain([min, max])\n\t                    .range([(availableHeight - 12) * 0.9, 0]);\n\t\n\t                axisWithUndefinedValues = [];\n\t                y[d].brush = d3.svg.brush().y(y[d]).on('brushstart', brushstart).on('brush', brush).on('brushend', brushend);\n\t            });\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinates').data([data]);\n\t            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinates');\n\t            var gEnter = wrapEnter.append('g');\n\t            var g = wrap.select('g');\n\t\n\t            gEnter.append('g').attr('class', 'nv-parallelCoordinates background');\n\t            gEnter.append('g').attr('class', 'nv-parallelCoordinates foreground');\n\t            gEnter.append('g').attr('class', 'nv-parallelCoordinates missingValuesline');\n\t\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            line.interpolate('cardinal').tension(lineTension);\n\t            axis.orient('left');\n\t            var axisDrag = d3.behavior.drag()\n\t                        .on('dragstart', dragStart)\n\t                        .on('drag', dragMove)\n\t                        .on('dragend', dragEnd);\n\t\n\t            //Add missing value line at the bottom of the chart\n\t            var missingValuesline, missingValueslineText;\n\t            var step = x.range()[1] - x.range()[0];\n\t            step = isNaN(step) ? x.range()[0] : step;\n\t            if (!isNaN(step)) {\n\t                var lineData = [0 + step / 2, availableHeight - 12, availableWidth - step / 2, availableHeight - 12];\n\t                missingValuesline = wrap.select('.missingValuesline').selectAll('line').data([lineData]);\n\t                missingValuesline.enter().append('line');\n\t                missingValuesline.exit().remove();\n\t                missingValuesline.attr(\"x1\", function(d) { return d[0]; })\n\t                        .attr(\"y1\", function(d) { return d[1]; })\n\t                        .attr(\"x2\", function(d) { return d[2]; })\n\t                        .attr(\"y2\", function(d) { return d[3]; });\n\t    \n\t                //Add the text \"undefined values\" under the missing value line\n\t                missingValueslineText = wrap.select('.missingValuesline').selectAll('text').data([undefinedValuesLabel]);\n\t                missingValueslineText.append('text').data([undefinedValuesLabel]);\n\t                missingValueslineText.enter().append('text');\n\t                missingValueslineText.exit().remove();\n\t                missingValueslineText.attr(\"y\", availableHeight)\n\t                        //To have the text right align with the missingValues line, substract 92 representing the text size.\n\t                        .attr(\"x\", availableWidth - 92 - step / 2)\n\t                        .text(function(d) { return d; });\n\t            }\n\t            // Add grey background lines for context.\n\t            background = wrap.select('.background').selectAll('path').data(data);\n\t            background.enter().append('path');\n\t            background.exit().remove();\n\t            background.attr('d', path);\n\t\n\t            // Add blue foreground lines for focus.\n\t            foreground = wrap.select('.foreground').selectAll('path').data(data);\n\t            foreground.enter().append('path')\n\t            foreground.exit().remove();\n\t            foreground.attr('d', path)\n\t                .style(\"stroke-width\", function (d, i) {\n\t                if (isNaN(d.strokeWidth)) { d.strokeWidth = 1;} return d.strokeWidth;})\n\t                .attr('stroke', function (d, i) { return d.color || color(d, i); });\n\t            foreground.on(\"mouseover\", function (d, i) {\n\t                d3.select(this).classed('hover', true).style(\"stroke-width\", d.strokeWidth + 2 + \"px\").style(\"stroke-opacity\", 1);\n\t                dispatch.elementMouseover({\n\t                    label: d.name,\n\t                    color: d.color || color(d, i),\n\t                    values: d.values,\n\t                    dimensions: enabledDimensions\n\t                });\n\t\n\t            });\n\t            foreground.on(\"mouseout\", function (d, i) {\n\t                d3.select(this).classed('hover', false).style(\"stroke-width\", d.strokeWidth + \"px\").style(\"stroke-opacity\", 0.7);\n\t                dispatch.elementMouseout({\n\t                    label: d.name,\n\t                    index: i\n\t                });\n\t            });\n\t            foreground.on('mousemove', function (d, i) {\n\t                dispatch.elementMousemove();\n\t            });\n\t            foreground.on('click', function (d) {\n\t                dispatch.elementClick({\n\t                    id: d.id\n\t                });\n\t            });\n\t            // Add a group element for each dimension.\n\t            dimensions = g.selectAll('.dimension').data(enabledDimensions);\n\t            var dimensionsEnter = dimensions.enter().append('g').attr('class', 'nv-parallelCoordinates dimension');\n\t\n\t            dimensions.attr('transform', function(d) { return 'translate(' + x(d.key) + ',0)'; });\n\t            dimensionsEnter.append('g').attr('class', 'nv-axis');\n\t\n\t            // Add an axis and title.\n\t            dimensionsEnter.append('text')\n\t                .attr('class', 'nv-label')\n\t                .style(\"cursor\", \"move\")\n\t                .attr('dy', '-1em')\n\t                .attr('text-anchor', 'middle')\n\t                .on(\"mouseover\", function(d, i) {\n\t                    dispatch.elementMouseover({\n\t                        label: d.tooltip || d.key,\n\t                        color: d.color \n\t                    });\n\t                })\n\t                .on(\"mouseout\", function(d, i) {\n\t                    dispatch.elementMouseout({\n\t                        label: d.tooltip\n\t                    });\n\t                })\n\t                .on('mousemove', function (d, i) {\n\t                    dispatch.elementMousemove();\n\t                })\n\t                .call(axisDrag);\n\t\n\t            dimensionsEnter.append('g').attr('class', 'nv-brushBackground');\n\t            dimensions.exit().remove();\n\t            dimensions.select('.nv-label').text(function (d) { return d.key });\n\t\n\t            // Add and store a brush for each axis.\n\t            restoreBrush(displayBrush);\n\t\n\t            var actives = dimensionNames.filter(function (p) { return !y[p].brush.empty(); }),\n\t                    extents = actives.map(function (p) { return y[p].brush.extent(); });\n\t            var formerActive = active.slice(0);\n\t\n\t            //Restore active values\n\t            active = [];\n\t            foreground.style(\"display\", function (d) {\n\t                var isActive = actives.every(function (p, i) {\n\t                    if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) {\n\t                        return true;\n\t                    }\n\t                    return (extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1]) && !isNaN(parseFloat(d.values[p]));\n\t                });\n\t                if (isActive)\n\t                    active.push(d);\n\t                return !isActive ? \"none\" : null;\n\t\n\t            });\n\t\n\t            if (filters.length > 0 || !nv.utils.arrayEquals(active, formerActive)) {\n\t               dispatch.activeChanged(active);\n\t            }\n\t\n\t            // Returns the path for a given data point.\n\t            function path(d) {\n\t                return line(enabledDimensions.map(function (p) {\n\t                    //If value if missing, put the value on the missing value line\n\t                    if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key])) || displayMissingValuesline) {\n\t                        var domain = y[p.key].domain();\n\t                        var range = y[p.key].range();\n\t                        var min = domain[0] - (domain[1] - domain[0]) / 9;\n\t\n\t                        //If it's not already the case, allow brush to select undefined values\n\t                        if (axisWithUndefinedValues.indexOf(p.key) < 0) {\n\t\n\t                            var newscale = d3.scale.linear().domain([min, domain[1]]).range([availableHeight - 12, range[1]]);\n\t                            y[p.key].brush.y(newscale);\n\t                            axisWithUndefinedValues.push(p.key);\n\t                        }\n\t                        if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key]))) {\n\t                            return [x(p.key), y[p.key](min)];\n\t                        }\n\t                    }\n\t\n\t                    //If parallelCoordinate contain missing values show the missing values line otherwise, hide it.\n\t                    if (missingValuesline !== undefined) {\n\t                        if (axisWithUndefinedValues.length > 0 || displayMissingValuesline) {\n\t                            missingValuesline.style(\"display\", \"inline\");\n\t                            missingValueslineText.style(\"display\", \"inline\");\n\t                        } else {\n\t                            missingValuesline.style(\"display\", \"none\");\n\t                            missingValueslineText.style(\"display\", \"none\");\n\t                        }\n\t                    }\n\t                    return [x(p.key), y[p.key](d.values[p.key])];\n\t                }));\n\t            }\n\t\n\t            function restoreBrush(visible) {\n\t                filters.forEach(function (f) {\n\t                    //If filter brushed NaN values, keep the brush on the bottom of the axis.\n\t                    var brushDomain = y[f.dimension].brush.y().domain();\n\t                    if (f.hasOnlyNaN) {\n\t                        f.extent[1] = (y[f.dimension].domain()[1] - brushDomain[0]) * (f.extent[1] - f.extent[0]) / (oldDomainMaxValue[f.dimension] - f.extent[0]) + brushDomain[0];\n\t                    }\n\t                    if (f.hasNaN) {\n\t                        f.extent[0] = brushDomain[0];\n\t                    }\n\t                    if (visible)\n\t                        y[f.dimension].brush.extent(f.extent);\n\t                });\n\t                \n\t                dimensions.select('.nv-brushBackground')\n\t                    .each(function (d) {\n\t                        d3.select(this).call(y[d.key].brush);\n\t\n\t                    })\n\t                    .selectAll('rect')\n\t                    .attr('x', -8)\n\t                    .attr('width', 16);\n\t                \n\t                updateTicks();\n\t            }\n\t            \n\t            // Handles a brush event, toggling the display of foreground lines.\n\t            function brushstart() {\n\t                //If brush aren't visible, show it before brushing again.\n\t                if (displayBrush === false) {\n\t                    displayBrush = true;\n\t                    restoreBrush(true);\n\t                }\n\t            }\n\t            \n\t            // Handles a brush event, toggling the display of foreground lines.\n\t            function brush() {\n\t                actives = dimensionNames.filter(function (p) { return !y[p].brush.empty(); });\n\t                extents = actives.map(function(p) { return y[p].brush.extent(); });\n\t\n\t                filters = []; //erase current filters\n\t                actives.forEach(function(d,i) {\n\t                    filters[i] = {\n\t                        dimension: d,\n\t                        extent: extents[i],\n\t                        hasNaN: false,\n\t                        hasOnlyNaN: false\n\t                    }\n\t                });\n\t\n\t                active = []; //erase current active list\n\t                foreground.style('display', function(d) {\n\t                    var isActive = actives.every(function(p, i) {\n\t                        if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) return true;\n\t                        return (extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1]) && !isNaN(parseFloat(d.values[p]));\n\t                    });\n\t                    if (isActive) active.push(d);\n\t                    return isActive ? null : 'none';\n\t                });\n\t                \n\t                updateTicks();\n\t                \n\t                dispatch.brush({\n\t                    filters: filters,\n\t                    active: active\n\t                });\n\t            }\n\t            function brushend() {\n\t                var hasActiveBrush = actives.length > 0 ? true : false;\n\t                filters.forEach(function (f) {\n\t                    if (f.extent[0] === y[f.dimension].brush.y().domain()[0] && axisWithUndefinedValues.indexOf(f.dimension) >= 0)\n\t                        f.hasNaN = true;\n\t                    if (f.extent[1] < y[f.dimension].domain()[0])\n\t                        f.hasOnlyNaN = true;\n\t                });\n\t                dispatch.brushEnd(active, hasActiveBrush);\n\t            }           \n\t            function updateTicks() {\n\t                dimensions.select('.nv-axis')\n\t                    .each(function (d, i) {\n\t                        var f = filters.filter(function (k) { return k.dimension == d.key; });\n\t                        currentTicks[d.key] = y[d.key].domain();\n\t                        \n\t                        //If brush are available, display brush extent\n\t                        if (f.length != 0 && displayBrush)\n\t                        {\n\t                            currentTicks[d.key] = [];\n\t                            if (f[0].extent[1] > y[d.key].domain()[0]) \n\t                                currentTicks[d.key] = [f[0].extent[1]];\n\t                            if (f[0].extent[0] >= y[d.key].domain()[0])\n\t                                currentTicks[d.key].push(f[0].extent[0]);    \n\t                        }\n\t                            \n\t                        d3.select(this).call(axis.scale(y[d.key]).tickFormat(d.format).tickValues(currentTicks[d.key]));\n\t                });\n\t            }\n\t            function dragStart(d) {\n\t                dragging[d.key] = this.parentNode.__origin__ = x(d.key);\n\t                background.attr(\"visibility\", \"hidden\");\n\t            }\n\t            function dragMove(d) {\n\t                dragging[d.key] = Math.min(availableWidth, Math.max(0, this.parentNode.__origin__ += d3.event.x));\n\t                foreground.attr(\"d\", path);\n\t                enabledDimensions.sort(function (a, b) { return dimensionPosition(a.key) - dimensionPosition(b.key); });\n\t                enabledDimensions.forEach(function (d, i) { return d.currentPosition = i; });\n\t                x.domain(enabledDimensions.map(function (d) { return d.key; }));\n\t                dimensions.attr(\"transform\", function(d) { return \"translate(\" + dimensionPosition(d.key) + \")\"; });\n\t            }\n\t            function dragEnd(d, i) {\n\t                delete this.parentNode.__origin__;\n\t                delete dragging[d.key];\n\t                d3.select(this.parentNode).attr(\"transform\", \"translate(\" + x(d.key) + \")\");\n\t                foreground\n\t                  .attr(\"d\", path);\n\t                background\n\t                  .attr(\"d\", path)\n\t                  .attr(\"visibility\", null);\n\t\n\t                dispatch.dimensionsOrder(enabledDimensions);\n\t            }\n\t            function dimensionPosition(d) {\n\t                var v = dragging[d];\n\t                return v == null ? x(d) : v;\n\t            }\n\t        });\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    chart.dispatch = dispatch;\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:         {get: function(){return width;},           set: function(_){width= _;}},\n\t        height:        {get: function(){return height;},          set: function(_){height= _;}},\n\t        dimensionData: { get: function () { return dimensionData; }, set: function (_) { dimensionData = _; } },\n\t        displayBrush: { get: function () { return displayBrush; }, set: function (_) { displayBrush = _; } },\n\t        filters: { get: function () { return filters; }, set: function (_) { filters = _; } },\n\t        active: { get: function () { return active; }, set: function (_) { active = _; } },\n\t        lineTension:   {get: function(){return lineTension;},     set: function(_){lineTension = _;}},\n\t        undefinedValuesLabel : {get: function(){return undefinedValuesLabel;}, set: function(_){undefinedValuesLabel=_;}},\n\t        \n\t        // deprecated options\n\t        dimensions: {get: function () { return dimensionData.map(function (d){return d.key}); }, set: function (_) {\n\t            // deprecated after 1.8.1\n\t            nv.deprecated('dimensions', 'use dimensionData instead');\n\t            if (dimensionData.length === 0) {\n\t                _.forEach(function (k) { dimensionData.push({ key: k }) })\n\t            } else {\n\t                _.forEach(function (k, i) { dimensionData[i].key= k })\n\t            }\n\t        }},\n\t        dimensionNames: {get: function () { return dimensionData.map(function (d){return d.key}); }, set: function (_) {\n\t            // deprecated after 1.8.1\n\t            nv.deprecated('dimensionNames', 'use dimensionData instead');\n\t            dimensionNames = [];\n\t            if (dimensionData.length === 0) {\n\t                _.forEach(function (k) { dimensionData.push({ key: k }) })\n\t            } else {\n\t                _.forEach(function (k, i) { dimensionData[i].key = k })\n\t            }\n\t \n\t        }},\n\t        dimensionFormats: {get: function () { return dimensionData.map(function (d) { return d.format }); }, set: function (_) {\n\t            // deprecated after 1.8.1\n\t            nv.deprecated('dimensionFormats', 'use dimensionData instead');\n\t            if (dimensionData.length === 0) {\n\t                _.forEach(function (f) { dimensionData.push({ format: f }) })\n\t            } else {\n\t                _.forEach(function (f, i) { dimensionData[i].format = f })\n\t            }\n\t\n\t        }},\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    =  _.top    !== undefined ? _.top    : margin.top;\n\t            margin.right  =  _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom =  _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   =  _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t        }}\n\t    });\n\t    nv.utils.initOptions(chart);\n\t    return chart;\n\t};\n\tnv.models.parallelCoordinatesChart = function () {\n\t        \"use strict\";\n\t        //============================================================\n\t        // Public Variables with Default Settings\n\t        //------------------------------------------------------------\n\t\n\t        var parallelCoordinates = nv.models.parallelCoordinates()\n\t        var legend = nv.models.legend()\n\t        var tooltip = nv.models.tooltip();\n\t        var dimensionTooltip = nv.models.tooltip();\n\t\n\t        var margin = { top: 0, right: 0, bottom: 0, left: 0 }\n\t        , marginTop = null\n\t        , width = null\n\t        , height = null\n\t        , showLegend = true\n\t        , color = nv.utils.defaultColor()\n\t        , state = nv.utils.state()\n\t        , dimensionData = []\n\t        , displayBrush = true\n\t        , defaultState = null\n\t        , noData = null\n\t        , nanValue = \"undefined\"\n\t        , dispatch = d3.dispatch('dimensionsOrder', 'brushEnd', 'stateChange', 'changeState', 'renderEnd')\n\t        , controlWidth = function () { return showControls ? 180 : 0 }\n\t        ;\n\t\n\t\t    //============================================================\n\t\n\t\t\t//============================================================\n\t        // Private Variables\n\t        //------------------------------------------------------------\n\t\n\t        var renderWatch = nv.utils.renderWatch(dispatch);\n\t\n\t        var stateGetter = function(data) {\n\t            return function() {\n\t                return {\n\t                    active: data.map(function(d) { return !d.disabled })\n\t                };\n\t            }\n\t        };\n\t\n\t        var stateSetter = function(data) {\n\t            return function(state) {\n\t                if(state.active !== undefined) {\n\t                    data.forEach(function(series, i) {\n\t                        series.disabled = !state.active[i];\n\t                    });\n\t                }\n\t            }\n\t        };\n\t\n\t        tooltip.contentGenerator(function(data) {\n\t            var str = '<table><thead><tr><td class=\"legend-color-guide\"><div style=\"background-color:' + data.color + '\"></div></td><td><strong>' + data.key + '</strong></td></tr></thead>';\n\t            if(data.series.length !== 0)\n\t            {\n\t                str = str + '<tbody><tr><td height =\"10px\"></td></tr>';\n\t                data.series.forEach(function(d){\n\t                    str = str + '<tr><td class=\"legend-color-guide\"><div style=\"background-color:' + d.color + '\"></div></td><td class=\"key\">' + d.key + '</td><td class=\"value\">' + d.value + '</td></tr>';\n\t                });\n\t                str = str + '</tbody>';\n\t            }\n\t            str = str + '</table>';\n\t            return str;\n\t        });\n\t\n\t        //============================================================\n\t        // Chart function\n\t        //------------------------------------------------------------\n\t\n\t        function chart(selection) {\n\t            renderWatch.reset();\n\t            renderWatch.models(parallelCoordinates);\n\t\n\t            selection.each(function(data) {\n\t                var container = d3.select(this);\n\t                nv.utils.initSVG(container);\n\t\n\t                var that = this;\n\t\n\t                var availableWidth = nv.utils.availableWidth(width, container, margin),\n\t                    availableHeight = nv.utils.availableHeight(height, container, margin);\n\t\n\t                chart.update = function() { container.call(chart); };\n\t                chart.container = this;\n\t\n\t                state.setter(stateSetter(dimensionData), chart.update)\n\t                    .getter(stateGetter(dimensionData))\n\t                    .update();\n\t\n\t                //set state.disabled\n\t                state.disabled = dimensionData.map(function (d) { return !!d.disabled });\n\t\n\t                //Keep dimensions position in memory\n\t                dimensionData = dimensionData.map(function (d) {d.disabled = !!d.disabled; return d});\n\t                dimensionData.forEach(function (d, i) {\n\t                    d.originalPosition = isNaN(d.originalPosition) ? i : d.originalPosition;\n\t                    d.currentPosition = isNaN(d.currentPosition) ? i : d.currentPosition;\n\t                });\n\t\n\t               if (!defaultState) {\n\t                    var key;\n\t                    defaultState = {};\n\t                    for(key in state) {\n\t                        if(state[key] instanceof Array)\n\t                            defaultState[key] = state[key].slice(0);\n\t                        else\n\t                            defaultState[key] = state[key];\n\t                    }\n\t                }\n\t\n\t                // Display No Data message if there's nothing to show.\n\t                if(!data || !data.length) {\n\t                    nv.utils.noData(chart, container);\n\t                    return chart;\n\t                } else {\n\t                    container.selectAll('.nv-noData').remove();\n\t                }\n\t\n\t                //------------------------------------------------------------\n\t                // Setup containers and skeleton of chart\n\t\n\t                var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinatesChart').data([data]);\n\t                var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinatesChart').append('g');\n\t\n\t                var g = wrap.select('g');\n\t\n\t                gEnter.append('g').attr('class', 'nv-parallelCoordinatesWrap');\n\t                gEnter.append('g').attr('class', 'nv-legendWrap');\n\t\n\t                g.select(\"rect\")\n\t                    .attr(\"width\", availableWidth)\n\t                    .attr(\"height\", (availableHeight > 0) ? availableHeight : 0);\n\t\n\t                // Legend\n\t                if (!showLegend) {\n\t                    g.select('.nv-legendWrap').selectAll('*').remove();\n\t                } else {\n\t                    legend.width(availableWidth)\n\t                        .color(function (d) { return \"rgb(188,190,192)\"; });\n\t\n\t                    g.select('.nv-legendWrap')\n\t                        .datum(dimensionData.sort(function (a, b) { return a.originalPosition - b.originalPosition; }))\n\t                        .call(legend);\n\t\n\t                    if (!marginTop && legend.height() !== margin.top) {\n\t                        margin.top = legend.height();\n\t                        availableHeight = nv.utils.availableHeight(height, container, margin);\n\t                    }\n\t                    wrap.select('.nv-legendWrap')\n\t                       .attr('transform', 'translate( 0 ,' + (-margin.top) + ')');\n\t                }\n\t                wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t                // Main Chart Component(s)\n\t                parallelCoordinates\n\t                    .width(availableWidth)\n\t                    .height(availableHeight)\n\t                    .dimensionData(dimensionData)\n\t                    .displayBrush(displayBrush);\n\t\n\t\t\t        var parallelCoordinatesWrap = g.select('.nv-parallelCoordinatesWrap ')\n\t                  .datum(data);\n\t\n\t\t\t        parallelCoordinatesWrap.transition().call(parallelCoordinates);\n\t\n\t\t\t\t\t//============================================================\n\t                // Event Handling/Dispatching (in chart's scope)\n\t                //------------------------------------------------------------\n\t                //Display reset brush button\n\t\t\t        parallelCoordinates.dispatch.on('brushEnd', function (active, hasActiveBrush) {\n\t\t\t            if (hasActiveBrush) {\n\t\t\t                displayBrush = true;\n\t\t\t                dispatch.brushEnd(active);\n\t\t\t            } else {\n\t\n\t\t\t                displayBrush = false;\n\t\t\t            }\n\t\t\t        });\n\t\n\t\t\t        legend.dispatch.on('stateChange', function(newState) {\n\t\t\t            for(var key in newState) {\n\t\t\t                state[key] = newState[key];\n\t\t\t            }\n\t\t\t            dispatch.stateChange(state);\n\t\t\t            chart.update();\n\t\t\t        });\n\t\n\t                //Update dimensions order and display reset sorting button\n\t\t\t        parallelCoordinates.dispatch.on('dimensionsOrder', function (e) {\n\t\t\t            dimensionData.sort(function (a, b) { return a.currentPosition - b.currentPosition; });\n\t\t\t            var isSorted = false;\n\t\t\t            dimensionData.forEach(function (d, i) {\n\t\t\t                d.currentPosition = i;\n\t\t\t                if (d.currentPosition !== d.originalPosition)\n\t\t\t                    isSorted = true;\n\t\t\t            });\n\t\t\t            dispatch.dimensionsOrder(dimensionData, isSorted);\n\t\t\t        });\n\t\n\t\t\t\t\t// Update chart from a state object passed to event handler\n\t                dispatch.on('changeState', function (e) {\n\t\n\t                    if (typeof e.disabled !== 'undefined') {\n\t                        dimensionData.forEach(function (series, i) {\n\t                            series.disabled = e.disabled[i];\n\t                        });\n\t                        state.disabled = e.disabled;\n\t                    }\n\t                    chart.update();\n\t                });\n\t            });\n\t\n\t            renderWatch.renderEnd('parraleleCoordinateChart immediate');\n\t            return chart;\n\t        }\n\t\n\t\t\t//============================================================\n\t        // Event Handling/Dispatching (out of chart's scope)\n\t        //------------------------------------------------------------\n\t\n\t        parallelCoordinates.dispatch.on('elementMouseover.tooltip', function (evt) {\n\t            var tp = {\n\t                key: evt.label,\n\t                color: evt.color,\n\t                series: []\n\t             }\n\t            if(evt.values){\n\t                Object.keys(evt.values).forEach(function (d) {\n\t                    var dim = evt.dimensions.filter(function (dd) {return dd.key === d;})[0];\n\t                    if(dim){\n\t                        var v;\n\t                        if (isNaN(evt.values[d]) || isNaN(parseFloat(evt.values[d]))) {\n\t                            v = nanValue;\n\t                        } else {\n\t                            v = dim.format(evt.values[d]);\n\t                        }\n\t                        tp.series.push({ idx: dim.currentPosition, key: d, value: v, color: dim.color });\n\t                    }\n\t                });\n\t                tp.series.sort(function(a,b) {return a.idx - b.idx});\n\t             }\n\t            tooltip.data(tp).hidden(false);\n\t        });\n\t\n\t        parallelCoordinates.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t            tooltip.hidden(true)\n\t        });\n\t\n\t        parallelCoordinates.dispatch.on('elementMousemove.tooltip', function () {\n\t            tooltip();\n\t        });\n\t\t\t //============================================================\n\t        // Expose Public Variables\n\t        //------------------------------------------------------------\n\t\n\t\t\t// expose chart's sub-components\n\t        chart.dispatch = dispatch;\n\t        chart.parallelCoordinates = parallelCoordinates;\n\t        chart.legend = legend;\n\t        chart.tooltip = tooltip;\n\t        chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t        chart._options = Object.create({}, {\n\t            // simple options, just get/set the necessary values\n\t            width: { get: function () { return width; }, set: function (_) { width = _; } },\n\t            height: { get: function () { return height; }, set: function (_) { height = _; } },\n\t            showLegend: { get: function () { return showLegend; }, set: function (_) { showLegend = _; } },\n\t            defaultState: { get: function () { return defaultState; }, set: function (_) { defaultState = _; } },\n\t            dimensionData: { get: function () { return dimensionData; }, set: function (_) { dimensionData = _; } },\n\t            displayBrush: { get: function () { return displayBrush; }, set: function (_) { displayBrush = _; } },\n\t            noData: { get: function () { return noData; }, set: function (_) { noData = _; } },\n\t            nanValue: { get: function () { return nanValue; }, set: function (_) { nanValue = _; } },\n\t\n\t            // options that require extra logic in the setter\n\t            margin: {\n\t                get: function () { return margin; },\n\t                set: function (_) {\n\t                    if (_.top !== undefined) {\n\t                        margin.top = _.top;\n\t                        marginTop = _.top;\n\t                    }\n\t                    margin.right = _.right !== undefined ? _.right : margin.right;\n\t                    margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t                    margin.left = _.left !== undefined ? _.left : margin.left;\n\t                }\n\t            },\n\t            color: {get: function(){return color;}, set: function(_){\n\t                    color = nv.utils.getColor(_);\n\t                    legend.color(color);\n\t                    parallelCoordinates.color(color);\n\t                }}\n\t        });\n\t\n\t        nv.utils.inheritOptions(chart, parallelCoordinates);\n\t        nv.utils.initOptions(chart);\n\t\n\t        return chart;\n\t    };\n\tnv.models.pie = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t        , width = 500\n\t        , height = 500\n\t        , getX = function(d) { return d.x }\n\t        , getY = function(d) { return d.y }\n\t        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n\t        , container = null\n\t        , color = nv.utils.defaultColor()\n\t        , valueFormat = d3.format(',.2f')\n\t        , showLabels = true\n\t        , labelsOutside = false\n\t        , labelType = \"key\"\n\t        , labelThreshold = .02 //if slice percentage is under this, don't show label\n\t        , donut = false\n\t        , title = false\n\t        , growOnHover = true\n\t        , titleOffset = 0\n\t        , labelSunbeamLayout = false\n\t        , startAngle = false\n\t        , padAngle = false\n\t        , endAngle = false\n\t        , cornerRadius = 0\n\t        , donutRatio = 0.5\n\t        , duration = 250\n\t        , arcsRadius = []\n\t        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n\t        ;\n\t\n\t    var arcs = [];\n\t    var arcsOver = [];\n\t\n\t    //============================================================\n\t    // chart function\n\t    //------------------------------------------------------------\n\t\n\t    var renderWatch = nv.utils.renderWatch(dispatch);\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        selection.each(function(data) {\n\t            var availableWidth = width - margin.left - margin.right\n\t                , availableHeight = height - margin.top - margin.bottom\n\t                , radius = Math.min(availableWidth, availableHeight) / 2\n\t                , arcsRadiusOuter = []\n\t                , arcsRadiusInner = []\n\t                ;\n\t\n\t            container = d3.select(this)\n\t            if (arcsRadius.length === 0) {\n\t                var outer = radius - radius / 5;\n\t                var inner = donutRatio * radius;\n\t                for (var i = 0; i < data[0].length; i++) {\n\t                    arcsRadiusOuter.push(outer);\n\t                    arcsRadiusInner.push(inner);\n\t                }\n\t            } else {\n\t                if(growOnHover){\n\t                    arcsRadiusOuter = arcsRadius.map(function (d) { return (d.outer - d.outer / 5) * radius; });\n\t                    arcsRadiusInner = arcsRadius.map(function (d) { return (d.inner - d.inner / 5) * radius; });\n\t                    donutRatio = d3.min(arcsRadius.map(function (d) { return (d.inner - d.inner / 5); }));\n\t                } else {\n\t                    arcsRadiusOuter = arcsRadius.map(function (d) { return d.outer * radius; });\n\t                    arcsRadiusInner = arcsRadius.map(function (d) { return d.inner * radius; });\n\t                    donutRatio = d3.min(arcsRadius.map(function (d) { return d.inner; }));\n\t                }\n\t            }\n\t            nv.utils.initSVG(container);\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('.nv-wrap.nv-pie').data(data);\n\t            var wrapEnter = wrap.enter().append('g').attr('class','nvd3 nv-wrap nv-pie nv-chart-' + id);\n\t            var gEnter = wrapEnter.append('g');\n\t            var g = wrap.select('g');\n\t            var g_pie = gEnter.append('g').attr('class', 'nv-pie');\n\t            gEnter.append('g').attr('class', 'nv-pieLabels');\n\t\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t            g.select('.nv-pie').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n\t            g.select('.nv-pieLabels').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n\t\n\t            //\n\t            container.on('click', function(d,i) {\n\t                dispatch.chartClick({\n\t                    data: d,\n\t                    index: i,\n\t                    pos: d3.event,\n\t                    id: id\n\t                });\n\t            });\n\t\n\t            arcs = [];\n\t            arcsOver = [];\n\t            for (var i = 0; i < data[0].length; i++) {\n\t\n\t                var arc = d3.svg.arc().outerRadius(arcsRadiusOuter[i]);\n\t                var arcOver = d3.svg.arc().outerRadius(arcsRadiusOuter[i] + 5);\n\t\n\t                if (startAngle !== false) {\n\t                    arc.startAngle(startAngle);\n\t                    arcOver.startAngle(startAngle);\n\t                }\n\t                if (endAngle !== false) {\n\t                    arc.endAngle(endAngle);\n\t                    arcOver.endAngle(endAngle);\n\t                }\n\t                if (donut) {\n\t                    arc.innerRadius(arcsRadiusInner[i]);\n\t                    arcOver.innerRadius(arcsRadiusInner[i]);\n\t                }\n\t\n\t                if (arc.cornerRadius && cornerRadius) {\n\t                    arc.cornerRadius(cornerRadius);\n\t                    arcOver.cornerRadius(cornerRadius);\n\t                }\n\t\n\t                arcs.push(arc);\n\t                arcsOver.push(arcOver);\n\t            }\n\t\n\t            // Setup the Pie chart and choose the data element\n\t            var pie = d3.layout.pie()\n\t                .sort(null)\n\t                .value(function(d) { return d.disabled ? 0 : getY(d) });\n\t\n\t            // padAngle added in d3 3.5\n\t            if (pie.padAngle && padAngle) {\n\t                pie.padAngle(padAngle);\n\t            }\n\t\n\t            // if title is specified and donut, put it in the middle\n\t            if (donut && title) {\n\t                g_pie.append(\"text\").attr('class', 'nv-pie-title');\n\t\n\t                wrap.select('.nv-pie-title')\n\t                    .style(\"text-anchor\", \"middle\")\n\t                    .text(function (d) {\n\t                        return title;\n\t                    })\n\t                    .style(\"font-size\", (Math.min(availableWidth, availableHeight)) * donutRatio * 2 / (title.length + 2) + \"px\")\n\t                    .attr(\"dy\", \"0.35em\") // trick to vertically center text\n\t                    .attr('transform', function(d, i) {\n\t                        return 'translate(0, '+ titleOffset + ')';\n\t                    });\n\t            }\n\t\n\t            var slices = wrap.select('.nv-pie').selectAll('.nv-slice').data(pie);\n\t            var pieLabels = wrap.select('.nv-pieLabels').selectAll('.nv-label').data(pie);\n\t\n\t            slices.exit().remove();\n\t            pieLabels.exit().remove();\n\t\n\t            var ae = slices.enter().append('g');\n\t            ae.attr('class', 'nv-slice');\n\t            ae.on('mouseover', function(d, i) {\n\t                d3.select(this).classed('hover', true);\n\t                if (growOnHover) {\n\t                    d3.select(this).select(\"path\").transition()\n\t                        .duration(70)\n\t                        .attr(\"d\", arcsOver[i]);\n\t                }\n\t                dispatch.elementMouseover({\n\t                    data: d.data,\n\t                    index: i,\n\t                    color: d3.select(this).style(\"fill\"),\n\t                    percent: (d.endAngle - d.startAngle) / (2 * Math.PI)\n\t                });\n\t            });\n\t            ae.on('mouseout', function(d, i) {\n\t                d3.select(this).classed('hover', false);\n\t                if (growOnHover) {\n\t                    d3.select(this).select(\"path\").transition()\n\t                        .duration(50)\n\t                        .attr(\"d\", arcs[i]);\n\t                }\n\t                dispatch.elementMouseout({data: d.data, index: i});\n\t            });\n\t            ae.on('mousemove', function(d, i) {\n\t                dispatch.elementMousemove({data: d.data, index: i});\n\t            });\n\t            ae.on('click', function(d, i) {\n\t                var element = this;\n\t                dispatch.elementClick({\n\t                    data: d.data,\n\t                    index: i,\n\t                    color: d3.select(this).style(\"fill\"),\n\t                    event: d3.event,\n\t                    element: element\n\t                });\n\t            });\n\t            ae.on('dblclick', function(d, i) {\n\t                dispatch.elementDblClick({\n\t                    data: d.data,\n\t                    index: i,\n\t                    color: d3.select(this).style(\"fill\")\n\t                });\n\t            });\n\t\n\t            slices.attr('fill', function(d,i) { return color(d.data, i); });\n\t            slices.attr('stroke', function(d,i) { return color(d.data, i); });\n\t\n\t            var paths = ae.append('path').each(function(d) {\n\t                this._current = d;\n\t            });\n\t\n\t            slices.select('path')\n\t                .transition()\n\t                .duration(duration)\n\t                .attr('d', function (d, i) { return arcs[i](d); })\n\t                .attrTween('d', arcTween);\n\t\n\t            if (showLabels) {\n\t                // This does the normal label\n\t                var labelsArc = [];\n\t                for (var i = 0; i < data[0].length; i++) {\n\t                    labelsArc.push(arcs[i]);\n\t\n\t                    if (labelsOutside) {\n\t                        if (donut) {\n\t                            labelsArc[i] = d3.svg.arc().outerRadius(arcs[i].outerRadius());\n\t                            if (startAngle !== false) labelsArc[i].startAngle(startAngle);\n\t                            if (endAngle !== false) labelsArc[i].endAngle(endAngle);\n\t                        }\n\t                    } else if (!donut) {\n\t                            labelsArc[i].innerRadius(0);\n\t                    }\n\t                }\n\t\n\t                pieLabels.enter().append(\"g\").classed(\"nv-label\",true).each(function(d,i) {\n\t                    var group = d3.select(this);\n\t\n\t                    group.attr('transform', function (d, i) {\n\t                        if (labelSunbeamLayout) {\n\t                            d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate\n\t                            d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate\n\t                            var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n\t                            if ((d.startAngle + d.endAngle) / 2 < Math.PI) {\n\t                                rotateAngle -= 90;\n\t                            } else {\n\t                                rotateAngle += 90;\n\t                            }\n\t                            return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';\n\t                        } else {\n\t                            d.outerRadius = radius + 10; // Set Outer Coordinate\n\t                            d.innerRadius = radius + 15; // Set Inner Coordinate\n\t                            return 'translate(' + labelsArc[i].centroid(d) + ')'\n\t                        }\n\t                    });\n\t\n\t                    group.append('rect')\n\t                        .style('stroke', '#fff')\n\t                        .style('fill', '#fff')\n\t                        .attr(\"rx\", 3)\n\t                        .attr(\"ry\", 3);\n\t\n\t                    group.append('text')\n\t                        .style('text-anchor', labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle') //center the text on it's origin or begin/end if orthogonal aligned\n\t                        .style('fill', '#000')\n\t                });\n\t\n\t                var labelLocationHash = {};\n\t                var avgHeight = 14;\n\t                var avgWidth = 140;\n\t                var createHashKey = function(coordinates) {\n\t                    return Math.floor(coordinates[0]/avgWidth) * avgWidth + ',' + Math.floor(coordinates[1]/avgHeight) * avgHeight;\n\t                };\n\t                var getSlicePercentage = function(d) {\n\t                    return (d.endAngle - d.startAngle) / (2 * Math.PI);\n\t                };\n\t\n\t                pieLabels.watchTransition(renderWatch, 'pie labels').attr('transform', function (d, i) {\n\t                    if (labelSunbeamLayout) {\n\t                        d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate\n\t                        d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate\n\t                        var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n\t                        if ((d.startAngle + d.endAngle) / 2 < Math.PI) {\n\t                            rotateAngle -= 90;\n\t                        } else {\n\t                            rotateAngle += 90;\n\t                        }\n\t                        return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';\n\t                    } else {\n\t                        d.outerRadius = radius + 10; // Set Outer Coordinate\n\t                        d.innerRadius = radius + 15; // Set Inner Coordinate\n\t\n\t                        /*\n\t                        Overlapping pie labels are not good. What this attempts to do is, prevent overlapping.\n\t                        Each label location is hashed, and if a hash collision occurs, we assume an overlap.\n\t                        Adjust the label's y-position to remove the overlap.\n\t                        */\n\t                        var center = labelsArc[i].centroid(d);\n\t                        var percent = getSlicePercentage(d);\n\t                        if (d.value && percent >= labelThreshold) {\n\t                            var hashKey = createHashKey(center);\n\t                            if (labelLocationHash[hashKey]) {\n\t                                center[1] -= avgHeight;\n\t                            }\n\t                            labelLocationHash[createHashKey(center)] = true;\n\t                        }\n\t                        return 'translate(' + center + ')'\n\t                    }\n\t                });\n\t\n\t                pieLabels.select(\".nv-label text\")\n\t                    .style('text-anchor', function(d,i) {\n\t                        //center the text on it's origin or begin/end if orthogonal aligned\n\t                        return labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle';\n\t                    })\n\t                    .text(function(d, i) {\n\t                        var percent = getSlicePercentage(d);\n\t                        var label = '';\n\t                        if (!d.value || percent < labelThreshold) return '';\n\t\n\t                        if(typeof labelType === 'function') {\n\t                            label = labelType(d, i, {\n\t                                'key': getX(d.data),\n\t                                'value': getY(d.data),\n\t                                'percent': valueFormat(percent)\n\t                            });\n\t                        } else {\n\t                            switch (labelType) {\n\t                                case 'key':\n\t                                    label = getX(d.data);\n\t                                    break;\n\t                                case 'value':\n\t                                    label = valueFormat(getY(d.data));\n\t                                    break;\n\t                                case 'percent':\n\t                                    label = d3.format('%')(percent);\n\t                                    break;\n\t                            }\n\t                        }\n\t                        return label;\n\t                    })\n\t                ;\n\t            }\n\t\n\t\n\t            // Computes the angle of an arc, converting from radians to degrees.\n\t            function angle(d) {\n\t                var a = (d.startAngle + d.endAngle) * 90 / Math.PI - 90;\n\t                return a > 90 ? a - 180 : a;\n\t            }\n\t\n\t            function arcTween(a, idx) {\n\t                a.endAngle = isNaN(a.endAngle) ? 0 : a.endAngle;\n\t                a.startAngle = isNaN(a.startAngle) ? 0 : a.startAngle;\n\t                if (!donut) a.innerRadius = 0;\n\t                var i = d3.interpolate(this._current, a);\n\t                this._current = i(0);\n\t                return function (t) {\n\t                    return arcs[idx](i(t));\n\t                };\n\t            }\n\t        });\n\t\n\t        renderWatch.renderEnd('pie immediate');\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    chart.dispatch = dispatch;\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        arcsRadius: { get: function () { return arcsRadius; }, set: function (_) { arcsRadius = _; } },\n\t        width:      {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\t        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=_;}},\n\t        title:      {get: function(){return title;}, set: function(_){title=_;}},\n\t        titleOffset:    {get: function(){return titleOffset;}, set: function(_){titleOffset=_;}},\n\t        labelThreshold: {get: function(){return labelThreshold;}, set: function(_){labelThreshold=_;}},\n\t        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n\t        x:          {get: function(){return getX;}, set: function(_){getX=_;}},\n\t        id:         {get: function(){return id;}, set: function(_){id=_;}},\n\t        endAngle:   {get: function(){return endAngle;}, set: function(_){endAngle=_;}},\n\t        startAngle: {get: function(){return startAngle;}, set: function(_){startAngle=_;}},\n\t        padAngle:   {get: function(){return padAngle;}, set: function(_){padAngle=_;}},\n\t        cornerRadius: {get: function(){return cornerRadius;}, set: function(_){cornerRadius=_;}},\n\t        donutRatio:   {get: function(){return donutRatio;}, set: function(_){donutRatio=_;}},\n\t        labelsOutside: {get: function(){return labelsOutside;}, set: function(_){labelsOutside=_;}},\n\t        labelSunbeamLayout: {get: function(){return labelSunbeamLayout;}, set: function(_){labelSunbeamLayout=_;}},\n\t        donut:              {get: function(){return donut;}, set: function(_){donut=_;}},\n\t        growOnHover:        {get: function(){return growOnHover;}, set: function(_){growOnHover=_;}},\n\t\n\t        // depreciated after 1.7.1\n\t        pieLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){\n\t            labelsOutside=_;\n\t            nv.deprecated('pieLabelsOutside', 'use labelsOutside instead');\n\t        }},\n\t        // depreciated after 1.7.1\n\t        donutLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){\n\t            labelsOutside=_;\n\t            nv.deprecated('donutLabelsOutside', 'use labelsOutside instead');\n\t        }},\n\t        // deprecated after 1.7.1\n\t        labelFormat: {get: function(){ return valueFormat;}, set: function(_) {\n\t            valueFormat=_;\n\t            nv.deprecated('labelFormat','use valueFormat instead');\n\t        }},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n\t            margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n\t            margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n\t            margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n\t        }},\n\t        duration: {get: function(){return duration;}, set: function(_){\n\t            duration = _;\n\t            renderWatch.reset(duration);\n\t        }},\n\t        y: {get: function(){return getY;}, set: function(_){\n\t            getY=d3.functor(_);\n\t        }},\n\t        color: {get: function(){return color;}, set: function(_){\n\t            color=nv.utils.getColor(_);\n\t        }},\n\t        labelType:          {get: function(){return labelType;}, set: function(_){\n\t            labelType= _ || 'key';\n\t        }}\n\t    });\n\t\n\t    nv.utils.initOptions(chart);\n\t    return chart;\n\t};\n\tnv.models.pieChart = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var pie = nv.models.pie();\n\t    var legend = nv.models.legend();\n\t    var tooltip = nv.models.tooltip();\n\t\n\t    var margin = {top: 30, right: 20, bottom: 20, left: 20}\n\t        , marginTop = null\n\t        , width = null\n\t        , height = null\n\t        , showTooltipPercent = false\n\t        , showLegend = true\n\t        , legendPosition = \"top\"\n\t        , color = nv.utils.defaultColor()\n\t        , state = nv.utils.state()\n\t        , defaultState = null\n\t        , noData = null\n\t        , duration = 250\n\t        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n\t        ;\n\t\n\t    tooltip\n\t        .duration(0)\n\t        .headerEnabled(false)\n\t        .valueFormatter(function(d, i) {\n\t            return pie.valueFormat()(d, i);\n\t        });\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var renderWatch = nv.utils.renderWatch(dispatch);\n\t\n\t    var stateGetter = function(data) {\n\t        return function(){\n\t            return {\n\t                active: data.map(function(d) { return !d.disabled })\n\t            };\n\t        }\n\t    };\n\t\n\t    var stateSetter = function(data) {\n\t        return function(state) {\n\t            if (state.active !== undefined) {\n\t                data.forEach(function (series, i) {\n\t                    series.disabled = !state.active[i];\n\t                });\n\t            }\n\t        }\n\t    };\n\t\n\t    //============================================================\n\t    // Chart function\n\t    //------------------------------------------------------------\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        renderWatch.models(pie);\n\t\n\t        selection.each(function(data) {\n\t            var container = d3.select(this);\n\t            nv.utils.initSVG(container);\n\t\n\t            var that = this;\n\t            var availableWidth = nv.utils.availableWidth(width, container, margin),\n\t                availableHeight = nv.utils.availableHeight(height, container, margin);\n\t\n\t            chart.update = function() { container.transition().call(chart); };\n\t            chart.container = this;\n\t\n\t            state.setter(stateSetter(data), chart.update)\n\t                .getter(stateGetter(data))\n\t                .update();\n\t\n\t            //set state.disabled\n\t            state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t            if (!defaultState) {\n\t                var key;\n\t                defaultState = {};\n\t                for (key in state) {\n\t                    if (state[key] instanceof Array)\n\t                        defaultState[key] = state[key].slice(0);\n\t                    else\n\t                        defaultState[key] = state[key];\n\t                }\n\t            }\n\t\n\t            // Display No Data message if there's nothing to show.\n\t            if (!data || !data.length) {\n\t                nv.utils.noData(chart, container);\n\t                return chart;\n\t            } else {\n\t                container.selectAll('.nv-noData').remove();\n\t            }\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap.nv-pieChart').data([data]);\n\t            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-pieChart').append('g');\n\t            var g = wrap.select('g');\n\t\n\t            gEnter.append('g').attr('class', 'nv-pieWrap');\n\t            gEnter.append('g').attr('class', 'nv-legendWrap');\n\t\n\t            // Legend\n\t            if (!showLegend) {\n\t                g.select('.nv-legendWrap').selectAll('*').remove();\n\t            } else {\n\t                if (legendPosition === \"top\") {\n\t                    legend.width( availableWidth ).key(pie.x());\n\t\n\t                    wrap.select('.nv-legendWrap')\n\t                        .datum(data)\n\t                        .call(legend);\n\t\n\t                    if (!marginTop && legend.height() !== margin.top) {\n\t                        margin.top = legend.height();\n\t                        availableHeight = nv.utils.availableHeight(height, container, margin);\n\t                    }\n\t\n\t                    wrap.select('.nv-legendWrap')\n\t                        .attr('transform', 'translate(0,' + (-margin.top) +')');\n\t                } else if (legendPosition === \"right\") {\n\t                    var legendWidth = nv.models.legend().width();\n\t                    if (availableWidth / 2 < legendWidth) {\n\t                        legendWidth = (availableWidth / 2)\n\t                    }\n\t                    legend.height(availableHeight).key(pie.x());\n\t                    legend.width(legendWidth);\n\t                    availableWidth -= legend.width();\n\t\n\t                    wrap.select('.nv-legendWrap')\n\t                        .datum(data)\n\t                        .call(legend)\n\t                        .attr('transform', 'translate(' + (availableWidth) +',0)');\n\t                }\n\t            }\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            // Main Chart Component(s)\n\t            pie.width(availableWidth).height(availableHeight);\n\t            var pieWrap = g.select('.nv-pieWrap').datum([data]);\n\t            d3.transition(pieWrap).call(pie);\n\t\n\t            //============================================================\n\t            // Event Handling/Dispatching (in chart's scope)\n\t            //------------------------------------------------------------\n\t\n\t            legend.dispatch.on('stateChange', function(newState) {\n\t                for (var key in newState) {\n\t                    state[key] = newState[key];\n\t                }\n\t                dispatch.stateChange(state);\n\t                chart.update();\n\t            });\n\t\n\t            // Update chart from a state object passed to event handler\n\t            dispatch.on('changeState', function(e) {\n\t                if (typeof e.disabled !== 'undefined') {\n\t                    data.forEach(function(series,i) {\n\t                        series.disabled = e.disabled[i];\n\t                    });\n\t                    state.disabled = e.disabled;\n\t                }\n\t                chart.update();\n\t            });\n\t        });\n\t\n\t        renderWatch.renderEnd('pieChart immediate');\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Event Handling/Dispatching (out of chart's scope)\n\t    //------------------------------------------------------------\n\t\n\t    pie.dispatch.on('elementMouseover.tooltip', function(evt) {\n\t        evt['series'] = {\n\t            key: chart.x()(evt.data),\n\t            value: chart.y()(evt.data),\n\t            color: evt.color,\n\t            percent: evt.percent\n\t        };\n\t        if (!showTooltipPercent) {\n\t            delete evt.percent;\n\t            delete evt.series.percent;\n\t        }\n\t        tooltip.data(evt).hidden(false);\n\t    });\n\t\n\t    pie.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t        tooltip.hidden(true);\n\t    });\n\t\n\t    pie.dispatch.on('elementMousemove.tooltip', function(evt) {\n\t        tooltip();\n\t    });\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    // expose chart's sub-components\n\t    chart.legend = legend;\n\t    chart.dispatch = dispatch;\n\t    chart.pie = pie;\n\t    chart.tooltip = tooltip;\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    // use Object get/set functionality to map between vars and chart functions\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:              {get: function(){return width;},                set: function(_){width=_;}},\n\t        height:             {get: function(){return height;},               set: function(_){height=_;}},\n\t        noData:             {get: function(){return noData;},               set: function(_){noData=_;}},\n\t        showTooltipPercent: {get: function(){return showTooltipPercent;},   set: function(_){showTooltipPercent=_;}},\n\t        showLegend:         {get: function(){return showLegend;},           set: function(_){showLegend=_;}},\n\t        legendPosition:     {get: function(){return legendPosition;},       set: function(_){legendPosition=_;}},\n\t        defaultState:       {get: function(){return defaultState;},         set: function(_){defaultState=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        color: {get: function(){return color;}, set: function(_){\n\t            color = _;\n\t            legend.color(color);\n\t            pie.color(color);\n\t        }},\n\t        duration: {get: function(){return duration;}, set: function(_){\n\t            duration = _;\n\t            renderWatch.reset(duration);\n\t            pie.duration(duration);\n\t        }},\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            if (_.top !== undefined) {\n\t                margin.top = _.top;\n\t                marginTop = _.top;\n\t            }\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }}\n\t    });\n\t    nv.utils.inheritOptions(chart, pie);\n\t    nv.utils.initOptions(chart);\n\t    return chart;\n\t};\n\tnv.models.sankey = function() {\n\t    'use strict';\n\t\n\t    // Sources:\n\t    // - https://bost.ocks.org/mike/sankey/\n\t    // - https://github.com/soxofaan/d3-plugin-captain-sankey\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var sankey = {},\n\t        nodeWidth = 24,\n\t        nodePadding = 8,\n\t        size = [1, 1],\n\t        nodes = [],\n\t        links = [],\n\t        sinksRight = true;\n\t\n\t    var layout = function(iterations) {\n\t        computeNodeLinks();\n\t        computeNodeValues();\n\t        computeNodeBreadths();\n\t        computeNodeDepths(iterations);\n\t    };\n\t\n\t    var relayout = function() {\n\t        computeLinkDepths();\n\t    };\n\t\n\t    // SVG path data generator, to be used as 'd' attribute on 'path' element selection.\n\t    var link = function() {\n\t        var curvature = .5;\n\t\n\t        function link(d) {\n\t\n\t            var x0 = d.source.x + d.source.dx,\n\t                x1 = d.target.x,\n\t                xi = d3.interpolateNumber(x0, x1),\n\t                x2 = xi(curvature),\n\t                x3 = xi(1 - curvature),\n\t                y0 = d.source.y + d.sy + d.dy / 2,\n\t                y1 = d.target.y + d.ty + d.dy / 2;\n\t            var linkPath = 'M' + x0 + ',' + y0\n\t                + 'C' + x2 + ',' + y0\n\t                + ' ' + x3 + ',' + y1\n\t                + ' ' + x1 + ',' + y1;\n\t            return linkPath;\n\t        }\n\t\n\t        link.curvature = function(_) {\n\t            if (!arguments.length) return curvature;\n\t            curvature = +_;\n\t            return link;\n\t        };\n\t\n\t        return link;\n\t    };\n\t\n\t    // Y-position of the middle of a node.\n\t    var center = function(node) {\n\t        return node.y + node.dy / 2;\n\t    };\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    // Populate the sourceLinks and targetLinks for each node.\n\t    // Also, if the source and target are not objects, assume they are indices.\n\t    function computeNodeLinks() {\n\t        nodes.forEach(function(node) {\n\t            // Links that have this node as source.\n\t            node.sourceLinks = [];\n\t            // Links that have this node as target.\n\t            node.targetLinks = [];\n\t        });\n\t        links.forEach(function(link) {\n\t            var source = link.source,\n\t                target = link.target;\n\t            if (typeof source === 'number') source = link.source = nodes[link.source];\n\t            if (typeof target === 'number') target = link.target = nodes[link.target];\n\t            source.sourceLinks.push(link);\n\t            target.targetLinks.push(link);\n\t        });\n\t    }\n\t\n\t    // Compute the value (size) of each node by summing the associated links.\n\t    function computeNodeValues() {\n\t        nodes.forEach(function(node) {\n\t            node.value = Math.max(\n\t                d3.sum(node.sourceLinks, value),\n\t                d3.sum(node.targetLinks, value)\n\t            );\n\t        });\n\t    }\n\t\n\t    // Iteratively assign the breadth (x-position) for each node.\n\t    // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n\t    // nodes with no incoming links are assigned breadth zero, while\n\t    // nodes with no outgoing links are assigned the maximum breadth.\n\t    function computeNodeBreadths() {\n\t        //\n\t        var remainingNodes = nodes,\n\t            nextNodes,\n\t            x = 0;\n\t\n\t        // Work from left to right.\n\t        // Keep updating the breath (x-position) of nodes that are target of recently updated nodes.\n\t        //\n\t        while (remainingNodes.length && x < nodes.length) {\n\t            nextNodes = [];\n\t            remainingNodes.forEach(function(node) {\n\t                node.x = x;\n\t                node.dx = nodeWidth;\n\t                node.sourceLinks.forEach(function(link) {\n\t                    if (nextNodes.indexOf(link.target) < 0) {\n\t                        nextNodes.push(link.target);\n\t                    }\n\t                });\n\t            });\n\t            remainingNodes = nextNodes;\n\t            ++x;\n\t            //\n\t        }\n\t\n\t        // Optionally move pure sinks always to the right.\n\t        if (sinksRight) {\n\t            moveSinksRight(x);\n\t        }\n\t\n\t        scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));\n\t    }\n\t\n\t    function moveSourcesRight() {\n\t        nodes.forEach(function(node) {\n\t            if (!node.targetLinks.length) {\n\t                node.x = d3.min(node.sourceLinks, function(d) { return d.target.x; }) - 1;\n\t            }\n\t        });\n\t    }\n\t\n\t    function moveSinksRight(x) {\n\t        nodes.forEach(function(node) {\n\t            if (!node.sourceLinks.length) {\n\t                node.x = x - 1;\n\t            }\n\t        });\n\t    }\n\t\n\t    function scaleNodeBreadths(kx) {\n\t        nodes.forEach(function(node) {\n\t            node.x *= kx;\n\t        });\n\t    }\n\t\n\t    // Compute the depth (y-position) for each node.\n\t    function computeNodeDepths(iterations) {\n\t        // Group nodes by breath.\n\t        var nodesByBreadth = d3.nest()\n\t            .key(function(d) { return d.x; })\n\t            .sortKeys(d3.ascending)\n\t            .entries(nodes)\n\t            .map(function(d) { return d.values; });\n\t\n\t        //\n\t        initializeNodeDepth();\n\t        resolveCollisions();\n\t        computeLinkDepths();\n\t        for (var alpha = 1; iterations > 0; --iterations) {\n\t            relaxRightToLeft(alpha *= .99);\n\t            resolveCollisions();\n\t            computeLinkDepths();\n\t            relaxLeftToRight(alpha);\n\t            resolveCollisions();\n\t            computeLinkDepths();\n\t        }\n\t\n\t        function initializeNodeDepth() {\n\t            // Calculate vertical scaling factor.\n\t            var ky = d3.min(nodesByBreadth, function(nodes) {\n\t                return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);\n\t            });\n\t\n\t            nodesByBreadth.forEach(function(nodes) {\n\t                nodes.forEach(function(node, i) {\n\t                    node.y = i;\n\t                    node.dy = node.value * ky;\n\t                });\n\t            });\n\t\n\t            links.forEach(function(link) {\n\t                link.dy = link.value * ky;\n\t            });\n\t        }\n\t\n\t        function relaxLeftToRight(alpha) {\n\t            nodesByBreadth.forEach(function(nodes, breadth) {\n\t                nodes.forEach(function(node) {\n\t                    if (node.targetLinks.length) {\n\t                        // Value-weighted average of the y-position of source node centers linked to this node.\n\t                        var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n\t                        node.y += (y - center(node)) * alpha;\n\t                    }\n\t                });\n\t            });\n\t\n\t            function weightedSource(link) {\n\t                return (link.source.y + link.sy + link.dy / 2) * link.value;\n\t            }\n\t        }\n\t\n\t        function relaxRightToLeft(alpha) {\n\t            nodesByBreadth.slice().reverse().forEach(function(nodes) {\n\t                nodes.forEach(function(node) {\n\t                    if (node.sourceLinks.length) {\n\t                        // Value-weighted average of the y-positions of target nodes linked to this node.\n\t                        var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n\t                        node.y += (y - center(node)) * alpha;\n\t                    }\n\t                });\n\t            });\n\t\n\t            function weightedTarget(link) {\n\t                return (link.target.y + link.ty + link.dy / 2) * link.value;\n\t            }\n\t        }\n\t\n\t        function resolveCollisions() {\n\t            nodesByBreadth.forEach(function(nodes) {\n\t                var node,\n\t                    dy,\n\t                    y0 = 0,\n\t                    n = nodes.length,\n\t                    i;\n\t\n\t                // Push any overlapping nodes down.\n\t                nodes.sort(ascendingDepth);\n\t                for (i = 0; i < n; ++i) {\n\t                    node = nodes[i];\n\t                    dy = y0 - node.y;\n\t                    if (dy > 0) node.y += dy;\n\t                    y0 = node.y + node.dy + nodePadding;\n\t                }\n\t\n\t                // If the bottommost node goes outside the bounds, push it back up.\n\t                dy = y0 - nodePadding - size[1];\n\t                if (dy > 0) {\n\t                    y0 = node.y -= dy;\n\t\n\t                    // Push any overlapping nodes back up.\n\t                    for (i = n - 2; i >= 0; --i) {\n\t                        node = nodes[i];\n\t                        dy = node.y + node.dy + nodePadding - y0;\n\t                        if (dy > 0) node.y -= dy;\n\t                        y0 = node.y;\n\t                    }\n\t                }\n\t            });\n\t        }\n\t\n\t        function ascendingDepth(a, b) {\n\t            return a.y - b.y;\n\t        }\n\t    }\n\t\n\t    // Compute y-offset of the source endpoint (sy) and target endpoints (ty) of links,\n\t    // relative to the source/target node's y-position.\n\t    function computeLinkDepths() {\n\t        nodes.forEach(function(node) {\n\t            node.sourceLinks.sort(ascendingTargetDepth);\n\t            node.targetLinks.sort(ascendingSourceDepth);\n\t        });\n\t        nodes.forEach(function(node) {\n\t            var sy = 0, ty = 0;\n\t            node.sourceLinks.forEach(function(link) {\n\t                link.sy = sy;\n\t                sy += link.dy;\n\t            });\n\t            node.targetLinks.forEach(function(link) {\n\t                link.ty = ty;\n\t                ty += link.dy;\n\t            });\n\t        });\n\t\n\t        function ascendingSourceDepth(a, b) {\n\t            return a.source.y - b.source.y;\n\t        }\n\t\n\t        function ascendingTargetDepth(a, b) {\n\t            return a.target.y - b.target.y;\n\t        }\n\t    }\n\t\n\t    // Value property accessor.\n\t    function value(x) {\n\t        return x.value;\n\t    }\n\t\n\t    sankey.options = nv.utils.optionsFunc.bind(sankey);\n\t    sankey._options = Object.create({}, {\n\t        nodeWidth:    {get: function(){return nodeWidth;},   set: function(_){nodeWidth=+_;}},\n\t        nodePadding:  {get: function(){return nodePadding;}, set: function(_){nodePadding=_;}},\n\t        nodes:        {get: function(){return nodes;},       set: function(_){nodes=_;}},\n\t        links:        {get: function(){return links ;},      set: function(_){links=_;}},\n\t        size:         {get: function(){return size;},        set: function(_){size=_;}},\n\t        sinksRight:   {get: function(){return sinksRight;},  set: function(_){sinksRight=_;}},\n\t\n\t        layout:       {get: function(){layout(32);},         set: function(_){layout(_);}},\n\t        relayout:     {get: function(){relayout();},         set: function(_){}},\n\t        center:       {get: function(){return center();},    set: function(_){\n\t            if(typeof _ === 'function'){\n\t                center=_;\n\t            }\n\t        }},\n\t        link:         {get: function(){return link();},      set: function(_){\n\t            if(typeof _ === 'function'){\n\t                link=_;\n\t            }\n\t            return link();\n\t        }}\n\t    });\n\t\n\t    nv.utils.initOptions(sankey);\n\t\n\t    return sankey;\n\t};\n\tnv.models.sankeyChart = function() {\n\t    \"use strict\";\n\t\n\t    // Sources:\n\t    // - https://bost.ocks.org/mike/sankey/\n\t    // - https://github.com/soxofaan/d3-plugin-captain-sankey\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n\t        , sankey = nv.models.sankey()\n\t        , width = 600\n\t        , height = 400\n\t        , nodeWidth = 36\n\t        , nodePadding =  40\n\t        , units = 'units'\n\t        , center = undefined\n\t        ;\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var formatNumber = d3.format(',.0f');    // zero decimal places\n\t    var format = function(d) {\n\t        return formatNumber(d) + ' ' + units;\n\t    };\n\t    var color = d3.scale.category20();\n\t    var linkTitle = function(d){\n\t        return d.source.name + ' → ' + d.target.name + '\\n' + format(d.value);\n\t    };\n\t    var nodeFillColor = function(d){\n\t        return d.color = color(d.name.replace(/ .*/, ''));\n\t    };\n\t    var nodeStrokeColor = function(d){\n\t        return d3.rgb(d.color).darker(2);\n\t    };\n\t    var nodeTitle = function(d){\n\t        return d.name + '\\n' + format(d.value);\n\t    };\n\t\n\t    var showError = function(element, message) {\n\t        element.append('text')\n\t            .attr('x', 0)\n\t            .attr('y', 0)\n\t            .attr('class', 'nvd3-sankey-chart-error')\n\t            .attr('text-anchor', 'middle')\n\t            .text(message);\n\t    };\n\t\n\t    function chart(selection) {\n\t        selection.each(function(data) {\n\t\n\t            var testData = {\n\t                nodes:\n\t                    [\n\t                        {'node': 1, 'name': 'Test 1'},\n\t                        {'node': 2, 'name': 'Test 2'},\n\t                        {'node': 3, 'name': 'Test 3'},\n\t                        {'node': 4, 'name': 'Test 4'},\n\t                        {'node': 5, 'name': 'Test 5'},\n\t                        {'node': 6, 'name': 'Test 6'}\n\t                    ],\n\t                links:\n\t                    [\n\t                        {'source': 0, 'target': 1, 'value': 2295},\n\t                        {'source': 0, 'target': 5, 'value': 1199},\n\t                        {'source': 1, 'target': 2, 'value': 1119},\n\t                        {'source': 1, 'target': 5, 'value': 1176},\n\t                        {'source': 2, 'target': 3, 'value': 487},\n\t                        {'source': 2, 'target': 5, 'value': 632},\n\t                        {'source': 3, 'target': 4, 'value': 301},\n\t                        {'source': 3, 'target': 5, 'value': 186}\n\t                    ]\n\t            };\n\t\n\t            // Error handling\n\t            var isDataValid = false;\n\t            var dataAvailable = false;\n\t\n\t            // check if data is valid\n\t            if(\n\t                (typeof data['nodes'] === 'object' && data['nodes'].length) >= 0 &&\n\t                (typeof data['links'] === 'object' && data['links'].length) >= 0\n\t            ){\n\t                isDataValid = true;\n\t            }\n\t\n\t            // check if data is available\n\t            if(\n\t                data['nodes'] && data['nodes'].length > 0 &&\n\t                data['links'] && data['links'].length > 0\n\t            ) {\n\t                dataAvailable = true;\n\t            }\n\t\n\t            // show error\n\t            if(!isDataValid) {\n\t                console.error('NVD3 Sankey chart error:', 'invalid data format for', data);\n\t                console.info('Valid data format is: ', testData, JSON.stringify(testData));\n\t                showError(selection, 'Error loading chart, data is invalid');\n\t                return false;\n\t            }\n\t\n\t            // TODO use nv.utils.noData\n\t            if(!dataAvailable) {\n\t                showError(selection, 'No data available');\n\t                return false;\n\t            }\n\t\n\t            // No errors, continue\n\t\n\t            // append the svg canvas to the page\n\t            var svg = selection.append('svg')\n\t                .attr('width', width)\n\t                .attr('height', height)\n\t                .append('g')\n\t                .attr('class', 'nvd3 nv-wrap nv-sankeyChart');\n\t\n\t            // Set the sankey diagram properties\n\t            sankey\n\t                .nodeWidth(nodeWidth)\n\t                .nodePadding(nodePadding)\n\t                .size([width, height]);\n\t\n\t            var path = sankey.link();\n\t\n\t            sankey\n\t                .nodes(data.nodes)\n\t                .links(data.links)\n\t                .layout(32)\n\t                .center(center);\n\t\n\t            // add in the links\n\t            var link = svg.append('g').selectAll('.link')\n\t                .data(data.links)\n\t                .enter().append('path')\n\t                .attr('class', 'link')\n\t                .attr('d', path)\n\t                .style('stroke-width', function(d) { return Math.max(1, d.dy); })\n\t            .sort(function(a,b) { return b.dy - a.dy; });\n\t\n\t            // add the link titles\n\t            link.append('title')\n\t                .text(linkTitle);\n\t\n\t            // add in the nodes\n\t            var node = svg.append('g').selectAll('.node')\n\t                .data(data.nodes)\n\t                .enter().append('g')\n\t                .attr('class', 'node')\n\t                .attr('transform', function(d) { return 'translate(' + d.x + ',' + d.y + ')'; })\n\t                .call(\n\t                    d3.behavior\n\t                        .drag()\n\t                        .origin(function(d) { return d; })\n\t                        .on('dragstart', function() {\n\t                            this.parentNode.appendChild(this);\n\t                        })\n\t                        .on('drag', dragmove)\n\t                );\n\t\n\t            // add the rectangles for the nodes\n\t            node.append('rect')\n\t                .attr('height', function(d) { return d.dy; })\n\t                .attr('width', sankey.nodeWidth())\n\t                .style('fill', nodeFillColor)\n\t                .style('stroke', nodeStrokeColor)\n\t                .append('title')\n\t                .text(nodeTitle);\n\t\n\t            // add in the title for the nodes\n\t            node.append('text')\n\t                .attr('x', -6)\n\t                .attr('y', function(d) { return d.dy / 2; })\n\t                .attr('dy', '.35em')\n\t                .attr('text-anchor', 'end')\n\t                .attr('transform', null)\n\t                .text(function(d) { return d.name; })\n\t                .filter(function(d) { return d.x < width / 2; })\n\t                .attr('x', 6 + sankey.nodeWidth())\n\t                .attr('text-anchor', 'start');\n\t\n\t            // the function for moving the nodes\n\t            function dragmove(d) {\n\t                d3.select(this).attr('transform',\n\t                'translate(' + d.x + ',' + (\n\t                    d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))\n\t                ) + ')');\n\t                sankey.relayout();\n\t                link.attr('d', path);\n\t            }\n\t        });\n\t\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        units:           {get: function(){return units;},       set: function(_){units=_;}},\n\t        width:           {get: function(){return width;},       set: function(_){width=_;}},\n\t        height:          {get: function(){return height;},      set: function(_){height=_;}},\n\t        format:          {get: function(){return format;},      set: function(_){format=_;}},\n\t        linkTitle:       {get: function(){return linkTitle;},   set: function(_){linkTitle=_;}},\n\t        nodeWidth:       {get: function(){return nodeWidth;},   set: function(_){nodeWidth=_;}},\n\t        nodePadding:     {get: function(){return nodePadding;}, set: function(_){nodePadding=_;}},\n\t        center:          {get: function(){return center},       set: function(_){center=_}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        nodeStyle: {get: function(){return {};}, set: function(_){\n\t            nodeFillColor   = _.fillColor   !== undefined ? _.fillColor   : nodeFillColor;\n\t            nodeStrokeColor = _.strokeColor !== undefined ? _.strokeColor : nodeStrokeColor;\n\t            nodeTitle       = _.title       !== undefined ? _.title       : nodeTitle;\n\t        }}\n\t\n\t    });\n\t\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t};\n\t\n\tnv.models.scatter = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var margin       = {top: 0, right: 0, bottom: 0, left: 0}\n\t        , width        = null\n\t        , height       = null\n\t        , color        = nv.utils.defaultColor() // chooses color\n\t        , pointBorderColor = null\n\t        , id           = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't select one\n\t        , container    = null\n\t        , x            = d3.scale.linear()\n\t        , y            = d3.scale.linear()\n\t        , z            = d3.scale.linear() //linear because d3.svg.shape.size is treated as area\n\t        , getX         = function(d) { return d.x } // accessor to get the x value\n\t        , getY         = function(d) { return d.y } // accessor to get the y value\n\t        , getSize      = function(d) { return d.size || 1} // accessor to get the point size\n\t        , getShape     = function(d) { return d.shape || 'circle' } // accessor to get point shape\n\t        , forceX       = [] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n\t        , forceY       = [] // List of numbers to Force into the Y scale\n\t        , forceSize    = [] // List of numbers to Force into the Size scale\n\t        , interactive  = true // If true, plots a voronoi overlay for advanced point intersection\n\t        , pointActive  = function(d) { return !d.notActive } // any points that return false will be filtered out\n\t        , padData      = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n\t        , padDataOuter = .1 //outerPadding to imitate ordinal scale outer padding\n\t        , clipEdge     = false // if true, masks points within x and y scale\n\t        , clipVoronoi  = true // if true, masks each point with a circle... can turn off to slightly increase performance\n\t        , showVoronoi  = false // display the voronoi areas\n\t        , clipRadius   = function() { return 25 } // function to get the radius for voronoi point clips\n\t        , xDomain      = null // Override x domain (skips the calculation from data)\n\t        , yDomain      = null // Override y domain\n\t        , xRange       = null // Override x range\n\t        , yRange       = null // Override y range\n\t        , sizeDomain   = null // Override point size domain\n\t        , sizeRange    = null\n\t        , singlePoint  = false\n\t        , dispatch     = d3.dispatch('elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'renderEnd')\n\t        , useVoronoi   = true\n\t        , duration     = 250\n\t        , interactiveUpdateDelay = 300\n\t        , showLabels    = false\n\t        ;\n\t\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var x0, y0, z0 // used to store previous scales\n\t        , width0\n\t        , height0\n\t        , timeoutID\n\t        , needsUpdate = false // Flag for when the points are visually updating, but the interactive layer is behind, to disable tooltips\n\t        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n\t        , _sizeRange_def = [16, 256]\n\t        , _cache = {}\n\t        ;\n\t\n\t    function getCache(d) {\n\t        var key, val;\n\t        key = d[0].series + ':' + d[1];\n\t        val = _cache[key] = _cache[key] || {};\n\t        return val;\n\t    }\n\t\n\t    function delCache(d) {\n\t        var key, val;\n\t        key = d[0].series + ':' + d[1];\n\t        delete _cache[key];\n\t    }\n\t\n\t    function getDiffs(d) {\n\t        var i, key, val,\n\t            cache = getCache(d),\n\t            diffs = false;\n\t        for (i = 1; i < arguments.length; i += 2) {\n\t            key = arguments[i];\n\t            val = arguments[i + 1](d[0], d[1]);\n\t            if (cache[key] !== val || !cache.hasOwnProperty(key)) {\n\t                cache[key] = val;\n\t                diffs = true;\n\t            }\n\t        }\n\t        return diffs;\n\t    }\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        selection.each(function(data) {\n\t            container = d3.select(this);\n\t            var availableWidth = nv.utils.availableWidth(width, container, margin),\n\t                availableHeight = nv.utils.availableHeight(height, container, margin);\n\t\n\t            nv.utils.initSVG(container);\n\t\n\t            //add series index to each data point for reference\n\t            data.forEach(function(series, i) {\n\t                series.values.forEach(function(point) {\n\t                    point.series = i;\n\t                });\n\t            });\n\t\n\t            // Setup Scales\n\t            var logScale = chart.yScale().name === d3.scale.log().name ? true : false;\n\t            // remap and flatten the data for use in calculating the scales' domains\n\t            var seriesData = (xDomain && yDomain && sizeDomain) ? [] : // if we know xDomain and yDomain and sizeDomain, no need to calculate.... if Size is constant remember to set sizeDomain to speed up performance\n\t                d3.merge(\n\t                    data.map(function(d) {\n\t                        return d.values.map(function(d,i) {\n\t                            return { x: getX(d,i), y: getY(d,i), size: getSize(d,i) }\n\t                        })\n\t                    })\n\t                );\n\t\n\t            x   .domain(xDomain || d3.extent(seriesData.map(function(d) { return d.x; }).concat(forceX)))\n\t\n\t            if (padData && data[0])\n\t                x.range(xRange || [(availableWidth * padDataOuter +  availableWidth) / (2 *data[0].values.length), availableWidth - availableWidth * (1 + padDataOuter) / (2 * data[0].values.length)  ]);\n\t            //x.range([availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n\t            else\n\t                x.range(xRange || [0, availableWidth]);\n\t\n\t             if (logScale) {\n\t                    var min = d3.min(seriesData.map(function(d) { if (d.y !== 0) return d.y; }));\n\t                    y.clamp(true)\n\t                        .domain(yDomain || d3.extent(seriesData.map(function(d) {\n\t                            if (d.y !== 0) return d.y;\n\t                            else return min * 0.1;\n\t                        }).concat(forceY)))\n\t                        .range(yRange || [availableHeight, 0]);\n\t                } else {\n\t                        y.domain(yDomain || d3.extent(seriesData.map(function (d) { return d.y;}).concat(forceY)))\n\t                        .range(yRange || [availableHeight, 0]);\n\t                }\n\t\n\t            z   .domain(sizeDomain || d3.extent(seriesData.map(function(d) { return d.size }).concat(forceSize)))\n\t                .range(sizeRange || _sizeRange_def);\n\t\n\t            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n\t            singlePoint = x.domain()[0] === x.domain()[1] || y.domain()[0] === y.domain()[1];\n\t\n\t            if (x.domain()[0] === x.domain()[1])\n\t                x.domain()[0] ?\n\t                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n\t                    : x.domain([-1,1]);\n\t\n\t            if (y.domain()[0] === y.domain()[1])\n\t                y.domain()[0] ?\n\t                    y.domain([y.domain()[0] - y.domain()[0] * 0.01, y.domain()[1] + y.domain()[1] * 0.01])\n\t                    : y.domain([-1,1]);\n\t\n\t            if ( isNaN(x.domain()[0])) {\n\t                x.domain([-1,1]);\n\t            }\n\t\n\t            if ( isNaN(y.domain()[0])) {\n\t                y.domain([-1,1]);\n\t            }\n\t\n\t            x0 = x0 || x;\n\t            y0 = y0 || y;\n\t            z0 = z0 || z;\n\t\n\t            var scaleDiff = x(1) !== x0(1) || y(1) !== y0(1) || z(1) !== z0(1);\n\t\n\t            width0 = width0 || width;\n\t            height0 = height0 || height;\n\t\n\t            var sizeDiff = width0 !== width || height0 !== height;\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap.nv-scatter').data([data]);\n\t            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatter nv-chart-' + id);\n\t            var defsEnter = wrapEnter.append('defs');\n\t            var gEnter = wrapEnter.append('g');\n\t            var g = wrap.select('g');\n\t\n\t            wrap.classed('nv-single-point', singlePoint);\n\t            gEnter.append('g').attr('class', 'nv-groups');\n\t            gEnter.append('g').attr('class', 'nv-point-paths');\n\t            wrapEnter.append('g').attr('class', 'nv-point-clips');\n\t\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            defsEnter.append('clipPath')\n\t                .attr('id', 'nv-edge-clip-' + id)\n\t                .append('rect')\n\t                .attr('transform', 'translate( -10, -10)');\n\t                \n\t            wrap.select('#nv-edge-clip-' + id + ' rect')\n\t                .attr('width', availableWidth + 20)\n\t                .attr('height', (availableHeight > 0) ? availableHeight + 20 : 0);\n\t\n\t            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\t\n\t            function updateInteractiveLayer() {\n\t                // Always clear needs-update flag regardless of whether or not\n\t                // we will actually do anything (avoids needless invocations).\n\t                needsUpdate = false;\n\t\n\t                if (!interactive) return false;\n\t\n\t                // inject series and point index for reference into voronoi\n\t                if (useVoronoi === true) {\n\t                    var vertices = d3.merge(data.map(function(group, groupIndex) {\n\t                            return group.values\n\t                                .map(function(point, pointIndex) {\n\t                                    // *Adding noise to make duplicates very unlikely\n\t                                    // *Injecting series and point index for reference\n\t                                    /* *Adding a 'jitter' to the points, because there's an issue in d3.geom.voronoi.\n\t                                     */\n\t                                    var pX = getX(point,pointIndex);\n\t                                    var pY = getY(point,pointIndex);\n\t\n\t                                    return [nv.utils.NaNtoZero(x(pX))+ Math.random() * 1e-4,\n\t                                            nv.utils.NaNtoZero(y(pY))+ Math.random() * 1e-4,\n\t                                        groupIndex,\n\t                                        pointIndex, point]; //temp hack to add noise until I think of a better way so there are no duplicates\n\t                                })\n\t                                .filter(function(pointArray, pointIndex) {\n\t                                    return pointActive(pointArray[4], pointIndex); // Issue #237.. move filter to after map, so pointIndex is correct!\n\t                                })\n\t                        })\n\t                    );\n\t\n\t                    if (vertices.length == 0) return false;  // No active points, we're done\n\t                    if (vertices.length < 3) {\n\t                        // Issue #283 - Adding 2 dummy points to the voronoi b/c voronoi requires min 3 points to work\n\t                        vertices.push([x.range()[0] - 20, y.range()[0] - 20, null, null]);\n\t                        vertices.push([x.range()[1] + 20, y.range()[1] + 20, null, null]);\n\t                        vertices.push([x.range()[0] - 20, y.range()[0] + 20, null, null]);\n\t                        vertices.push([x.range()[1] + 20, y.range()[1] - 20, null, null]);\n\t                    }\n\t\n\t                    // keep voronoi sections from going more than 10 outside of graph\n\t                    // to avoid overlap with other things like legend etc\n\t                    var bounds = d3.geom.polygon([\n\t                        [-10,-10],\n\t                        [-10,height + 10],\n\t                        [width + 10,height + 10],\n\t                        [width + 10,-10]\n\t                    ]);\n\t\n\t                    var voronoi = d3.geom.voronoi(vertices).map(function(d, i) {\n\t                        return {\n\t                            'data': bounds.clip(d),\n\t                            'series': vertices[i][2],\n\t                            'point': vertices[i][3]\n\t                        }\n\t                    });\n\t\n\t                    // nuke all voronoi paths on reload and recreate them\n\t                    wrap.select('.nv-point-paths').selectAll('path').remove();\n\t                    var pointPaths = wrap.select('.nv-point-paths').selectAll('path').data(voronoi);\n\t                    var vPointPaths = pointPaths\n\t                        .enter().append(\"svg:path\")\n\t                        .attr(\"d\", function(d) {\n\t                            if (!d || !d.data || d.data.length === 0)\n\t                                return 'M 0 0';\n\t                            else\n\t                                return \"M\" + d.data.join(\",\") + \"Z\";\n\t                        })\n\t                        .attr(\"id\", function(d,i) {\n\t                            return \"nv-path-\"+i; })\n\t                        .attr(\"clip-path\", function(d,i) { return \"url(#nv-clip-\"+id+\"-\"+i+\")\"; })\n\t                        ;\n\t\n\t                    // good for debugging point hover issues\n\t                    if (showVoronoi) {\n\t                        vPointPaths.style(\"fill\", d3.rgb(230, 230, 230))\n\t                            .style('fill-opacity', 0.4)\n\t                            .style('stroke-opacity', 1)\n\t                            .style(\"stroke\", d3.rgb(200,200,200));\n\t                    }\n\t\n\t                    if (clipVoronoi) {\n\t                        // voronoi sections are already set to clip,\n\t                        // just create the circles with the IDs they expect\n\t                        wrap.select('.nv-point-clips').selectAll('*').remove(); // must do * since it has sub-dom\n\t                        var pointClips = wrap.select('.nv-point-clips').selectAll('clipPath').data(vertices);\n\t                        var vPointClips = pointClips\n\t                            .enter().append(\"svg:clipPath\")\n\t                            .attr(\"id\", function(d, i) { return \"nv-clip-\"+id+\"-\"+i;})\n\t                            .append(\"svg:circle\")\n\t                            .attr('cx', function(d) { return d[0]; })\n\t                            .attr('cy', function(d) { return d[1]; })\n\t                            .attr('r', clipRadius);\n\t                    }\n\t\n\t                    var mouseEventCallback = function(el, d, mDispatch) {\n\t                        if (needsUpdate) return 0;\n\t                        var series = data[d.series];\n\t                        if (series === undefined) return;\n\t                        var point  = series.values[d.point];\n\t                        point['color'] = color(series, d.series);\n\t\n\t                        // standardize attributes for tooltip.\n\t                        point['x'] = getX(point);\n\t                        point['y'] = getY(point);\n\t\n\t                        // can't just get box of event node since it's actually a voronoi polygon\n\t                        var box = container.node().getBoundingClientRect();\n\t                        var scrollTop  = window.pageYOffset || document.documentElement.scrollTop;\n\t                        var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n\t\n\t                        var pos = {\n\t                            left: x(getX(point, d.point)) + box.left + scrollLeft + margin.left + 10,\n\t                            top: y(getY(point, d.point)) + box.top + scrollTop + margin.top + 10\n\t                        };\n\t\n\t                        mDispatch({\n\t                            point: point,\n\t                            series: series,\n\t                            pos: pos,\n\t                            relativePos: [x(getX(point, d.point)) + margin.left, y(getY(point, d.point)) + margin.top],\n\t                            seriesIndex: d.series,\n\t                            pointIndex: d.point,\n\t                            event: d3.event,\n\t                            element: el\n\t                        });\n\t                    };\n\t\n\t                    pointPaths\n\t                        .on('click', function(d) {\n\t                            mouseEventCallback(this, d, dispatch.elementClick);\n\t                        })\n\t                        .on('dblclick', function(d) {\n\t                            mouseEventCallback(this, d, dispatch.elementDblClick);\n\t                        })\n\t                        .on('mouseover', function(d) {\n\t                            mouseEventCallback(this, d, dispatch.elementMouseover);\n\t                        })\n\t                        .on('mouseout', function(d, i) {\n\t                            mouseEventCallback(this, d, dispatch.elementMouseout);\n\t                        });\n\t\n\t                } else {\n\t                    // add event handlers to points instead voronoi paths\n\t                    wrap.select('.nv-groups').selectAll('.nv-group')\n\t                        .selectAll('.nv-point')\n\t                        //.data(dataWithPoints)\n\t                        //.style('pointer-events', 'auto') // recativate events, disabled by css\n\t                        .on('click', function(d,i) {\n\t                            //nv.log('test', d, i);\n\t                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n\t                            var series = data[d.series],\n\t                                point  = series.values[i];\n\t                            var element = this;\n\t                            dispatch.elementClick({\n\t                                point: point,\n\t                                series: series,\n\t                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top], //TODO: make this pos base on the page\n\t                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n\t                                seriesIndex: d.series,\n\t                                pointIndex: i,\n\t                                event: d3.event,\n\t                                element: element\n\t                            });\n\t                        })\n\t                        .on('dblclick', function(d,i) {\n\t                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n\t                            var series = data[d.series],\n\t                                point  = series.values[i];\n\t\n\t                            dispatch.elementDblClick({\n\t                                point: point,\n\t                                series: series,\n\t                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n\t                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n\t                                seriesIndex: d.series,\n\t                                pointIndex: i\n\t                            });\n\t                        })\n\t                        .on('mouseover', function(d,i) {\n\t                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n\t                            var series = data[d.series],\n\t                                point  = series.values[i];\n\t\n\t                            dispatch.elementMouseover({\n\t                                point: point,\n\t                                series: series,\n\t                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n\t                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n\t                                seriesIndex: d.series,\n\t                                pointIndex: i,\n\t                                color: color(d, i)\n\t                            });\n\t                        })\n\t                        .on('mouseout', function(d,i) {\n\t                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n\t                            var series = data[d.series],\n\t                                point  = series.values[i];\n\t\n\t                            dispatch.elementMouseout({\n\t                                point: point,\n\t                                series: series,\n\t                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n\t                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n\t                                seriesIndex: d.series,\n\t                                pointIndex: i,\n\t                                color: color(d, i)\n\t                            });\n\t                        });\n\t                }\n\t            }\n\t\n\t            needsUpdate = true;\n\t            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n\t                .data(function(d) { return d }, function(d) { return d.key });\n\t            groups.enter().append('g')\n\t                .style('stroke-opacity', 1e-6)\n\t                .style('fill-opacity', 1e-6);\n\t            groups.exit()\n\t                .remove();\n\t            groups\n\t                .attr('class', function(d,i) {\n\t                    return (d.classed || '') + ' nv-group nv-series-' + i;\n\t                })\n\t                .classed('nv-noninteractive', !interactive)\n\t                .classed('hover', function(d) { return d.hover });\n\t            groups.watchTransition(renderWatch, 'scatter: groups')\n\t                .style('fill', function(d,i) { return color(d, i) })\n\t                .style('stroke', function(d,i) { return d.pointBorderColor || pointBorderColor || color(d, i) })\n\t                .style('stroke-opacity', 1)\n\t                .style('fill-opacity', .5);\n\t\n\t            // create the points, maintaining their IDs from the original data set\n\t            var points = groups.selectAll('path.nv-point')\n\t                .data(function(d) {\n\t                    return d.values.map(\n\t                        function (point, pointIndex) {\n\t                            return [point, pointIndex]\n\t                        }).filter(\n\t                            function(pointArray, pointIndex) {\n\t                                return pointActive(pointArray[0], pointIndex)\n\t                            })\n\t                    });\n\t            points.enter().append('path')\n\t                .attr('class', function (d) {\n\t                    return 'nv-point nv-point-' + d[1];\n\t                })\n\t                .style('fill', function (d) { return d.color })\n\t                .style('stroke', function (d) { return d.color })\n\t                .attr('transform', function(d) {\n\t                    return 'translate(' + nv.utils.NaNtoZero(x0(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y0(getY(d[0],d[1]))) + ')'\n\t                })\n\t                .attr('d',\n\t                    nv.utils.symbol()\n\t                    .type(function(d) { return getShape(d[0]); })\n\t                    .size(function(d) { return z(getSize(d[0],d[1])) })\n\t            );\n\t            points.exit().each(delCache).remove();\n\t            groups.exit().selectAll('path.nv-point')\n\t                .watchTransition(renderWatch, 'scatter exit')\n\t                .attr('transform', function(d) {\n\t                    return 'translate(' + nv.utils.NaNtoZero(x(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n\t                })\n\t                .remove();\n\t            // Update points position only if \"x\" or \"y\" have changed\n\t            points.filter(function (d) { return scaleDiff || sizeDiff || getDiffs(d, 'x', getX, 'y', getY); })\n\t                .watchTransition(renderWatch, 'scatter points')\n\t                .attr('transform', function(d) {\n\t                    //nv.log(d, getX(d[0],d[1]), x(getX(d[0],d[1])));\n\t                    return 'translate(' + nv.utils.NaNtoZero(x(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n\t                });\n\t            // Update points appearance only if \"shape\" or \"size\" have changed\n\t            points.filter(function (d) { return scaleDiff || sizeDiff || getDiffs(d, 'shape', getShape, 'size', getSize); })\n\t                .watchTransition(renderWatch, 'scatter points')\n\t                .attr('d',\n\t                    nv.utils.symbol()\n\t                    .type(function(d) { return getShape(d[0]); })\n\t                    .size(function(d) { return z(getSize(d[0],d[1])) })\n\t            );\n\t\n\t            // add label a label to scatter chart\n\t            if(showLabels)\n\t            {\n\t                var titles =  groups.selectAll('.nv-label')\n\t                    .data(function(d) {\n\t                        return d.values.map(\n\t                            function (point, pointIndex) {\n\t                                return [point, pointIndex]\n\t                            }).filter(\n\t                                function(pointArray, pointIndex) {\n\t                                    return pointActive(pointArray[0], pointIndex)\n\t                                })\n\t                        });\n\t\n\t                titles.enter().append('text')\n\t                    .style('fill', function (d,i) {\n\t                        return d.color })\n\t                    .style('stroke-opacity', 0)\n\t                    .style('fill-opacity', 1)\n\t                    .attr('transform', function(d) {\n\t                        var dx = nv.utils.NaNtoZero(x0(getX(d[0],d[1]))) + Math.sqrt(z(getSize(d[0],d[1]))/Math.PI) + 2;\n\t                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y0(getY(d[0],d[1]))) + ')';\n\t                    })\n\t                    .text(function(d,i){\n\t                        return d[0].label;});\n\t\n\t                titles.exit().remove();\n\t                groups.exit().selectAll('path.nv-label')\n\t                    .watchTransition(renderWatch, 'scatter exit')\n\t                    .attr('transform', function(d) {\n\t                        var dx = nv.utils.NaNtoZero(x(getX(d[0],d[1])))+ Math.sqrt(z(getSize(d[0],d[1]))/Math.PI)+2;\n\t                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')';\n\t                    })\n\t                    .remove();\n\t               titles.each(function(d) {\n\t                  d3.select(this)\n\t                    .classed('nv-label', true)\n\t                    .classed('nv-label-' + d[1], false)\n\t                    .classed('hover',false);\n\t                });\n\t                titles.watchTransition(renderWatch, 'scatter labels')\n\t                    .attr('transform', function(d) {\n\t                        var dx = nv.utils.NaNtoZero(x(getX(d[0],d[1])))+ Math.sqrt(z(getSize(d[0],d[1]))/Math.PI)+2;\n\t                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n\t                    });\n\t            }\n\t\n\t            // Delay updating the invisible interactive layer for smoother animation\n\t            if( interactiveUpdateDelay )\n\t            {\n\t                clearTimeout(timeoutID); // stop repeat calls to updateInteractiveLayer\n\t                timeoutID = setTimeout(updateInteractiveLayer, interactiveUpdateDelay );\n\t            }\n\t            else\n\t            {\n\t                updateInteractiveLayer();\n\t            }\n\t\n\t            //store old scales for use in transitions on update\n\t            x0 = x.copy();\n\t            y0 = y.copy();\n\t            z0 = z.copy();\n\t\n\t            width0 = width;\n\t            height0 = height;\n\t\n\t        });\n\t        renderWatch.renderEnd('scatter immediate');\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    chart.dispatch = dispatch;\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    // utility function calls provided by this chart\n\t    chart._calls = new function() {\n\t        this.clearHighlights = function () {\n\t            nv.dom.write(function() {\n\t                container.selectAll(\".nv-point.hover\").classed(\"hover\", false);\n\t            });\n\t            return null;\n\t        };\n\t        this.highlightPoint = function (seriesIndex, pointIndex, isHoverOver) {\n\t            nv.dom.write(function() {\n\t                container.select('.nv-groups')\n\t                  .selectAll(\".nv-series-\" + seriesIndex)\n\t                  .selectAll(\".nv-point-\" + pointIndex)\n\t                  .classed(\"hover\", isHoverOver);\n\t            });\n\t        };\n\t    };\n\t\n\t    // trigger calls from events too\n\t    dispatch.on('elementMouseover.point', function(d) {\n\t        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,true);\n\t    });\n\t\n\t    dispatch.on('elementMouseout.point', function(d) {\n\t        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,false);\n\t    });\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:        {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:       {get: function(){return height;}, set: function(_){height=_;}},\n\t        xScale:       {get: function(){return x;}, set: function(_){x=_;}},\n\t        yScale:       {get: function(){return y;}, set: function(_){y=_;}},\n\t        pointScale:   {get: function(){return z;}, set: function(_){z=_;}},\n\t        xDomain:      {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n\t        yDomain:      {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n\t        pointDomain:  {get: function(){return sizeDomain;}, set: function(_){sizeDomain=_;}},\n\t        xRange:       {get: function(){return xRange;}, set: function(_){xRange=_;}},\n\t        yRange:       {get: function(){return yRange;}, set: function(_){yRange=_;}},\n\t        pointRange:   {get: function(){return sizeRange;}, set: function(_){sizeRange=_;}},\n\t        forceX:       {get: function(){return forceX;}, set: function(_){forceX=_;}},\n\t        forceY:       {get: function(){return forceY;}, set: function(_){forceY=_;}},\n\t        forcePoint:   {get: function(){return forceSize;}, set: function(_){forceSize=_;}},\n\t        interactive:  {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\t        pointActive:  {get: function(){return pointActive;}, set: function(_){pointActive=_;}},\n\t        padDataOuter: {get: function(){return padDataOuter;}, set: function(_){padDataOuter=_;}},\n\t        padData:      {get: function(){return padData;}, set: function(_){padData=_;}},\n\t        clipEdge:     {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n\t        clipVoronoi:  {get: function(){return clipVoronoi;}, set: function(_){clipVoronoi=_;}},\n\t        clipRadius:   {get: function(){return clipRadius;}, set: function(_){clipRadius=_;}},\n\t        showVoronoi:   {get: function(){return showVoronoi;}, set: function(_){showVoronoi=_;}},\n\t        id:           {get: function(){return id;}, set: function(_){id=_;}},\n\t        interactiveUpdateDelay: {get:function(){return interactiveUpdateDelay;}, set: function(_){interactiveUpdateDelay=_;}},\n\t        showLabels: {get: function(){return showLabels;}, set: function(_){ showLabels = _;}},\n\t        pointBorderColor: {get: function(){return pointBorderColor;}, set: function(_){pointBorderColor=_;}},\n\t\n\t        // simple functor options\n\t        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},\n\t        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},\n\t        pointSize: {get: function(){return getSize;}, set: function(_){getSize = d3.functor(_);}},\n\t        pointShape: {get: function(){return getShape;}, set: function(_){getShape = d3.functor(_);}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        duration: {get: function(){return duration;}, set: function(_){\n\t            duration = _;\n\t            renderWatch.reset(duration);\n\t        }},\n\t        color: {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t        }},\n\t        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){\n\t            useVoronoi = _;\n\t            if (useVoronoi === false) {\n\t                clipVoronoi = false;\n\t            }\n\t        }}\n\t    });\n\t\n\t    nv.utils.initOptions(chart);\n\t    return chart;\n\t};\n\t\n\tnv.models.scatterChart = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var scatter      = nv.models.scatter()\n\t        , xAxis        = nv.models.axis()\n\t        , yAxis        = nv.models.axis()\n\t        , legend       = nv.models.legend()\n\t        , distX        = nv.models.distribution()\n\t        , distY        = nv.models.distribution()\n\t        , tooltip      = nv.models.tooltip()\n\t        ;\n\t\n\t    var margin       = {top: 30, right: 20, bottom: 50, left: 75}\n\t        , marginTop = null\n\t        , width        = null\n\t        , height       = null\n\t        , container    = null\n\t        , color        = nv.utils.defaultColor()\n\t        , x            = scatter.xScale()\n\t        , y            = scatter.yScale()\n\t        , showDistX    = false\n\t        , showDistY    = false\n\t        , showLegend   = true\n\t        , showXAxis    = true\n\t        , showYAxis    = true\n\t        , rightAlignYAxis = false\n\t        , state = nv.utils.state()\n\t        , defaultState = null\n\t        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n\t        , noData       = null\n\t        , duration = 250\n\t        , showLabels    = false\n\t        ;\n\t\n\t    scatter.xScale(x).yScale(y);\n\t    xAxis.orient('bottom').tickPadding(10);\n\t    yAxis\n\t        .orient((rightAlignYAxis) ? 'right' : 'left')\n\t        .tickPadding(10)\n\t    ;\n\t    distX.axis('x');\n\t    distY.axis('y');\n\t    tooltip\n\t        .headerFormatter(function(d, i) {\n\t            return xAxis.tickFormat()(d, i);\n\t        })\n\t        .valueFormatter(function(d, i) {\n\t            return yAxis.tickFormat()(d, i);\n\t        });\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var x0, y0\n\t        , renderWatch = nv.utils.renderWatch(dispatch, duration);\n\t\n\t    var stateGetter = function(data) {\n\t        return function(){\n\t            return {\n\t                active: data.map(function(d) { return !d.disabled })\n\t            };\n\t        }\n\t    };\n\t\n\t    var stateSetter = function(data) {\n\t        return function(state) {\n\t            if (state.active !== undefined)\n\t                data.forEach(function(series,i) {\n\t                    series.disabled = !state.active[i];\n\t                });\n\t        }\n\t    };\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        renderWatch.models(scatter);\n\t        if (showXAxis) renderWatch.models(xAxis);\n\t        if (showYAxis) renderWatch.models(yAxis);\n\t        if (showDistX) renderWatch.models(distX);\n\t        if (showDistY) renderWatch.models(distY);\n\t\n\t        selection.each(function(data) {\n\t            var that = this;\n\t\n\t            container = d3.select(this);\n\t            nv.utils.initSVG(container);\n\t\n\t            var availableWidth = nv.utils.availableWidth(width, container, margin),\n\t                availableHeight = nv.utils.availableHeight(height, container, margin);\n\t\n\t            chart.update = function() {\n\t                if (duration === 0)\n\t                    container.call(chart);\n\t                else\n\t                    container.transition().duration(duration).call(chart);\n\t            };\n\t            chart.container = this;\n\t\n\t            state\n\t                .setter(stateSetter(data), chart.update)\n\t                .getter(stateGetter(data))\n\t                .update();\n\t\n\t            // DEPRECATED set state.disableddisabled\n\t            state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t            if (!defaultState) {\n\t                var key;\n\t                defaultState = {};\n\t                for (key in state) {\n\t                    if (state[key] instanceof Array)\n\t                        defaultState[key] = state[key].slice(0);\n\t                    else\n\t                        defaultState[key] = state[key];\n\t                }\n\t            }\n\t\n\t            // Display noData message if there's nothing to show.\n\t            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t                nv.utils.noData(chart, container);\n\t                renderWatch.renderEnd('scatter immediate');\n\t                return chart;\n\t            } else {\n\t                container.selectAll('.nv-noData').remove();\n\t            }\n\t\n\t            // Setup Scales\n\t            x = scatter.xScale();\n\t            y = scatter.yScale();\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);\n\t            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());\n\t            var gEnter = wrapEnter.append('g');\n\t            var g = wrap.select('g');\n\t\n\t            // background for pointer events\n\t            gEnter.append('rect').attr('class', 'nvd3 nv-background').style(\"pointer-events\",\"none\");\n\t\n\t            gEnter.append('g').attr('class', 'nv-x nv-axis');\n\t            gEnter.append('g').attr('class', 'nv-y nv-axis');\n\t            gEnter.append('g').attr('class', 'nv-scatterWrap');\n\t            gEnter.append('g').attr('class', 'nv-regressionLinesWrap');\n\t            gEnter.append('g').attr('class', 'nv-distWrap');\n\t            gEnter.append('g').attr('class', 'nv-legendWrap');\n\t\n\t            if (rightAlignYAxis) {\n\t                g.select(\".nv-y.nv-axis\")\n\t                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t            }\n\t\n\t            // Legend\n\t            if (!showLegend) {\n\t                g.select('.nv-legendWrap').selectAll('*').remove();\n\t            } else {\n\t                var legendWidth = availableWidth;\n\t                legend.width(legendWidth);\n\t\n\t                wrap.select('.nv-legendWrap')\n\t                    .datum(data)\n\t                    .call(legend);\n\t\n\t                if (!marginTop && legend.height() !== margin.top) {\n\t                    margin.top = legend.height();\n\t                    availableHeight = nv.utils.availableHeight(height, container, margin);\n\t                }\n\t\n\t                wrap.select('.nv-legendWrap')\n\t                    .attr('transform', 'translate(0' + ',' + (-margin.top) +')');\n\t            }\n\t\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            // Main Chart Component(s)\n\t            scatter\n\t                .width(availableWidth)\n\t                .height(availableHeight)\n\t                .color(data.map(function(d,i) {\n\t                    d.color = d.color || color(d, i);\n\t                    return d.color;\n\t                }).filter(function(d,i) { return !data[i].disabled }))\n\t                .showLabels(showLabels);\n\t\n\t            wrap.select('.nv-scatterWrap')\n\t                .datum(data.filter(function(d) { return !d.disabled }))\n\t                .call(scatter);\n\t\n\t\n\t            wrap.select('.nv-regressionLinesWrap')\n\t                .attr('clip-path', 'url(#nv-edge-clip-' + scatter.id() + ')');\n\t\n\t            var regWrap = wrap.select('.nv-regressionLinesWrap').selectAll('.nv-regLines')\n\t                .data(function (d) {\n\t                    return d;\n\t                });\n\t\n\t            regWrap.enter().append('g').attr('class', 'nv-regLines');\n\t\n\t            var regLine = regWrap.selectAll('.nv-regLine')\n\t                .data(function (d) {\n\t                    return [d]\n\t                });\n\t\n\t            regLine.enter()\n\t                .append('line').attr('class', 'nv-regLine')\n\t                .style('stroke-opacity', 0);\n\t\n\t            // don't add lines unless we have slope and intercept to use\n\t            regLine.filter(function(d) {\n\t                return d.intercept && d.slope;\n\t            })\n\t                .watchTransition(renderWatch, 'scatterPlusLineChart: regline')\n\t                .attr('x1', x.range()[0])\n\t                .attr('x2', x.range()[1])\n\t                .attr('y1', function (d, i) {\n\t                    return y(x.domain()[0] * d.slope + d.intercept)\n\t                })\n\t                .attr('y2', function (d, i) {\n\t                    return y(x.domain()[1] * d.slope + d.intercept)\n\t                })\n\t                .style('stroke', function (d, i, j) {\n\t                    return color(d, j)\n\t                })\n\t                .style('stroke-opacity', function (d, i) {\n\t                    return (d.disabled || typeof d.slope === 'undefined' || typeof d.intercept === 'undefined') ? 0 : 1\n\t                });\n\t\n\t            // Setup Axes\n\t            if (showXAxis) {\n\t                xAxis\n\t                    .scale(x)\n\t                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n\t                    .tickSize( -availableHeight , 0);\n\t\n\t                g.select('.nv-x.nv-axis')\n\t                    .attr('transform', 'translate(0,' + y.range()[0] + ')')\n\t                    .call(xAxis);\n\t            }\n\t\n\t            if (showYAxis) {\n\t                yAxis\n\t                    .scale(y)\n\t                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n\t                    .tickSize( -availableWidth, 0);\n\t\n\t                g.select('.nv-y.nv-axis')\n\t                    .call(yAxis);\n\t            }\n\t\n\t            // Setup Distribution\n\t            if (showDistX) {\n\t                distX\n\t                    .getData(scatter.x())\n\t                    .scale(x)\n\t                    .width(availableWidth)\n\t                    .color(data.map(function(d,i) {\n\t                        return d.color || color(d, i);\n\t                    }).filter(function(d,i) { return !data[i].disabled }));\n\t                gEnter.select('.nv-distWrap').append('g')\n\t                    .attr('class', 'nv-distributionX');\n\t                g.select('.nv-distributionX')\n\t                    .attr('transform', 'translate(0,' + y.range()[0] + ')')\n\t                    .datum(data.filter(function(d) { return !d.disabled }))\n\t                    .call(distX);\n\t            }\n\t\n\t            if (showDistY) {\n\t                distY\n\t                    .getData(scatter.y())\n\t                    .scale(y)\n\t                    .width(availableHeight)\n\t                    .color(data.map(function(d,i) {\n\t                        return d.color || color(d, i);\n\t                    }).filter(function(d,i) { return !data[i].disabled }));\n\t                gEnter.select('.nv-distWrap').append('g')\n\t                    .attr('class', 'nv-distributionY');\n\t                g.select('.nv-distributionY')\n\t                    .attr('transform', 'translate(' + (rightAlignYAxis ? availableWidth : -distY.size() ) + ',0)')\n\t                    .datum(data.filter(function(d) { return !d.disabled }))\n\t                    .call(distY);\n\t            }\n\t\n\t            //============================================================\n\t            // Event Handling/Dispatching (in chart's scope)\n\t            //------------------------------------------------------------\n\t\n\t            legend.dispatch.on('stateChange', function(newState) {\n\t                for (var key in newState)\n\t                    state[key] = newState[key];\n\t                dispatch.stateChange(state);\n\t                chart.update();\n\t            });\n\t\n\t            // Update chart from a state object passed to event handler\n\t            dispatch.on('changeState', function(e) {\n\t                if (typeof e.disabled !== 'undefined') {\n\t                    data.forEach(function(series,i) {\n\t                        series.disabled = e.disabled[i];\n\t                    });\n\t                    state.disabled = e.disabled;\n\t                }\n\t                chart.update();\n\t            });\n\t\n\t            // mouseover needs availableHeight so we just keep scatter mouse events inside the chart block\n\t            scatter.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t                tooltip.hidden(true);\n\t                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n\t                    .attr('y1', 0);\n\t                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n\t                    .attr('x2', distY.size());\n\t            });\n\t\n\t            scatter.dispatch.on('elementMouseover.tooltip', function(evt) {\n\t                container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n\t                    .attr('y1', evt.relativePos[1] - availableHeight);\n\t                container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n\t                    .attr('x2', evt.relativePos[0] + distX.size());\n\t                tooltip.data(evt).hidden(false);\n\t            });\n\t\n\t            //store old scales for use in transitions on update\n\t            x0 = x.copy();\n\t            y0 = y.copy();\n\t\n\t        });\n\t\n\t        renderWatch.renderEnd('scatter with line immediate');\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    // expose chart's sub-components\n\t    chart.dispatch = dispatch;\n\t    chart.scatter = scatter;\n\t    chart.legend = legend;\n\t    chart.xAxis = xAxis;\n\t    chart.yAxis = yAxis;\n\t    chart.distX = distX;\n\t    chart.distY = distY;\n\t    chart.tooltip = tooltip;\n\t\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:      {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\t        container:  {get: function(){return container;}, set: function(_){container=_;}},\n\t        showDistX:  {get: function(){return showDistX;}, set: function(_){showDistX=_;}},\n\t        showDistY:  {get: function(){return showDistY;}, set: function(_){showDistY=_;}},\n\t        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n\t        showXAxis:  {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n\t        showYAxis:  {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n\t        defaultState:     {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n\t        noData:     {get: function(){return noData;}, set: function(_){noData=_;}},\n\t        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},\n\t        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            if (_.top !== undefined) {\n\t                margin.top = _.top;\n\t                marginTop = _.top;\n\t            }\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n\t            rightAlignYAxis = _;\n\t            yAxis.orient( (_) ? 'right' : 'left');\n\t        }},\n\t        color: {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t            legend.color(color);\n\t            distX.color(color);\n\t            distY.color(color);\n\t        }}\n\t    });\n\t\n\t    nv.utils.inheritOptions(chart, scatter);\n\t    nv.utils.initOptions(chart);\n\t    return chart;\n\t};\n\t\n\tnv.models.sparkline = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var margin = {top: 2, right: 0, bottom: 2, left: 0}\n\t        , width = 400\n\t        , height = 32\n\t        , container = null\n\t        , animate = true\n\t        , x = d3.scale.linear()\n\t        , y = d3.scale.linear()\n\t        , getX = function(d) { return d.x }\n\t        , getY = function(d) { return d.y }\n\t        , color = nv.utils.getColor(['#000'])\n\t        , xDomain\n\t        , yDomain\n\t        , xRange\n\t        , yRange\n\t        , showMinMaxPoints = true\n\t        , showCurrentPoint = true\n\t        , dispatch = d3.dispatch('renderEnd')\n\t        ;\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var renderWatch = nv.utils.renderWatch(dispatch);\n\t    \n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        selection.each(function(data) {\n\t            var availableWidth = width - margin.left - margin.right,\n\t                availableHeight = height - margin.top - margin.bottom;\n\t\n\t            container = d3.select(this);\n\t            nv.utils.initSVG(container);\n\t\n\t            // Setup Scales\n\t            x   .domain(xDomain || d3.extent(data, getX ))\n\t                .range(xRange || [0, availableWidth]);\n\t\n\t            y   .domain(yDomain || d3.extent(data, getY ))\n\t                .range(yRange || [availableHeight, 0]);\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap.nv-sparkline').data([data]);\n\t            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparkline');\n\t            var gEnter = wrapEnter.append('g');\n\t            var g = wrap.select('g');\n\t\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\t\n\t            var paths = wrap.selectAll('path')\n\t                .data(function(d) { return [d] });\n\t            paths.enter().append('path');\n\t            paths.exit().remove();\n\t            paths\n\t                .style('stroke', function(d,i) { return d.color || color(d, i) })\n\t                .attr('d', d3.svg.line()\n\t                    .x(function(d,i) { return x(getX(d,i)) })\n\t                    .y(function(d,i) { return y(getY(d,i)) })\n\t            );\n\t\n\t            // TODO: Add CURRENT data point (Need Min, Mac, Current / Most recent)\n\t            var points = wrap.selectAll('circle.nv-point')\n\t                .data(function(data) {\n\t                    var yValues = data.map(function(d, i) { return getY(d,i); });\n\t                    function pointIndex(index) {\n\t                        if (index != -1) {\n\t                            var result = data[index];\n\t                            result.pointIndex = index;\n\t                            return result;\n\t                        } else {\n\t                            return null;\n\t                        }\n\t                    }\n\t                    var maxPoint = pointIndex(yValues.lastIndexOf(y.domain()[1])),\n\t                        minPoint = pointIndex(yValues.indexOf(y.domain()[0])),\n\t                        currentPoint = pointIndex(yValues.length - 1);\n\t                    return [(showMinMaxPoints ? minPoint : null), (showMinMaxPoints ? maxPoint : null), (showCurrentPoint ? currentPoint : null)].filter(function (d) {return d != null;});\n\t                });\n\t            points.enter().append('circle');\n\t            points.exit().remove();\n\t            points\n\t                .attr('cx', function(d,i) { return x(getX(d,d.pointIndex)) })\n\t                .attr('cy', function(d,i) { return y(getY(d,d.pointIndex)) })\n\t                .attr('r', 2)\n\t                .attr('class', function(d,i) {\n\t                    return getX(d, d.pointIndex) == x.domain()[1] ? 'nv-point nv-currentValue' :\n\t                            getY(d, d.pointIndex) == y.domain()[0] ? 'nv-point nv-minValue' : 'nv-point nv-maxValue'\n\t                });\n\t        });\n\t        \n\t        renderWatch.renderEnd('sparkline immediate');\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:            {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:           {get: function(){return height;}, set: function(_){height=_;}},\n\t        xDomain:          {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n\t        yDomain:          {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n\t        xRange:           {get: function(){return xRange;}, set: function(_){xRange=_;}},\n\t        yRange:           {get: function(){return yRange;}, set: function(_){yRange=_;}},\n\t        xScale:           {get: function(){return x;}, set: function(_){x=_;}},\n\t        yScale:           {get: function(){return y;}, set: function(_){y=_;}},\n\t        animate:          {get: function(){return animate;}, set: function(_){animate=_;}},\n\t        showMinMaxPoints: {get: function(){return showMinMaxPoints;}, set: function(_){showMinMaxPoints=_;}},\n\t        showCurrentPoint: {get: function(){return showCurrentPoint;}, set: function(_){showCurrentPoint=_;}},\n\t\n\t        //functor options\n\t        x: {get: function(){return getX;}, set: function(_){getX=d3.functor(_);}},\n\t        y: {get: function(){return getY;}, set: function(_){getY=d3.functor(_);}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t        }}\n\t    });\n\t\n\t    chart.dispatch = dispatch;\n\t    nv.utils.initOptions(chart);\n\t    return chart;\n\t};\n\t\n\tnv.models.sparklinePlus = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var sparkline = nv.models.sparkline();\n\t\n\t    var margin = {top: 15, right: 100, bottom: 10, left: 50}\n\t        , width = null\n\t        , height = null\n\t        , x\n\t        , y\n\t        , index = []\n\t        , paused = false\n\t        , xTickFormat = d3.format(',r')\n\t        , yTickFormat = d3.format(',.2f')\n\t        , showLastValue = true\n\t        , alignValue = true\n\t        , rightAlignValue = false\n\t        , noData = null\n\t        , dispatch = d3.dispatch('renderEnd')\n\t        ;\n\t        \n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var renderWatch = nv.utils.renderWatch(dispatch);\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        renderWatch.models(sparkline);\n\t        selection.each(function(data) {\n\t            var container = d3.select(this);\n\t            nv.utils.initSVG(container);\n\t\n\t            var availableWidth = nv.utils.availableWidth(width, container, margin),\n\t                availableHeight = nv.utils.availableHeight(height, container, margin);\n\t\n\t            chart.update = function() { container.call(chart); };\n\t            chart.container = this;\n\t\n\t            // Display No Data message if there's nothing to show.\n\t            if (!data || !data.length) {\n\t                nv.utils.noData(chart, container)\n\t                return chart;\n\t            } else {\n\t                container.selectAll('.nv-noData').remove();\n\t            }\n\t\n\t            var currentValue = sparkline.y()(data[data.length-1], data.length-1);\n\t\n\t            // Setup Scales\n\t            x = sparkline.xScale();\n\t            y = sparkline.yScale();\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap.nv-sparklineplus').data([data]);\n\t            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparklineplus');\n\t            var gEnter = wrapEnter.append('g');\n\t            var g = wrap.select('g');\n\t\n\t            gEnter.append('g').attr('class', 'nv-sparklineWrap');\n\t            gEnter.append('g').attr('class', 'nv-valueWrap');\n\t            gEnter.append('g').attr('class', 'nv-hoverArea');\n\t\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            // Main Chart Component(s)\n\t            var sparklineWrap = g.select('.nv-sparklineWrap');\n\t\n\t            sparkline.width(availableWidth).height(availableHeight);\n\t            sparklineWrap.call(sparkline);\n\t\n\t            if (showLastValue) {\n\t                var valueWrap = g.select('.nv-valueWrap');\n\t                var value = valueWrap.selectAll('.nv-currentValue')\n\t                    .data([currentValue]);\n\t\n\t                value.enter().append('text').attr('class', 'nv-currentValue')\n\t                    .attr('dx', rightAlignValue ? -8 : 8)\n\t                    .attr('dy', '.9em')\n\t                    .style('text-anchor', rightAlignValue ? 'end' : 'start');\n\t\n\t                value\n\t                    .attr('x', availableWidth + (rightAlignValue ? margin.right : 0))\n\t                    .attr('y', alignValue ? function (d) {\n\t                        return y(d)\n\t                    } : 0)\n\t                    .style('fill', sparkline.color()(data[data.length - 1], data.length - 1))\n\t                    .text(yTickFormat(currentValue));\n\t            }\n\t\n\t            gEnter.select('.nv-hoverArea').append('rect')\n\t                .on('mousemove', sparklineHover)\n\t                .on('click', function() { paused = !paused })\n\t                .on('mouseout', function() { index = []; updateValueLine(); });\n\t\n\t            g.select('.nv-hoverArea rect')\n\t                .attr('transform', function(d) { return 'translate(' + -margin.left + ',' + -margin.top + ')' })\n\t                .attr('width', availableWidth + margin.left + margin.right)\n\t                .attr('height', availableHeight + margin.top);\n\t\n\t            //index is currently global (within the chart), may or may not keep it that way\n\t            function updateValueLine() {\n\t                if (paused) return;\n\t\n\t                var hoverValue = g.selectAll('.nv-hoverValue').data(index);\n\t\n\t                var hoverEnter = hoverValue.enter()\n\t                    .append('g').attr('class', 'nv-hoverValue')\n\t                    .style('stroke-opacity', 0)\n\t                    .style('fill-opacity', 0);\n\t\n\t                hoverValue.exit()\n\t                    .transition().duration(250)\n\t                    .style('stroke-opacity', 0)\n\t                    .style('fill-opacity', 0)\n\t                    .remove();\n\t\n\t                hoverValue\n\t                    .attr('transform', function(d) { return 'translate(' + x(sparkline.x()(data[d],d)) + ',0)' })\n\t                    .transition().duration(250)\n\t                    .style('stroke-opacity', 1)\n\t                    .style('fill-opacity', 1);\n\t\n\t                if (!index.length) return;\n\t\n\t                hoverEnter.append('line')\n\t                    .attr('x1', 0)\n\t                    .attr('y1', -margin.top)\n\t                    .attr('x2', 0)\n\t                    .attr('y2', availableHeight);\n\t\n\t                hoverEnter.append('text').attr('class', 'nv-xValue')\n\t                    .attr('x', -6)\n\t                    .attr('y', -margin.top)\n\t                    .attr('text-anchor', 'end')\n\t                    .attr('dy', '.9em');\n\t\n\t                g.select('.nv-hoverValue .nv-xValue')\n\t                    .text(xTickFormat(sparkline.x()(data[index[0]], index[0])));\n\t\n\t                hoverEnter.append('text').attr('class', 'nv-yValue')\n\t                    .attr('x', 6)\n\t                    .attr('y', -margin.top)\n\t                    .attr('text-anchor', 'start')\n\t                    .attr('dy', '.9em');\n\t\n\t                g.select('.nv-hoverValue .nv-yValue')\n\t                    .text(yTickFormat(sparkline.y()(data[index[0]], index[0])));\n\t            }\n\t\n\t            function sparklineHover() {\n\t                if (paused) return;\n\t\n\t                var pos = d3.mouse(this)[0] - margin.left;\n\t\n\t                function getClosestIndex(data, x) {\n\t                    var distance = Math.abs(sparkline.x()(data[0], 0) - x);\n\t                    var closestIndex = 0;\n\t                    for (var i = 0; i < data.length; i++){\n\t                        if (Math.abs(sparkline.x()(data[i], i) - x) < distance) {\n\t                            distance = Math.abs(sparkline.x()(data[i], i) - x);\n\t                            closestIndex = i;\n\t                        }\n\t                    }\n\t                    return closestIndex;\n\t                }\n\t\n\t                index = [getClosestIndex(data, Math.round(x.invert(pos)))];\n\t                updateValueLine();\n\t            }\n\t\n\t        });\n\t        renderWatch.renderEnd('sparklinePlus immediate');\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    // expose chart's sub-components\n\t    chart.dispatch = dispatch;\n\t    chart.sparkline = sparkline;\n\t\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:           {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:          {get: function(){return height;}, set: function(_){height=_;}},\n\t        xTickFormat:     {get: function(){return xTickFormat;}, set: function(_){xTickFormat=_;}},\n\t        yTickFormat:     {get: function(){return yTickFormat;}, set: function(_){yTickFormat=_;}},\n\t        showLastValue:   {get: function(){return showLastValue;}, set: function(_){showLastValue=_;}},\n\t        alignValue:      {get: function(){return alignValue;}, set: function(_){alignValue=_;}},\n\t        rightAlignValue: {get: function(){return rightAlignValue;}, set: function(_){rightAlignValue=_;}},\n\t        noData:          {get: function(){return noData;}, set: function(_){noData=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }}\n\t    });\n\t\n\t    nv.utils.inheritOptions(chart, sparkline);\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t};\n\t\n\tnv.models.stackedArea = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t        , width = 960\n\t        , height = 500\n\t        , color = nv.utils.defaultColor() // a function that computes the color\n\t        , id = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't selet one\n\t        , container = null\n\t        , getX = function(d) { return d.x } // accessor to get the x value from a data point\n\t        , getY = function(d) { return d.y } // accessor to get the y value from a data point\n\t        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined\n\t        , style = 'stack'\n\t        , offset = 'zero'\n\t        , order = 'default'\n\t        , interpolate = 'linear'  // controls the line interpolation\n\t        , clipEdge = false // if true, masks lines within x and y scale\n\t        , x //can be accessed via chart.xScale()\n\t        , y //can be accessed via chart.yScale()\n\t        , scatter = nv.models.scatter()\n\t        , duration = 250\n\t        , dispatch =  d3.dispatch('areaClick', 'areaMouseover', 'areaMouseout','renderEnd', 'elementClick', 'elementMouseover', 'elementMouseout')\n\t        ;\n\t\n\t    scatter\n\t        .pointSize(2.2) // default size\n\t        .pointDomain([2.2, 2.2]) // all the same size by default\n\t    ;\n\t\n\t    /************************************\n\t     * offset:\n\t     *   'wiggle' (stream)\n\t     *   'zero' (stacked)\n\t     *   'expand' (normalize to 100%)\n\t     *   'silhouette' (simple centered)\n\t     *\n\t     * order:\n\t     *   'inside-out' (stream)\n\t     *   'default' (input order)\n\t     ************************************/\n\t\n\t    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        renderWatch.models(scatter);\n\t        selection.each(function(data) {\n\t            var availableWidth = width - margin.left - margin.right,\n\t                availableHeight = height - margin.top - margin.bottom;\n\t\n\t            container = d3.select(this);\n\t            nv.utils.initSVG(container);\n\t\n\t            // Setup Scales\n\t            x = scatter.xScale();\n\t            y = scatter.yScale();\n\t\n\t            var dataRaw = data;\n\t            // Injecting point index into each point because d3.layout.stack().out does not give index\n\t            data.forEach(function(aseries, i) {\n\t                aseries.seriesIndex = i;\n\t                aseries.values = aseries.values.map(function(d, j) {\n\t                    d.index = j;\n\t                    d.seriesIndex = i;\n\t                    return d;\n\t                });\n\t            });\n\t\n\t            var dataFiltered = data.filter(function(series) {\n\t                return !series.disabled;\n\t            });\n\t\n\t            data = d3.layout.stack()\n\t                .order(order)\n\t                .offset(offset)\n\t                .values(function(d) { return d.values })  //TODO: make values customizeable in EVERY model in this fashion\n\t                .x(getX)\n\t                .y(getY)\n\t                .out(function(d, y0, y) {\n\t                    d.display = {\n\t                        y: y,\n\t                        y0: y0\n\t                    };\n\t                })\n\t            (dataFiltered);\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap.nv-stackedarea').data([data]);\n\t            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedarea');\n\t            var defsEnter = wrapEnter.append('defs');\n\t            var gEnter = wrapEnter.append('g');\n\t            var g = wrap.select('g');\n\t\n\t            gEnter.append('g').attr('class', 'nv-areaWrap');\n\t            gEnter.append('g').attr('class', 'nv-scatterWrap');\n\t\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t            \n\t            // If the user has not specified forceY, make sure 0 is included in the domain\n\t            // Otherwise, use user-specified values for forceY\n\t            if (scatter.forceY().length == 0) {\n\t                scatter.forceY().push(0);\n\t            }\n\t            \n\t            scatter\n\t                .width(availableWidth)\n\t                .height(availableHeight)\n\t                .x(getX)\n\t                .y(function(d) {\n\t                    if (d.display !== undefined) { return d.display.y + d.display.y0; }\n\t                })\n\t                .color(data.map(function(d,i) {\n\t                    d.color = d.color || color(d, d.seriesIndex);\n\t                    return d.color;\n\t                }));\n\t\n\t            var scatterWrap = g.select('.nv-scatterWrap')\n\t                .datum(data);\n\t\n\t            scatterWrap.call(scatter);\n\t\n\t            defsEnter.append('clipPath')\n\t                .attr('id', 'nv-edge-clip-' + id)\n\t                .append('rect');\n\t\n\t            wrap.select('#nv-edge-clip-' + id + ' rect')\n\t                .attr('width', availableWidth)\n\t                .attr('height', availableHeight);\n\t\n\t            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\t\n\t            var area = d3.svg.area()\n\t                .defined(defined)\n\t                .x(function(d,i)  { return x(getX(d,i)) })\n\t                .y0(function(d) {\n\t                    return y(d.display.y0)\n\t                })\n\t                .y1(function(d) {\n\t                    return y(d.display.y + d.display.y0)\n\t                })\n\t                .interpolate(interpolate);\n\t\n\t            var zeroArea = d3.svg.area()\n\t                .defined(defined)\n\t                .x(function(d,i)  { return x(getX(d,i)) })\n\t                .y0(function(d) { return y(d.display.y0) })\n\t                .y1(function(d) { return y(d.display.y0) });\n\t\n\t            var path = g.select('.nv-areaWrap').selectAll('path.nv-area')\n\t                .data(function(d) { return d });\n\t\n\t            path.enter().append('path').attr('class', function(d,i) { return 'nv-area nv-area-' + i })\n\t                .attr('d', function(d,i){\n\t                    return zeroArea(d.values, d.seriesIndex);\n\t                })\n\t                .on('mouseover', function(d,i) {\n\t                    d3.select(this).classed('hover', true);\n\t                    dispatch.areaMouseover({\n\t                        point: d,\n\t                        series: d.key,\n\t                        pos: [d3.event.pageX, d3.event.pageY],\n\t                        seriesIndex: d.seriesIndex\n\t                    });\n\t                })\n\t                .on('mouseout', function(d,i) {\n\t                    d3.select(this).classed('hover', false);\n\t                    dispatch.areaMouseout({\n\t                        point: d,\n\t                        series: d.key,\n\t                        pos: [d3.event.pageX, d3.event.pageY],\n\t                        seriesIndex: d.seriesIndex\n\t                    });\n\t                })\n\t                .on('click', function(d,i) {\n\t                    d3.select(this).classed('hover', false);\n\t                    dispatch.areaClick({\n\t                        point: d,\n\t                        series: d.key,\n\t                        pos: [d3.event.pageX, d3.event.pageY],\n\t                        seriesIndex: d.seriesIndex\n\t                    });\n\t                });\n\t\n\t            path.exit().remove();\n\t            path.style('fill', function(d,i){\n\t                    return d.color || color(d, d.seriesIndex)\n\t                })\n\t                .style('stroke', function(d,i){ return d.color || color(d, d.seriesIndex) });\n\t            path.watchTransition(renderWatch,'stackedArea path')\n\t                .attr('d', function(d,i) {\n\t                    return area(d.values,i)\n\t                });\n\t\n\t            //============================================================\n\t            // Event Handling/Dispatching (in chart's scope)\n\t            //------------------------------------------------------------\n\t\n\t            scatter.dispatch.on('elementMouseover.area', function(e) {\n\t                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', true);\n\t            });\n\t            scatter.dispatch.on('elementMouseout.area', function(e) {\n\t                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', false);\n\t            });\n\t\n\t            //Special offset functions\n\t            chart.d3_stackedOffset_stackPercent = function(stackData) {\n\t                var n = stackData.length,    //How many series\n\t                    m = stackData[0].length,     //how many points per series\n\t                    i,\n\t                    j,\n\t                    o,\n\t                    y0 = [];\n\t\n\t                for (j = 0; j < m; ++j) { //Looping through all points\n\t                    for (i = 0, o = 0; i < dataRaw.length; i++) { //looping through all series\n\t                        o += getY(dataRaw[i].values[j]); //total y value of all series at a certian point in time.\n\t                    }\n\t\n\t                    if (o) for (i = 0; i < n; i++) { //(total y value of all series at point in time i) != 0\n\t                        stackData[i][j][1] /= o;\n\t                    } else { //(total y value of all series at point in time i) == 0\n\t                        for (i = 0; i < n; i++) {\n\t                            stackData[i][j][1] = 0;\n\t                        }\n\t                    }\n\t                }\n\t                for (j = 0; j < m; ++j) y0[j] = 0;\n\t                return y0;\n\t            };\n\t\n\t        });\n\t\n\t        renderWatch.renderEnd('stackedArea immediate');\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Global getters and setters\n\t    //------------------------------------------------------------\n\t\n\t    chart.dispatch = dispatch;\n\t    chart.scatter = scatter;\n\t\n\t    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });\n\t    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });\n\t    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });\n\t\n\t    chart.interpolate = function(_) {\n\t        if (!arguments.length) return interpolate;\n\t        interpolate = _;\n\t        return chart;\n\t    };\n\t\n\t    chart.duration = function(_) {\n\t        if (!arguments.length) return duration;\n\t        duration = _;\n\t        renderWatch.reset(duration);\n\t        scatter.duration(duration);\n\t        return chart;\n\t    };\n\t\n\t    chart.dispatch = dispatch;\n\t    chart.scatter = scatter;\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:      {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\t        defined: {get: function(){return defined;}, set: function(_){defined=_;}},\n\t        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n\t        offset:      {get: function(){return offset;}, set: function(_){offset=_;}},\n\t        order:    {get: function(){return order;}, set: function(_){order=_;}},\n\t        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n\t\n\t        // simple functor options\n\t        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},\n\t        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t        }},\n\t        style: {get: function(){return style;}, set: function(_){\n\t            style = _;\n\t            switch (style) {\n\t                case 'stack':\n\t                    chart.offset('zero');\n\t                    chart.order('default');\n\t                    break;\n\t                case 'stream':\n\t                    chart.offset('wiggle');\n\t                    chart.order('inside-out');\n\t                    break;\n\t                case 'stream-center':\n\t                    chart.offset('silhouette');\n\t                    chart.order('inside-out');\n\t                    break;\n\t                case 'expand':\n\t                    chart.offset('expand');\n\t                    chart.order('default');\n\t                    break;\n\t                case 'stack_percent':\n\t                    chart.offset(chart.d3_stackedOffset_stackPercent);\n\t                    chart.order('default');\n\t                    break;\n\t            }\n\t        }},\n\t        duration: {get: function(){return duration;}, set: function(_){\n\t            duration = _;\n\t            renderWatch.reset(duration);\n\t            scatter.duration(duration);\n\t        }}\n\t    });\n\t\n\t    nv.utils.inheritOptions(chart, scatter);\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t};\n\t\n\tnv.models.stackedAreaChart = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var stacked = nv.models.stackedArea()\n\t        , xAxis = nv.models.axis()\n\t        , yAxis = nv.models.axis()\n\t        , legend = nv.models.legend()\n\t        , controls = nv.models.legend()\n\t        , interactiveLayer = nv.interactiveGuideline()\n\t        , tooltip = nv.models.tooltip()\n\t        , focus = nv.models.focus(nv.models.stackedArea())\n\t        ;\n\t\n\t    var margin = {top: 10, right: 25, bottom: 50, left: 60}\n\t        , marginTop = null\n\t        , width = null\n\t        , height = null\n\t        , color = nv.utils.defaultColor()\n\t        , showControls = true\n\t        , showLegend = true\n\t        , legendPosition = 'top'\n\t        , showXAxis = true\n\t        , showYAxis = true\n\t        , rightAlignYAxis = false\n\t        , focusEnable = false\n\t        , useInteractiveGuideline = false\n\t        , showTotalInTooltip = true\n\t        , totalLabel = 'TOTAL'\n\t        , x //can be accessed via chart.xScale()\n\t        , y //can be accessed via chart.yScale()\n\t        , state = nv.utils.state()\n\t        , defaultState = null\n\t        , noData = null\n\t        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n\t        , controlWidth = 250\n\t        , controlOptions = ['Stacked','Stream','Expanded']\n\t        , controlLabels = {}\n\t        , duration = 250\n\t        ;\n\t\n\t    state.style = stacked.style();\n\t    xAxis.orient('bottom').tickPadding(7);\n\t    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');\n\t\n\t    tooltip\n\t        .headerFormatter(function(d, i) {\n\t            return xAxis.tickFormat()(d, i);\n\t        })\n\t        .valueFormatter(function(d, i) {\n\t            return yAxis.tickFormat()(d, i);\n\t        });\n\t\n\t    interactiveLayer.tooltip\n\t        .headerFormatter(function(d, i) {\n\t            return xAxis.tickFormat()(d, i);\n\t        })\n\t        .valueFormatter(function(d, i) {\n\t            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n\t        });\n\t\n\t    var oldYTickFormat = null,\n\t        oldValueFormatter = null;\n\t\n\t    controls.updateState(false);\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var renderWatch = nv.utils.renderWatch(dispatch);\n\t    var style = stacked.style();\n\t\n\t    var stateGetter = function(data) {\n\t        return function(){\n\t            return {\n\t                active: data.map(function(d) { return !d.disabled }),\n\t                style: stacked.style()\n\t            };\n\t        }\n\t    };\n\t\n\t    var stateSetter = function(data) {\n\t        return function(state) {\n\t            if (state.style !== undefined)\n\t                style = state.style;\n\t            if (state.active !== undefined)\n\t                data.forEach(function(series,i) {\n\t                    series.disabled = !state.active[i];\n\t                });\n\t        }\n\t    };\n\t\n\t    var percentFormatter = d3.format('%');\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        renderWatch.models(stacked);\n\t        if (showXAxis) renderWatch.models(xAxis);\n\t        if (showYAxis) renderWatch.models(yAxis);\n\t\n\t        selection.each(function(data) {\n\t            var container = d3.select(this),\n\t                that = this;\n\t            nv.utils.initSVG(container);\n\t\n\t            var availableWidth = nv.utils.availableWidth(width, container, margin),\n\t                availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n\t\n\t            chart.update = function() { container.transition().duration(duration).call(chart); };\n\t            chart.container = this;\n\t\n\t            state\n\t                .setter(stateSetter(data), chart.update)\n\t                .getter(stateGetter(data))\n\t                .update();\n\t\n\t            // DEPRECATED set state.disabled\n\t            state.disabled = data.map(function(d) { return !!d.disabled });\n\t\n\t            if (!defaultState) {\n\t                var key;\n\t                defaultState = {};\n\t                for (key in state) {\n\t                    if (state[key] instanceof Array)\n\t                        defaultState[key] = state[key].slice(0);\n\t                    else\n\t                        defaultState[key] = state[key];\n\t                }\n\t            }\n\t\n\t            // Display No Data message if there's nothing to show.\n\t            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n\t                nv.utils.noData(chart, container)\n\t                return chart;\n\t            } else {\n\t                container.selectAll('.nv-noData').remove();\n\t            }\n\t            // Setup Scales\n\t            x = stacked.xScale();\n\t            y = stacked.yScale();\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.selectAll('g.nv-wrap.nv-stackedAreaChart').data([data]);\n\t            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedAreaChart').append('g');\n\t            var g = wrap.select('g');\n\t\n\t            gEnter.append('g').attr('class', 'nv-legendWrap');\n\t            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\t\n\t            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n\t            focusEnter.append('g').attr('class', 'nv-background').append('rect');\n\t            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n\t            focusEnter.append('g').attr('class', 'nv-y nv-axis');\n\t            focusEnter.append('g').attr('class', 'nv-stackedWrap');\n\t            focusEnter.append('g').attr('class', 'nv-interactive');\n\t\n\t            // g.select(\"rect\").attr(\"width\",availableWidth).attr(\"height\",availableHeight);\n\t\n\t            var contextEnter = gEnter.append('g').attr('class', 'nv-focusWrap');\n\t\n\t            // Legend\n\t            if (!showLegend) {\n\t                g.select('.nv-legendWrap').selectAll('*').remove();\n\t            } else {\n\t                var legendWidth = (showControls && legendPosition === 'top') ? availableWidth - controlWidth : availableWidth;\n\t\n\t                legend.width(legendWidth);\n\t                g.select('.nv-legendWrap').datum(data).call(legend);\n\t\n\t                if (legendPosition === 'bottom') {\n\t                \t// constant from axis.js, plus some margin for better layout\n\t                \tvar xAxisHeight = (showXAxis ? 12 : 0) + 10;\n\t                   \tmargin.bottom = Math.max(legend.height() + xAxisHeight, margin.bottom);\n\t                   \tavailableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n\t                \tvar legendTop = availableHeight + xAxisHeight;\n\t                    g.select('.nv-legendWrap')\n\t                        .attr('transform', 'translate(0,' + legendTop +')');\n\t                } else if (legendPosition === 'top') {\n\t                    if (!marginTop && margin.top != legend.height()) {\n\t                        margin.top = legend.height();\n\t                        availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n\t                    }\n\t\n\t                    g.select('.nv-legendWrap')\n\t                    \t.attr('transform', 'translate(' + (availableWidth-legendWidth) + ',' + (-margin.top) +')');\n\t                }\n\t            }\n\t\n\t            // Controls\n\t            if (!showControls) {\n\t                 g.select('.nv-controlsWrap').selectAll('*').remove();\n\t            } else {\n\t                var controlsData = [\n\t                    {\n\t                        key: controlLabels.stacked || 'Stacked',\n\t                        metaKey: 'Stacked',\n\t                        disabled: stacked.style() != 'stack',\n\t                        style: 'stack'\n\t                    },\n\t                    {\n\t                        key: controlLabels.stream || 'Stream',\n\t                        metaKey: 'Stream',\n\t                        disabled: stacked.style() != 'stream',\n\t                        style: 'stream'\n\t                    },\n\t                    {\n\t                        key: controlLabels.expanded || 'Expanded',\n\t                        metaKey: 'Expanded',\n\t                        disabled: stacked.style() != 'expand',\n\t                        style: 'expand'\n\t                    },\n\t                    {\n\t                        key: controlLabels.stack_percent || 'Stack %',\n\t                        metaKey: 'Stack_Percent',\n\t                        disabled: stacked.style() != 'stack_percent',\n\t                        style: 'stack_percent'\n\t                    }\n\t                ];\n\t\n\t                controlWidth = (controlOptions.length/3) * 260;\n\t                controlsData = controlsData.filter(function(d) {\n\t                    return controlOptions.indexOf(d.metaKey) !== -1;\n\t                });\n\t\n\t                controls\n\t                    .width( controlWidth )\n\t                    .color(['#444', '#444', '#444']);\n\t\n\t                g.select('.nv-controlsWrap')\n\t                    .datum(controlsData)\n\t                    .call(controls);\n\t\n\t                var requiredTop = Math.max(controls.height(), showLegend && (legendPosition === 'top') ? legend.height() : 0);\n\t\n\t                if ( margin.top != requiredTop ) {\n\t                    margin.top = requiredTop;\n\t                    availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n\t                }\n\t\n\t                g.select('.nv-controlsWrap')\n\t                    .attr('transform', 'translate(0,' + (-margin.top) +')');\n\t            }\n\t\n\t            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\t\n\t            if (rightAlignYAxis) {\n\t                g.select(\".nv-y.nv-axis\")\n\t                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n\t            }\n\t\n\t            //Set up interactive layer\n\t            if (useInteractiveGuideline) {\n\t                interactiveLayer\n\t                    .width(availableWidth)\n\t                    .height(availableHeight)\n\t                    .margin({left: margin.left, top: margin.top})\n\t                    .svgContainer(container)\n\t                    .xScale(x);\n\t                wrap.select(\".nv-interactive\").call(interactiveLayer);\n\t            }\n\t\n\t            g.select('.nv-focus .nv-background rect')\n\t                .attr('width', availableWidth)\n\t                .attr('height', availableHeight);\n\t\n\t            stacked\n\t                .width(availableWidth)\n\t                .height(availableHeight)\n\t                .color(data.map(function(d,i) {\n\t                    return d.color || color(d, i);\n\t                }).filter(function(d,i) { return !data[i].disabled; }));\n\t\n\t            var stackedWrap = g.select('.nv-focus .nv-stackedWrap')\n\t                .datum(data.filter(function(d) { return !d.disabled; }));\n\t\n\t            // Setup Axes\n\t            if (showXAxis) {\n\t                xAxis.scale(x)\n\t                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n\t                    .tickSize( -availableHeight, 0);\n\t            }\n\t\n\t            if (showYAxis) {\n\t                var ticks;\n\t                if (stacked.offset() === 'wiggle') {\n\t                    ticks = 0;\n\t                }\n\t                else {\n\t                    ticks = nv.utils.calcTicksY(availableHeight/36, data);\n\t                }\n\t                yAxis.scale(y)\n\t                    ._ticks(ticks)\n\t                    .tickSize(-availableWidth, 0);\n\t            }\n\t\n\t            //============================================================\n\t            // Update Axes\n\t            //============================================================\n\t            function updateXAxis() {\n\t                if(showXAxis) {\n\t                    g.select('.nv-focus .nv-x.nv-axis')\n\t                        .attr('transform', 'translate(0,' + availableHeight + ')')\n\t                        .transition()\n\t                        .duration(duration)\n\t                        .call(xAxis)\n\t                        ;\n\t                }\n\t            }\n\t\n\t            function updateYAxis() {\n\t                if(showYAxis) {\n\t                    if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {\n\t                        var currentFormat = yAxis.tickFormat();\n\t\n\t                        if ( !oldYTickFormat || currentFormat !== percentFormatter )\n\t                            oldYTickFormat = currentFormat;\n\t\n\t                        //Forces the yAxis to use percentage in 'expand' mode.\n\t                        yAxis.tickFormat(percentFormatter);\n\t                    }\n\t                    else {\n\t                        if (oldYTickFormat) {\n\t                            yAxis.tickFormat(oldYTickFormat);\n\t                            oldYTickFormat = null;\n\t                        }\n\t                    }\n\t\n\t                    g.select('.nv-focus .nv-y.nv-axis')\n\t                    .transition().duration(0)\n\t                    .call(yAxis);\n\t                }\n\t            }\n\t\n\t            //============================================================\n\t            // Update Focus\n\t            //============================================================\n\t            if(!focusEnable) {\n\t                stackedWrap.transition().call(stacked);\n\t                updateXAxis();\n\t                updateYAxis();\n\t            } else {\n\t                focus.width(availableWidth);\n\t                g.select('.nv-focusWrap')\n\t                    .attr('transform', 'translate(0,' + ( availableHeight + margin.bottom + focus.margin().top) + ')')\n\t                    .datum(data.filter(function(d) { return !d.disabled; }))\n\t                    .call(focus);\n\t                var extent = focus.brush.empty() ? focus.xDomain() : focus.brush.extent();\n\t                if(extent !== null){\n\t                    onBrush(extent);\n\t                }\n\t            }\n\t\n\t            //============================================================\n\t            // Event Handling/Dispatching (in chart's scope)\n\t            //------------------------------------------------------------\n\t\n\t            stacked.dispatch.on('areaClick.toggle', function(e) {\n\t                if (data.filter(function(d) { return !d.disabled }).length === 1)\n\t                    data.forEach(function(d) {\n\t                        d.disabled = false;\n\t                    });\n\t                else\n\t                    data.forEach(function(d,i) {\n\t                        d.disabled = (i != e.seriesIndex);\n\t                    });\n\t\n\t                state.disabled = data.map(function(d) { return !!d.disabled });\n\t                dispatch.stateChange(state);\n\t\n\t                chart.update();\n\t            });\n\t\n\t            legend.dispatch.on('stateChange', function(newState) {\n\t                for (var key in newState)\n\t                    state[key] = newState[key];\n\t                dispatch.stateChange(state);\n\t                chart.update();\n\t            });\n\t\n\t            controls.dispatch.on('legendClick', function(d,i) {\n\t                if (!d.disabled) return;\n\t\n\t                controlsData = controlsData.map(function(s) {\n\t                    s.disabled = true;\n\t                    return s;\n\t                });\n\t                d.disabled = false;\n\t\n\t                stacked.style(d.style);\n\t\n\t\n\t                state.style = stacked.style();\n\t                dispatch.stateChange(state);\n\t\n\t                chart.update();\n\t            });\n\t\n\t            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n\t                stacked.clearHighlights();\n\t                var singlePoint, pointIndex, pointXLocation, allData = [], valueSum = 0, allNullValues = true;\n\t                data\n\t                    .filter(function(series, i) {\n\t                        series.seriesIndex = i;\n\t                        return !series.disabled;\n\t                    })\n\t                    .forEach(function(series,i) {\n\t                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n\t                        var point = series.values[pointIndex];\n\t                        var pointYValue = chart.y()(point, pointIndex);\n\t                        if (pointYValue != null) {\n\t                            stacked.highlightPoint(i, pointIndex, true);\n\t                        }\n\t                        if (typeof point === 'undefined') return;\n\t                        if (typeof singlePoint === 'undefined') singlePoint = point;\n\t                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n\t\n\t                        //If we are in 'expand' mode, use the stacked percent value instead of raw value.\n\t                        var tooltipValue = (stacked.style() == 'expand') ? point.display.y : chart.y()(point,pointIndex);\n\t                        allData.push({\n\t                            key: series.key,\n\t                            value: tooltipValue,\n\t                            color: color(series,series.seriesIndex),\n\t                            point: point\n\t                        });\n\t\n\t                        if (showTotalInTooltip && stacked.style() != 'expand' && tooltipValue != null) {\n\t                          valueSum += tooltipValue;\n\t                          allNullValues = false;\n\t                        };\n\t                    });\n\t\n\t                allData.reverse();\n\t\n\t                //Highlight the tooltip entry based on which stack the mouse is closest to.\n\t                if (allData.length > 2) {\n\t                    var yValue = chart.yScale().invert(e.mouseY);\n\t                    var yDistMax = Infinity, indexToHighlight = null;\n\t                    allData.forEach(function(series,i) {\n\t\n\t                        //To handle situation where the stacked area chart is negative, we need to use absolute values\n\t                        //when checking if the mouse Y value is within the stack area.\n\t                        yValue = Math.abs(yValue);\n\t                        var stackedY0 = Math.abs(series.point.display.y0);\n\t                        var stackedY = Math.abs(series.point.display.y);\n\t                        if ( yValue >= stackedY0 && yValue <= (stackedY + stackedY0))\n\t                        {\n\t                            indexToHighlight = i;\n\t                            return;\n\t                        }\n\t                    });\n\t                    if (indexToHighlight != null)\n\t                        allData[indexToHighlight].highlight = true;\n\t                }\n\t\n\t                //If we are not in 'expand' mode, add a 'Total' row to the tooltip.\n\t                if (showTotalInTooltip && stacked.style() != 'expand' && allData.length >= 2 && !allNullValues) {\n\t                    allData.push({\n\t                        key: totalLabel,\n\t                        value: valueSum,\n\t                        total: true\n\t                    });\n\t                }\n\t\n\t                var xValue = chart.x()(singlePoint,pointIndex);\n\t\n\t                var valueFormatter = interactiveLayer.tooltip.valueFormatter();\n\t                // Keeps track of the tooltip valueFormatter if the chart changes to expanded view\n\t                if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {\n\t                    if ( !oldValueFormatter ) {\n\t                        oldValueFormatter = valueFormatter;\n\t                    }\n\t                    //Forces the tooltip to use percentage in 'expand' mode.\n\t                    valueFormatter = d3.format(\".1%\");\n\t                }\n\t                else {\n\t                    if (oldValueFormatter) {\n\t                        valueFormatter = oldValueFormatter;\n\t                        oldValueFormatter = null;\n\t                    }\n\t                }\n\t\n\t                interactiveLayer.tooltip\n\t                    .valueFormatter(valueFormatter)\n\t                    .data(\n\t                    {\n\t                        value: xValue,\n\t                        series: allData\n\t                    }\n\t                )();\n\t\n\t                interactiveLayer.renderGuideLine(pointXLocation);\n\t\n\t            });\n\t\n\t            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n\t                stacked.clearHighlights();\n\t            });\n\t\n\t            /* Update `main' graph on brush update. */\n\t            focus.dispatch.on(\"onBrush\", function(extent) {\n\t                onBrush(extent);\n\t            });\n\t\n\t            // Update chart from a state object passed to event handler\n\t            dispatch.on('changeState', function(e) {\n\t\n\t                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n\t                    data.forEach(function(series,i) {\n\t                        series.disabled = e.disabled[i];\n\t                    });\n\t\n\t                    state.disabled = e.disabled;\n\t                }\n\t\n\t                if (typeof e.style !== 'undefined') {\n\t                    stacked.style(e.style);\n\t                    style = e.style;\n\t                }\n\t\n\t                chart.update();\n\t            });\n\t\n\t            //============================================================\n\t            // Functions\n\t            //------------------------------------------------------------\n\t\n\t            function onBrush(extent) {\n\t                // Update Main (Focus)\n\t                var stackedWrap = g.select('.nv-focus .nv-stackedWrap')\n\t                    .datum(\n\t                    data.filter(function(d) { return !d.disabled; })\n\t                        .map(function(d,i) {\n\t                            return {\n\t                                key: d.key,\n\t                                area: d.area,\n\t                                classed: d.classed,\n\t                                values: d.values.filter(function(d,i) {\n\t                                    return stacked.x()(d,i) >= extent[0] && stacked.x()(d,i) <= extent[1];\n\t                                }),\n\t                                disableTooltip: d.disableTooltip\n\t                            };\n\t                        })\n\t                );\n\t                stackedWrap.transition().duration(duration).call(stacked);\n\t\n\t                // Update Main (Focus) Axes\n\t                updateXAxis();\n\t                updateYAxis();\n\t            }\n\t\n\t        });\n\t\n\t        renderWatch.renderEnd('stacked Area chart immediate');\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Event Handling/Dispatching (out of chart's scope)\n\t    //------------------------------------------------------------\n\t\n\t    stacked.dispatch.on('elementMouseover.tooltip', function(evt) {\n\t        evt.point['x'] = stacked.x()(evt.point);\n\t        evt.point['y'] = stacked.y()(evt.point);\n\t        tooltip.data(evt).hidden(false);\n\t    });\n\t\n\t    stacked.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t        tooltip.hidden(true)\n\t    });\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    // expose chart's sub-components\n\t    chart.dispatch = dispatch;\n\t    chart.stacked = stacked;\n\t    chart.legend = legend;\n\t    chart.controls = controls;\n\t    chart.xAxis = xAxis;\n\t    chart.x2Axis = focus.xAxis;\n\t    chart.yAxis = yAxis;\n\t    chart.y2Axis = focus.yAxis;\n\t    chart.interactiveLayer = interactiveLayer;\n\t    chart.tooltip = tooltip;\n\t    chart.focus = focus;\n\t\n\t    chart.dispatch = dispatch;\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:      {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\t        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n\t        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n\t        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n\t        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n\t        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n\t        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\t        showControls:    {get: function(){return showControls;}, set: function(_){showControls=_;}},\n\t        controlLabels:    {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n\t        controlOptions:    {get: function(){return controlOptions;}, set: function(_){controlOptions=_;}},\n\t        showTotalInTooltip:      {get: function(){return showTotalInTooltip;}, set: function(_){showTotalInTooltip=_;}},\n\t        totalLabel:      {get: function(){return totalLabel;}, set: function(_){totalLabel=_;}},\n\t        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n\t        focusHeight:     {get: function(){return focus.height();}, set: function(_){focus.height(_);}},\n\t        brushExtent: {get: function(){return focus.brushExtent();}, set: function(_){focus.brushExtent(_);}},\n\t\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            if (_.top !== undefined) {\n\t                margin.top = _.top;\n\t                marginTop = _.top;\n\t            }\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t        }},\n\t        focusMargin: {get: function(){return focus.margin}, set: function(_){\n\t            focus.margin.top    = _.top    !== undefined ? _.top    : focus.margin.top;\n\t            focus.margin.right  = _.right  !== undefined ? _.right  : focus.margin.right;\n\t            focus.margin.bottom = _.bottom !== undefined ? _.bottom : focus.margin.bottom;\n\t            focus.margin.left   = _.left   !== undefined ? _.left   : focus.margin.left;\n\t        }},\n\t        duration: {get: function(){return duration;}, set: function(_){\n\t            duration = _;\n\t            renderWatch.reset(duration);\n\t            stacked.duration(duration);\n\t            xAxis.duration(duration);\n\t            yAxis.duration(duration);\n\t        }},\n\t        color:  {get: function(){return color;}, set: function(_){\n\t            color = nv.utils.getColor(_);\n\t            legend.color(color);\n\t            stacked.color(color);\n\t            focus.color(color);\n\t        }},\n\t        x: {get: function(){return stacked.x();}, set: function(_){\n\t            stacked.x(_);\n\t            focus.x(_);\n\t        }},\n\t        y: {get: function(){return stacked.y();}, set: function(_){\n\t            stacked.y(_);\n\t            focus.y(_);\n\t        }},\n\t        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n\t            rightAlignYAxis = _;\n\t            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n\t        }},\n\t        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n\t            useInteractiveGuideline = !!_;\n\t            chart.interactive(!_);\n\t            chart.useVoronoi(!_);\n\t            stacked.scatter.interactive(!_);\n\t        }}\n\t    });\n\t\n\t    nv.utils.inheritOptions(chart, stacked);\n\t    nv.utils.initOptions(chart);\n\t\n\t    return chart;\n\t};\n\t\n\tnv.models.stackedAreaWithFocusChart = function() {\n\t  return nv.models.stackedAreaChart()\n\t    .margin({ bottom: 30 })\n\t    .focusEnable( true );\n\t};\n\t// based on http://bl.ocks.org/kerryrodden/477c1bfb081b783f80ad\n\tnv.models.sunburst = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n\t        , width = 600\n\t        , height = 600\n\t        , mode = \"count\"\n\t        , modes = {count: function(d) { return 1; }, value: function(d) { return d.value || d.size }, size: function(d) { return d.value || d.size }}\n\t        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n\t        , container = null\n\t        , color = nv.utils.defaultColor()\n\t        , showLabels = false\n\t        , labelFormat = function(d){if(mode === 'count'){return d.name + ' #' + d.value}else{return d.name + ' ' + (d.value || d.size)}}\n\t        , labelThreshold = 0.02\n\t        , sort = function(d1, d2){return d1.name > d2.name;}\n\t        , key = function(d,i){return d.name;}\n\t        , groupColorByParent = true\n\t        , duration = 500\n\t        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMousemove', 'elementMouseover', 'elementMouseout', 'renderEnd');\n\t\n\t    //============================================================\n\t    // aux functions and setup\n\t    //------------------------------------------------------------\n\t\n\t    var x = d3.scale.linear().range([0, 2 * Math.PI]);\n\t    var y = d3.scale.sqrt();\n\t\n\t    var partition = d3.layout.partition().sort(sort);\n\t\n\t    var node, availableWidth, availableHeight, radius;\n\t    var prevPositions = {};\n\t\n\t    var arc = d3.svg.arc()\n\t        .startAngle(function(d) {return Math.max(0, Math.min(2 * Math.PI, x(d.x))) })\n\t        .endAngle(function(d) {return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))) })\n\t        .innerRadius(function(d) {return Math.max(0, y(d.y)) })\n\t        .outerRadius(function(d) {return Math.max(0, y(d.y + d.dy)) });\n\t\n\t    function rotationToAvoidUpsideDown(d) {\n\t        var centerAngle = computeCenterAngle(d);\n\t        if(centerAngle > 90){\n\t            return 180;\n\t        }\n\t        else {\n\t            return 0;\n\t        }\n\t    }\n\t\n\t    function computeCenterAngle(d) {\n\t        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n\t        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n\t        var centerAngle = (((startAngle + endAngle) / 2) * (180 / Math.PI)) - 90;\n\t        return centerAngle;\n\t    }\n\t\n\t    function computeNodePercentage(d) {\n\t        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n\t        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n\t        return (endAngle - startAngle) / (2 * Math.PI);\n\t    }\n\t\n\t    function labelThresholdMatched(d) {\n\t        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n\t        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n\t\n\t        var size = endAngle - startAngle;\n\t        return size > labelThreshold;\n\t    }\n\t\n\t    // When zooming: interpolate the scales.\n\t    function arcTweenZoom(e,i) {\n\t        var xd = d3.interpolate(x.domain(), [node.x, node.x + node.dx]),\n\t        yd = d3.interpolate(y.domain(), [node.y, 1]),\n\t        yr = d3.interpolate(y.range(), [node.y ? 20 : 0, radius]);\n\t\n\t        if (i === 0) {\n\t            return function() {return arc(e);}\n\t        }\n\t        else {\n\t            return function (t) {\n\t                x.domain(xd(t));\n\t                y.domain(yd(t)).range(yr(t));\n\t                return arc(e);\n\t            }\n\t        };\n\t    }\n\t\n\t    function arcTweenUpdate(d) {\n\t        var ipo = d3.interpolate({x: d.x0, dx: d.dx0, y: d.y0, dy: d.dy0}, d);\n\t\n\t        return function (t) {\n\t            var b = ipo(t);\n\t\n\t            d.x0 = b.x;\n\t            d.dx0 = b.dx;\n\t            d.y0 = b.y;\n\t            d.dy0 = b.dy;\n\t\n\t            return arc(b);\n\t        };\n\t    }\n\t\n\t    function updatePrevPosition(node) {\n\t        var k = key(node);\n\t        if(! prevPositions[k]) prevPositions[k] = {};\n\t        var pP = prevPositions[k];\n\t        pP.dx = node.dx;\n\t        pP.x = node.x;\n\t        pP.dy = node.dy;\n\t        pP.y = node.y;\n\t    }\n\t\n\t    function storeRetrievePrevPositions(nodes) {\n\t        nodes.forEach(function(n){\n\t            var k = key(n);\n\t            var pP = prevPositions[k];\n\t            //console.log(k,n,pP);\n\t            if( pP ){\n\t                n.dx0 = pP.dx;\n\t                n.x0 = pP.x;\n\t                n.dy0 = pP.dy;\n\t                n.y0 = pP.y;\n\t            }\n\t            else {\n\t                n.dx0 = n.dx;\n\t                n.x0 = n.x;\n\t                n.dy0 = n.dy;\n\t                n.y0 = n.y;\n\t            }\n\t            updatePrevPosition(n);\n\t        });\n\t    }\n\t\n\t    function zoomClick(d) {\n\t        var labels = container.selectAll('text')\n\t        var path = container.selectAll('path')\n\t\n\t        // fade out all text elements\n\t        labels.transition().attr(\"opacity\",0);\n\t\n\t        // to allow reference to the new center node\n\t        node = d;\n\t\n\t        path.transition()\n\t            .duration(duration)\n\t            .attrTween(\"d\", arcTweenZoom)\n\t            .each('end', function(e) {\n\t                // partially taken from here: http://bl.ocks.org/metmajer/5480307\n\t                // check if the animated element's data e lies within the visible angle span given in d\n\t                if(e.x >= d.x && e.x < (d.x + d.dx) ){\n\t                    if(e.depth >= d.depth){\n\t                        // get a selection of the associated text element\n\t                        var parentNode = d3.select(this.parentNode);\n\t                        var arcText = parentNode.select('text');\n\t\n\t                        // fade in the text element and recalculate positions\n\t                        arcText.transition().duration(duration)\n\t                        .text( function(e){return labelFormat(e) })\n\t                        .attr(\"opacity\", function(d){\n\t                            if(labelThresholdMatched(d)) {\n\t                                return 1;\n\t                            }\n\t                            else {\n\t                                return 0;\n\t                            }\n\t                        })\n\t                        .attr(\"transform\", function() {\n\t                            var width = this.getBBox().width;\n\t                            if(e.depth === 0)\n\t                            return \"translate(\" + (width / 2 * - 1) + \",0)\";\n\t                            else if(e.depth === d.depth){\n\t                                return \"translate(\" + (y(e.y) + 5) + \",0)\";\n\t                            }\n\t                            else {\n\t                                var centerAngle = computeCenterAngle(e);\n\t                                var rotation = rotationToAvoidUpsideDown(e);\n\t                                if (rotation === 0) {\n\t                                    return 'rotate('+ centerAngle +')translate(' + (y(e.y) + 5) + ',0)';\n\t                                }\n\t                                else {\n\t                                    return 'rotate('+ centerAngle +')translate(' + (y(e.y) + width + 5) + ',0)rotate(' + rotation + ')';\n\t                                }\n\t                            }\n\t                        });\n\t                    }\n\t                }\n\t            })\n\t    }\n\t\n\t    //============================================================\n\t    // chart function\n\t    //------------------------------------------------------------\n\t    var renderWatch = nv.utils.renderWatch(dispatch);\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t\n\t        selection.each(function(data) {\n\t            container = d3.select(this);\n\t            availableWidth = nv.utils.availableWidth(width, container, margin);\n\t            availableHeight = nv.utils.availableHeight(height, container, margin);\n\t            radius = Math.min(availableWidth, availableHeight) / 2;\n\t\n\t            y.range([0, radius]);\n\t\n\t            // Setup containers and skeleton of chart\n\t            var wrap = container.select('g.nvd3.nv-wrap.nv-sunburst');\n\t            if( !wrap[0][0] ) {\n\t                wrap = container.append('g')\n\t                    .attr('class', 'nvd3 nv-wrap nv-sunburst nv-chart-' + id)\n\t                    .attr('transform', 'translate(' + ((availableWidth / 2) + margin.left + margin.right) + ',' + ((availableHeight / 2) + margin.top + margin.bottom) + ')');\n\t            } else {\n\t                wrap.attr('transform', 'translate(' + ((availableWidth / 2) + margin.left + margin.right) + ',' + ((availableHeight / 2) + margin.top + margin.bottom) + ')');\n\t            }\n\t\n\t            container.on('click', function (d, i) {\n\t                dispatch.chartClick({\n\t                    data: d,\n\t                    index: i,\n\t                    pos: d3.event,\n\t                    id: id\n\t                });\n\t            });\n\t\n\t            partition.value(modes[mode] || modes[\"count\"]);\n\t\n\t            //reverse the drawing order so that the labels of inner\n\t            //arcs are drawn on top of the outer arcs.\n\t            var nodes = partition.nodes(data[0]).reverse()\n\t\n\t            storeRetrievePrevPositions(nodes);\n\t            var cG = wrap.selectAll('.arc-container').data(nodes, key)\n\t\n\t            //handle new datapoints\n\t            var cGE = cG.enter()\n\t                .append(\"g\")\n\t                .attr(\"class\",'arc-container')\n\t\n\t            cGE.append(\"path\")\n\t                .attr(\"d\", arc)\n\t                .style(\"fill\", function (d) {\n\t                    if (d.color) {\n\t                        return d.color;\n\t                    }\n\t                    else if (groupColorByParent) {\n\t                        return color((d.children ? d : d.parent).name);\n\t                    }\n\t                    else {\n\t                        return color(d.name);\n\t                    }\n\t                })\n\t                .style(\"stroke\", \"#FFF\")\n\t                .on(\"click\", function(d,i){\n\t                    zoomClick(d);\n\t                    dispatch.elementClick({\n\t                        data: d,\n\t                        index: i\n\t                    })\n\t                })\n\t                .on('mouseover', function(d,i){\n\t                    d3.select(this).classed('hover', true).style('opacity', 0.8);\n\t                    dispatch.elementMouseover({\n\t                        data: d,\n\t                        color: d3.select(this).style(\"fill\"),\n\t                        percent: computeNodePercentage(d)\n\t                    });\n\t                })\n\t                .on('mouseout', function(d,i){\n\t                    d3.select(this).classed('hover', false).style('opacity', 1);\n\t                    dispatch.elementMouseout({\n\t                        data: d\n\t                    });\n\t                })\n\t                .on('mousemove', function(d,i){\n\t                    dispatch.elementMousemove({\n\t                        data: d\n\t                    });\n\t                });\n\t\n\t            ///Iterating via each and selecting based on the this\n\t            ///makes it work ... a cG.selectAll('path') doesn't.\n\t            ///Without iteration the data (in the element) didn't update.\n\t            cG.each(function(d){\n\t                d3.select(this).select('path')\n\t                    .transition()\n\t                    .duration(duration)\n\t                    .attrTween('d', arcTweenUpdate);\n\t            });\n\t\n\t            if(showLabels){\n\t                //remove labels first and add them back\n\t                cG.selectAll('text').remove();\n\t\n\t                //this way labels are on top of newly added arcs\n\t                cG.append('text')\n\t                    .text( function(e){ return labelFormat(e)})\n\t                    .transition()\n\t                    .duration(duration)\n\t                    .attr(\"opacity\", function(d){\n\t                        if(labelThresholdMatched(d)) {\n\t                            return 1;\n\t                        }\n\t                        else {\n\t                            return 0;\n\t                        }\n\t                    })\n\t                    .attr(\"transform\", function(d) {\n\t                        var width = this.getBBox().width;\n\t                        if(d.depth === 0){\n\t                            return \"rotate(0)translate(\" + (width / 2 * -1) + \",0)\";\n\t                        }\n\t                        else {\n\t                            var centerAngle = computeCenterAngle(d);\n\t                            var rotation = rotationToAvoidUpsideDown(d);\n\t                            if (rotation === 0) {\n\t                                return 'rotate('+ centerAngle +')translate(' + (y(d.y) + 5) + ',0)';\n\t                            }\n\t                            else {\n\t                                return 'rotate('+ centerAngle +')translate(' + (y(d.y) + width + 5) + ',0)rotate(' + rotation + ')';\n\t                            }\n\t                        }\n\t                    });\n\t            }\n\t\n\t            //zoom out to the center when the data is updated.\n\t            zoomClick(nodes[nodes.length - 1])\n\t\n\t\n\t            //remove unmatched elements ...\n\t            cG.exit()\n\t                .transition()\n\t                .duration(duration)\n\t                .attr('opacity',0)\n\t                .each('end',function(d){\n\t                    var k = key(d);\n\t                    prevPositions[k] = undefined;\n\t                })\n\t                .remove();\n\t        });\n\t\n\t\n\t        renderWatch.renderEnd('sunburst immediate');\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    chart.dispatch = dispatch;\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        width:      {get: function(){return width;}, set: function(_){width=_;}},\n\t        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\t        mode:       {get: function(){return mode;}, set: function(_){mode=_;}},\n\t        id:         {get: function(){return id;}, set: function(_){id=_;}},\n\t        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},\n\t        groupColorByParent: {get: function(){return groupColorByParent;}, set: function(_){groupColorByParent=!!_;}},\n\t        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=!!_}},\n\t        labelFormat: {get: function(){return labelFormat;}, set: function(_){labelFormat=_}},\n\t        labelThreshold: {get: function(){return labelThreshold;}, set: function(_){labelThreshold=_}},\n\t        sort: {get: function(){return sort;}, set: function(_){sort=_}},\n\t        key: {get: function(){return key;}, set: function(_){key=_}},\n\t        // options that require extra logic in the setter\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    != undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  != undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   != undefined ? _.left   : margin.left;\n\t        }},\n\t        color: {get: function(){return color;}, set: function(_){\n\t            color=nv.utils.getColor(_);\n\t        }}\n\t    });\n\t\n\t    nv.utils.initOptions(chart);\n\t    return chart;\n\t};\n\tnv.models.sunburstChart = function() {\n\t    \"use strict\";\n\t\n\t    //============================================================\n\t    // Public Variables with Default Settings\n\t    //------------------------------------------------------------\n\t\n\t    var sunburst = nv.models.sunburst();\n\t    var tooltip = nv.models.tooltip();\n\t\n\t    var margin = {top: 30, right: 20, bottom: 20, left: 20}\n\t        , width = null\n\t        , height = null\n\t        , color = nv.utils.defaultColor()\n\t        , showTooltipPercent = false\n\t        , id = Math.round(Math.random() * 100000)\n\t        , defaultState = null\n\t        , noData = null\n\t        , duration = 250\n\t        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd');\n\t\n\t\n\t    //============================================================\n\t    // Private Variables\n\t    //------------------------------------------------------------\n\t\n\t    var renderWatch = nv.utils.renderWatch(dispatch);\n\t\n\t    tooltip\n\t        .duration(0)\n\t        .headerEnabled(false)\n\t        .valueFormatter(function(d){return d;});\n\t\n\t    //============================================================\n\t    // Chart function\n\t    //------------------------------------------------------------\n\t\n\t    function chart(selection) {\n\t        renderWatch.reset();\n\t        renderWatch.models(sunburst);\n\t\n\t        selection.each(function(data) {\n\t            var container = d3.select(this);\n\t\n\t            nv.utils.initSVG(container);\n\t\n\t            var availableWidth = nv.utils.availableWidth(width, container, margin);\n\t            var availableHeight = nv.utils.availableHeight(height, container, margin);\n\t\n\t            chart.update = function() {\n\t                if (duration === 0) {\n\t                    container.call(chart);\n\t                } else {\n\t                    container.transition().duration(duration).call(chart);\n\t                }\n\t            };\n\t            chart.container = container;\n\t\n\t            // Display No Data message if there's nothing to show.\n\t            if (!data || !data.length) {\n\t                nv.utils.noData(chart, container);\n\t                return chart;\n\t            } else {\n\t                container.selectAll('.nv-noData').remove();\n\t            }\n\t\n\t            sunburst.width(availableWidth).height(availableHeight).margin(margin);\n\t            container.call(sunburst);\n\t        });\n\t\n\t        renderWatch.renderEnd('sunburstChart immediate');\n\t        return chart;\n\t    }\n\t\n\t    //============================================================\n\t    // Event Handling/Dispatching (out of chart's scope)\n\t    //------------------------------------------------------------\n\t\n\t    sunburst.dispatch.on('elementMouseover.tooltip', function(evt) {\n\t        evt.series = {\n\t            key: evt.data.name,\n\t            value: (evt.data.value || evt.data.size),\n\t            color: evt.color,\n\t            percent: evt.percent\n\t        };\n\t        if (!showTooltipPercent) {\n\t            delete evt.percent;\n\t            delete evt.series.percent;\n\t        }\n\t        tooltip.data(evt).hidden(false);\n\t    });\n\t\n\t    sunburst.dispatch.on('elementMouseout.tooltip', function(evt) {\n\t        tooltip.hidden(true);\n\t    });\n\t\n\t    sunburst.dispatch.on('elementMousemove.tooltip', function(evt) {\n\t        tooltip();\n\t    });\n\t\n\t    //============================================================\n\t    // Expose Public Variables\n\t    //------------------------------------------------------------\n\t\n\t    // expose chart's sub-components\n\t    chart.dispatch = dispatch;\n\t    chart.sunburst = sunburst;\n\t    chart.tooltip = tooltip;\n\t    chart.options = nv.utils.optionsFunc.bind(chart);\n\t\n\t    // use Object get/set functionality to map between vars and chart functions\n\t    chart._options = Object.create({}, {\n\t        // simple options, just get/set the necessary values\n\t        noData:             {get: function(){return noData;},               set: function(_){noData=_;}},\n\t        defaultState:       {get: function(){return defaultState;},         set: function(_){defaultState=_;}},\n\t        showTooltipPercent: {get: function(){return showTooltipPercent;},   set: function(_){showTooltipPercent=_;}},\n\t\n\t        // options that require extra logic in the setter\n\t        color: {get: function(){return color;}, set: function(_){\n\t            color = _;\n\t            sunburst.color(color);\n\t        }},\n\t        duration: {get: function(){return duration;}, set: function(_){\n\t            duration = _;\n\t            renderWatch.reset(duration);\n\t            sunburst.duration(duration);\n\t        }},\n\t        margin: {get: function(){return margin;}, set: function(_){\n\t            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n\t            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n\t            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n\t            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n\t            sunburst.margin(margin);\n\t        }}\n\t    });\n\t    nv.utils.inheritOptions(chart, sunburst);\n\t    nv.utils.initOptions(chart);\n\t    return chart;\n\t\n\t};\n\t\n\tnv.version = \"1.8.5\";\n\t})();\n\t//# sourceMappingURL=nv.d3.js.map\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = d3;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _nvd = __webpack_require__(2);\n\t\n\tvar _nvd2 = _interopRequireDefault(_nvd);\n\t\n\tvar _BaseChartMixin = __webpack_require__(1);\n\t\n\tvar _BaseChartMixin2 = _interopRequireDefault(_BaseChartMixin);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  name: 'BarChart',\n\t  mixins: [_BaseChartMixin2.default],\n\t  props: {\n\t    textField: { type: String, default: 'label' },\n\t    valueField: { type: String, default: 'value' },\n\t    staggerLabels: { type: Boolean, default: true },\n\t    tooltips: { type: Boolean, default: false },\n\t    showValues: { type: Boolean, default: true },\n\t    colors: { type: Array, default: function _default() {\n\t        return ['#82DFD6', '#ddd'];\n\t      } }\n\t  },\n\t  mounted: function mounted() {\n\t    var _this = this;\n\t\n\t    var textField = this.textField;\n\t    var valField = this.valueField;\n\t\n\t    _nvd2.default.addGraph(function () {\n\t\n\t      var chart = _nvd2.default.models.discreteBarChart().x(function (d) {\n\t        return d[textField];\n\t      }).y(function (d) {\n\t        return d[valField];\n\t      }).staggerLabels(_this.staggerLabels).showValues(_this.showValues);\n\t\n\t      _this.redraw(chart);\n\t      _this.chartRef = chart;\n\t\n\t      _nvd2.default.utils.windowResize(chart.update);\n\t      return chart;\n\t    });\n\t  }\n\t};\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _d = __webpack_require__(3);\n\t\n\tvar _d2 = _interopRequireDefault(_d);\n\t\n\tvar _nvd = __webpack_require__(2);\n\t\n\tvar _nvd2 = _interopRequireDefault(_nvd);\n\t\n\tvar _BaseChartMixin = __webpack_require__(1);\n\t\n\tvar _BaseChartMixin2 = _interopRequireDefault(_BaseChartMixin);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  name: 'BubbleChart',\n\t  mixins: [_BaseChartMixin2.default],\n\t  props: {\n\t    xFormat: { type: [Function, String] },\n\t    yFormat: { type: [Function, String] },\n\t    showDistX: { type: Boolean, default: true },\n\t    showDistY: { type: Boolean, default: true },\n\t    colors: { type: Array, default: function _default() {\n\t        return ['#82DFD6', '#ddd'];\n\t      } }\n\t  },\n\t  mounted: function mounted() {\n\t    var _this = this;\n\t\n\t    _nvd2.default.addGraph(function () {\n\t      var chart = _nvd2.default.models.scatterChart().showDistX(true).showDistY(true).height(_this.height).color(_d2.default.scale.category10().range());\n\t\n\t      if (_this.xFormat) {\n\t        if (typeof _this.xFormat === 'string') {\n\t          chart.xAxis.tickFormat(_d2.default.format(_this.xFormat));\n\t        } else {\n\t          chart.xAxis.tickFormat(_this.xFormat);\n\t        }\n\t      }\n\t\n\t      if (_this.yFormat) {\n\t        if (typeof _this.yFormat === 'string') {\n\t          chart.yAxis.tickFormat(_d2.default.format(_this.yFormat));\n\t        } else {\n\t          chart.yAxis.tickFormat(_this.yFormat);\n\t        }\n\t      }\n\t\n\t      _this.redraw(chart);\n\t      _this.chartRef = chart;\n\t\n\t      _nvd2.default.utils.windowResize(chart.update);\n\t      return chart;\n\t    });\n\t  }\n\t};\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _d = __webpack_require__(3);\n\t\n\tvar _d2 = _interopRequireDefault(_d);\n\t\n\tvar _nvd = __webpack_require__(2);\n\t\n\tvar _nvd2 = _interopRequireDefault(_nvd);\n\t\n\tvar _BaseChartMixin = __webpack_require__(1);\n\t\n\tvar _BaseChartMixin2 = _interopRequireDefault(_BaseChartMixin);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  name: 'HBarChart',\n\t  mixins: [_BaseChartMixin2.default],\n\t  props: {\n\t    textField: { type: String, default: 'label' },\n\t    valueField: { type: String, default: 'value' },\n\t    yFormat: { type: [Function, String] },\n\t    height: { type: Number, default: 350 },\n\t    showControls: { type: Boolean, default: true },\n\t    colors: { type: Array, default: function _default() {\n\t        return ['#82DFD6', '#ddd'];\n\t      } }\n\t  },\n\t  mounted: function mounted() {\n\t    var _this = this;\n\t\n\t    _nvd2.default.addGraph(function () {\n\t      var textField = _this.textField;\n\t      var valField = _this.valueField;\n\t      var chart = _nvd2.default.models.multiBarHorizontalChart().x(function (d) {\n\t        return d[textField];\n\t      }).y(function (d) {\n\t        return d[valField];\n\t      }).controlLabels({\n\t        'grouped': '分组',\n\t        'stacked': '堆叠'\n\t      }).color(_this.colors).showValues(true);\n\t\n\t      if (_this.height) {\n\t        chart.height(_this.height);\n\t      }\n\t\n\t      if (_this.yFormat) {\n\t        if (typeof _this.yFormat === 'string') {\n\t          chart.yAxis.tickFormat(_d2.default.format(_this.yFormat));\n\t        } else {\n\t          chart.yAxis.tickFormat(_this.yFormat);\n\t        }\n\t      }\n\t\n\t      _this.redraw(chart);\n\t      _this.chartRef = chart;\n\t      _nvd2.default.utils.windowResize(chart.update);\n\t      return chart;\n\t    });\n\t  }\n\t};\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _d = __webpack_require__(3);\n\t\n\tvar _d2 = _interopRequireDefault(_d);\n\t\n\tvar _nvd = __webpack_require__(2);\n\t\n\tvar _nvd2 = _interopRequireDefault(_nvd);\n\t\n\tvar _BaseChartMixin = __webpack_require__(1);\n\t\n\tvar _BaseChartMixin2 = _interopRequireDefault(_BaseChartMixin);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  name: 'LineBarChart',\n\t  mixins: [_BaseChartMixin2.default],\n\t  props: {\n\t    xFormat: { type: [Function, String] },\n\t    x2Format: { type: [Function, String] },\n\t    y1Format: { type: [Function, String] },\n\t    y2Format: { type: [Function, String] },\n\t    colors: { type: Array, default: function _default() {\n\t        return ['#82DFD6', '#ddd'];\n\t      } }\n\t  },\n\t  mounted: function mounted() {\n\t    var _this = this;\n\t\n\t    _nvd2.default.addGraph(function () {\n\t      var chart = _nvd2.default.models.linePlusBarChart().margin({ left: 80, bottom: 50, right: 80, top: 30 }).color(_this.colors);\n\t\n\t      if (_this.xFormat) {\n\t        if (typeof _this.xFormat === 'string') {\n\t          chart.xAxis.tickFormat(_d2.default.format(_this.xFormat));\n\t        } else {\n\t          chart.xAxis.tickFormat(_this.xFormat);\n\t        }\n\t      }\n\t\n\t      if (_this.x2Format) {\n\t        if (typeof _this.x2Format === 'string') {\n\t          chart.x2Axis.tickFormat(_d2.default.format(_this.x2Format));\n\t        } else {\n\t          chart.x2Axis.tickFormat(_this.x2Format);\n\t        }\n\t      }\n\t\n\t      if (_this.y1Format) {\n\t        if (typeof _this.y1Format === 'string') {\n\t          chart.y1Axis.tickFormat(_d2.default.format(_this.y1Format));\n\t        } else {\n\t          chart.y1Axis.tickFormat(_this.y1Format);\n\t        }\n\t      }\n\t\n\t      if (_this.y2Format) {\n\t        if (typeof _this.y2Format === 'string') {\n\t          chart.y2Axis.tickFormat(_d2.default.format(_this.y2Format));\n\t        } else {\n\t          chart.y2Axis.tickFormat(_this.y2Format);\n\t        }\n\t      }\n\t\n\t      chart.bars.forceY([0]);\n\t\n\t      _d2.default.select(_this.$refs.chart).style('height', _this.height).datum(_this.model).transition().duration(500).call(chart);\n\t\n\t      _nvd2.default.utils.windowResize(chart.update);\n\t      return chart;\n\t    });\n\t  }\n\t};\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _d = __webpack_require__(3);\n\t\n\tvar _d2 = _interopRequireDefault(_d);\n\t\n\tvar _nvd = __webpack_require__(2);\n\t\n\tvar _nvd2 = _interopRequireDefault(_nvd);\n\t\n\tvar _BaseChartMixin = __webpack_require__(1);\n\t\n\tvar _BaseChartMixin2 = _interopRequireDefault(_BaseChartMixin);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  name: 'LineChart',\n\t  mixins: [_BaseChartMixin2.default],\n\t  props: {\n\t    xFormat: { type: [Function, String] },\n\t    yFormat: { type: [Function, String] },\n\t    colors: { type: Array, default: function _default() {\n\t        return ['#82DFD6', '#ddd'];\n\t      } }\n\t  },\n\t  mounted: function mounted() {\n\t    var _this = this;\n\t\n\t    _nvd2.default.addGraph(function () {\n\t      var chart = _nvd2.default.models.lineChart().useInteractiveGuideline(true).margin({ left: 50, bottom: 30, right: 0 }).color(_this.colors);\n\t\n\t      var xaxis = chart.xAxis.showMaxMin(false);\n\t\n\t      if (_this.xFormat) {\n\t        if (typeof _this.xFormat === 'string') {\n\t          xaxis.tickFormat(_d2.default.format(_this.xFormat));\n\t        } else {\n\t          xaxis.tickFormat(_this.xFormat);\n\t        }\n\t      }\n\t\n\t      var yaxis = chart.yAxis.showMaxMin(false);\n\t      if (_this.yFormat) {\n\t        if (typeof _this.yFormat === 'string') {\n\t          yaxis.tickFormat(_d2.default.format(_this.yFormat));\n\t        } else {\n\t          yaxis.tickFormat(_this.yFormat);\n\t        }\n\t      }\n\t\n\t      _this.redraw(chart);\n\t      _this.chartRef = chart;\n\t      _nvd2.default.utils.windowResize(chart.update);\n\t      return chart;\n\t    });\n\t  }\n\t};\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _d = __webpack_require__(3);\n\t\n\tvar _d2 = _interopRequireDefault(_d);\n\t\n\tvar _nvd = __webpack_require__(2);\n\t\n\tvar _nvd2 = _interopRequireDefault(_nvd);\n\t\n\tvar _BaseChartMixin = __webpack_require__(1);\n\t\n\tvar _BaseChartMixin2 = _interopRequireDefault(_BaseChartMixin);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  name: 'PieChart',\n\t  mixins: [_BaseChartMixin2.default],\n\t  props: {\n\t    showLabels: { type: Boolean, default: true },\n\t    margin: { top: 30, right: 20, bottom: 20, left: 20 },\n\t    width: { type: Number, default: null },\n\t    height: { type: Number, default: null },\n\t    showTooltipPercent: { type: Boolean, default: false },\n\t    showLegend: { type: Boolean, default: true },\n\t    legendPosition: { type: String, default: 'top' },\n\t    labelThreshold: { type: Number, default: 0.05 },\n\t    labelType: { type: String, default: 'percent' },\n\t    donut: { type: Boolean, default: false },\n\t    donutRatio: { type: Number, default: 0.35 },\n\t    textField: { type: String, default: 'label' },\n\t    valueField: { type: String, default: 'value' },\n\t    colors: { type: Array, default: function _default() {\n\t        return ['#82DFD6', '#ddd'];\n\t      } }\n\t  },\n\t  mounted: function mounted() {\n\t    var _this = this;\n\t\n\t    var textField = this.textField;\n\t    var valField = this.valueField;\n\t\n\t    _nvd2.default.addGraph(function () {\n\t      var chart = _nvd2.default.models.pieChart().x(function (d) {\n\t        return d[textField];\n\t      }).y(function (d) {\n\t        return d[valField];\n\t      }).showLabels(_this.showLabels).legendPosition(_this.legendPosition).labelThreshold(_this.labelThreshold).donut(_this.donut).donutRatio(_this.donutRatio).showTooltipPercent(_this.showTooltipPercent).showLegend(_this.showLegend);\n\t\n\t      if (_this.width) {\n\t        chart.width(_this.width);\n\t      }\n\t\n\t      if (_this.height) {\n\t        chart.height(_this.height);\n\t      }\n\t\n\t      _this.redraw(chart);\n\t      _this.chartRef = chart;\n\t\n\t      _nvd2.default.utils.windowResize(chart.update);\n\t      return chart;\n\t    });\n\t  }\n\t};\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _d = __webpack_require__(3);\n\t\n\tvar _d2 = _interopRequireDefault(_d);\n\t\n\tvar _nvd = __webpack_require__(2);\n\t\n\tvar _nvd2 = _interopRequireDefault(_nvd);\n\t\n\tvar _BaseChartMixin = __webpack_require__(1);\n\t\n\tvar _BaseChartMixin2 = _interopRequireDefault(_BaseChartMixin);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.default = {\n\t  name: 'StackedAreaChart',\n\t  mixins: [_BaseChartMixin2.default],\n\t  props: {\n\t    xFormat: { type: [Function, String] },\n\t    yFormat: { type: [Function, String] },\n\t    rightAlignYAxis: { type: Boolean, default: true },\n\t    showControls: { type: Boolean, default: true },\n\t    clipEdge: { type: Boolean, default: true },\n\t    colors: { type: Array, default: function _default() {\n\t        return ['#82DFD6', '#ddd'];\n\t      } }\n\t  },\n\t  mounted: function mounted() {\n\t    var _this = this;\n\t\n\t    _nvd2.default.addGraph(function () {\n\t      var chart = _nvd2.default.models.stackedAreaChart().margin({ right: 100 }).useInteractiveGuideline(true).rightAlignYAxis(_this.rightAlignYAxis).showControls(_this.showControls).clipEdge(_this.clipEdge).controlLabels({\n\t        'stacked': '堆叠',\n\t        'stream': '流',\n\t        'expanded': '扩展'\n\t      });\n\t\n\t      if (_this.xFormat) {\n\t        if (typeof _this.xFormat === 'string') {\n\t          chart.xAxis.tickFormat(_d2.default.format(_this.xFormat));\n\t        } else {\n\t          chart.xAxis.tickFormat(_this.xFormat);\n\t        }\n\t      }\n\t      if (_this.yFormat) {\n\t        if (typeof _this.yFormat === 'string') {\n\t          chart.yAxis.tickFormat(_d2.default.format(_this.yFormat));\n\t        } else {\n\t          chart.yAxis.tickFormat(_this.yFormat);\n\t        }\n\t      }\n\t\n\t      _this.redraw(chart);\n\t      _this.chartRef = chart;\n\t\n\t      _nvd2.default.utils.windowResize(chart.update);\n\t      return chart;\n\t    });\n\t  }\n\t};\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// vue-nvd3.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 443ef3a41518fe05bb03","import LineChart from './LineChart'\nimport LineBarChart from './LineBarChart'\nimport PieChart from './PieChart'\nimport HGBarChart from './HBarChart'\nimport BarChart from './BarChart'\nimport BubbleChart from './BubbleChart'\nimport StackedAreaChart from './StackedAreaChart'\nimport 'nvd3/build/nv.d3.css'\n\nexport default (Vue, options) => {\n  Vue.component('vn-line', LineChart)\n  Vue.component('vn-line-bar', LineBarChart)\n  Vue.component('vn-pie', PieChart)\n  Vue.component('vn-hbar', HGBarChart)\n  Vue.component('vn-bar', BarChart)\n  Vue.component('vn-bubble', BubbleChart)\n  Vue.component('vn-stacked-area',StackedAreaChart)\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/index.js","export default {\n  props: {\n    model: {type: Array},\n    height: {type: String, default: '300px'}\n  },\n  data () {\n    return {\n      chartRef: undefined\n    }\n  },\n  watch: {\n    model (value) {\n      if (this.chartRef) {\n        this.redraw(this.chartRef)\n      }\n    }\n  },\n  methods: {\n    redraw (chart) {\n      d3.select(this.$refs.chart)\n        .style('height', this.height)\n        .datum(this.model)\n        .transition()\n        .duration(500)\n        .call(chart)\n    }\n  },\n  render (h) {\n    return <svg ref=\"chart\">\n    </svg>\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/BaseChartMixin.js","/* nvd3 version 1.8.5 (https://github.com/novus/nvd3) 2016-12-01 */\n(function(){\n\n// set up main nv object\nvar nv = {};\n\n// the major global objects under the nv namespace\nnv.dev = false; //set false when in production\nnv.tooltip = nv.tooltip || {}; // For the tooltip system\nnv.utils = nv.utils || {}; // Utility subsystem\nnv.models = nv.models || {}; //stores all the possible models/components\nnv.charts = {}; //stores all the ready to use charts\nnv.logs = {}; //stores some statistics and potential error messages\nnv.dom = {}; //DOM manipulation functions\n\n// Node/CommonJS - require D3\nif (typeof(module) !== 'undefined' && typeof(exports) !== 'undefined' && typeof(d3) == 'undefined') {\n    d3 = require('d3');\n}\n\nnv.dispatch = d3.dispatch('render_start', 'render_end');\n\n// Function bind polyfill\n// Needed ONLY for phantomJS as it's missing until version 2.0 which is unreleased as of this comment\n// https://github.com/ariya/phantomjs/issues/10522\n// http://kangax.github.io/compat-table/es5/#Function.prototype.bind\n// phantomJS is used for running the test suite\nif (!Function.prototype.bind) {\n    Function.prototype.bind = function (oThis) {\n        if (typeof this !== \"function\") {\n            // closest thing possible to the ECMAScript 5 internal IsCallable function\n            throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n        }\n\n        var aArgs = Array.prototype.slice.call(arguments, 1),\n            fToBind = this,\n            fNOP = function () {},\n            fBound = function () {\n                return fToBind.apply(this instanceof fNOP && oThis\n                        ? this\n                        : oThis,\n                    aArgs.concat(Array.prototype.slice.call(arguments)));\n            };\n\n        fNOP.prototype = this.prototype;\n        fBound.prototype = new fNOP();\n        return fBound;\n    };\n}\n\n//  Development render timers - disabled if dev = false\nif (nv.dev) {\n    nv.dispatch.on('render_start', function(e) {\n        nv.logs.startTime = +new Date();\n    });\n\n    nv.dispatch.on('render_end', function(e) {\n        nv.logs.endTime = +new Date();\n        nv.logs.totalTime = nv.logs.endTime - nv.logs.startTime;\n        nv.log('total', nv.logs.totalTime); // used for development, to keep track of graph generation times\n    });\n}\n\n// Logs all arguments, and returns the last so you can test things in place\n// Note: in IE8 console.log is an object not a function, and if modernizr is used\n// then calling Function.prototype.bind with with anything other than a function\n// causes a TypeError to be thrown.\nnv.log = function() {\n    if (nv.dev && window.console && console.log && console.log.apply)\n        console.log.apply(console, arguments);\n    else if (nv.dev && window.console && typeof console.log == \"function\" && Function.prototype.bind) {\n        var log = Function.prototype.bind.call(console.log, console);\n        log.apply(console, arguments);\n    }\n    return arguments[arguments.length - 1];\n};\n\n// print console warning, should be used by deprecated functions\nnv.deprecated = function(name, info) {\n    if (console && console.warn) {\n        console.warn('nvd3 warning: `' + name + '` has been deprecated. ', info || '');\n    }\n};\n\n// The nv.render function is used to queue up chart rendering\n// in non-blocking async functions.\n// When all queued charts are done rendering, nv.dispatch.render_end is invoked.\nnv.render = function render(step) {\n    // number of graphs to generate in each timeout loop\n    step = step || 1;\n\n    nv.render.active = true;\n    nv.dispatch.render_start();\n\n    var renderLoop = function() {\n        var chart, graph;\n\n        for (var i = 0; i < step && (graph = nv.render.queue[i]); i++) {\n            chart = graph.generate();\n            if (typeof graph.callback == typeof(Function)) graph.callback(chart);\n        }\n\n        nv.render.queue.splice(0, i);\n\n        if (nv.render.queue.length) {\n            setTimeout(renderLoop);\n        }\n        else {\n            nv.dispatch.render_end();\n            nv.render.active = false;\n        }\n    };\n\n    setTimeout(renderLoop);\n};\n\nnv.render.active = false;\nnv.render.queue = [];\n\n/*\nAdds a chart to the async rendering queue. This method can take arguments in two forms:\nnv.addGraph({\n    generate: <Function>\n    callback: <Function>\n})\n\nor\n\nnv.addGraph(<generate Function>, <callback Function>)\n\nThe generate function should contain code that creates the NVD3 model, sets options\non it, adds data to an SVG element, and invokes the chart model. The generate function\nshould return the chart model.  See examples/lineChart.html for a usage example.\n\nThe callback function is optional, and it is called when the generate function completes.\n*/\nnv.addGraph = function(obj) {\n    if (typeof arguments[0] === typeof(Function)) {\n        obj = {generate: arguments[0], callback: arguments[1]};\n    }\n\n    nv.render.queue.push(obj);\n\n    if (!nv.render.active) {\n        nv.render();\n    }\n};\n\n// Node/CommonJS exports\nif (typeof(module) !== 'undefined' && typeof(exports) !== 'undefined') {\n  module.exports = nv;\n}\n\nif (typeof(window) !== 'undefined') {\n  window.nv = nv;\n}\n/* Facade for queueing DOM write operations\r\n * with Fastdom (https://github.com/wilsonpage/fastdom)\r\n * if available.\r\n * This could easily be extended to support alternate\r\n * implementations in the future.\r\n */\r\nnv.dom.write = function(callback) {\r\n\tif (window.fastdom !== undefined) {\r\n\t\treturn fastdom.mutate(callback);\r\n\t}\r\n\treturn callback();\r\n};\r\n\r\n/* Facade for queueing DOM read operations\r\n * with Fastdom (https://github.com/wilsonpage/fastdom)\r\n * if available.\r\n * This could easily be extended to support alternate\r\n * implementations in the future.\r\n */\r\nnv.dom.read = function(callback) {\r\n\tif (window.fastdom !== undefined) {\r\n\t\treturn fastdom.measure(callback);\r\n\t}\r\n\treturn callback();\r\n};\r\n/* Utility class to handle creation of an interactive layer.\n This places a rectangle on top of the chart. When you mouse move over it, it sends a dispatch\n containing the X-coordinate. It can also render a vertical line where the mouse is located.\n\n dispatch.elementMousemove is the important event to latch onto.  It is fired whenever the mouse moves over\n the rectangle. The dispatch is given one object which contains the mouseX/Y location.\n It also has 'pointXValue', which is the conversion of mouseX to the x-axis scale.\n */\nnv.interactiveGuideline = function() {\n    \"use strict\";\n\n    var margin = { left: 0, top: 0 } //Pass the chart's top and left magins. Used to calculate the mouseX/Y.\n        ,   width = null\n        ,   height = null\n        ,   xScale = d3.scale.linear()\n        ,   dispatch = d3.dispatch('elementMousemove', 'elementMouseout', 'elementClick', 'elementDblclick', 'elementMouseDown', 'elementMouseUp')\n        ,   showGuideLine = true\n        ,   svgContainer = null // Must pass the chart's svg, we'll use its mousemove event.\n        ,   tooltip = nv.models.tooltip()\n        ,   isMSIE =  window.ActiveXObject// Checkt if IE by looking for activeX. (excludes IE11)\n    ;\n\n    tooltip\n        .duration(0)\n        .hideDelay(0)\n        .hidden(false);\n\n    function layer(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this);\n            var availableWidth = (width || 960), availableHeight = (height || 400);\n            var wrap = container.selectAll(\"g.nv-wrap.nv-interactiveLineLayer\")\n                .data([data]);\n            var wrapEnter = wrap.enter()\n                .append(\"g\").attr(\"class\", \" nv-wrap nv-interactiveLineLayer\");\n            wrapEnter.append(\"g\").attr(\"class\",\"nv-interactiveGuideLine\");\n\n            if (!svgContainer) {\n                return;\n            }\n\n            function mouseHandler() {\n                var d3mouse = d3.mouse(this);\n                var mouseX = d3mouse[0];\n                var mouseY = d3mouse[1];\n                var subtractMargin = true;\n                var mouseOutAnyReason = false;\n                if (isMSIE) {\n                    /*\n                     D3.js (or maybe SVG.getScreenCTM) has a nasty bug in Internet Explorer 10.\n                     d3.mouse() returns incorrect X,Y mouse coordinates when mouse moving\n                     over a rect in IE 10.\n                     However, d3.event.offsetX/Y also returns the mouse coordinates\n                     relative to the triggering <rect>. So we use offsetX/Y on IE.\n                     */\n                    mouseX = d3.event.offsetX;\n                    mouseY = d3.event.offsetY;\n\n                    /*\n                     On IE, if you attach a mouse event listener to the <svg> container,\n                     it will actually trigger it for all the child elements (like <path>, <circle>, etc).\n                     When this happens on IE, the offsetX/Y is set to where ever the child element\n                     is located.\n                     As a result, we do NOT need to subtract margins to figure out the mouse X/Y\n                     position under this scenario. Removing the line below *will* cause\n                     the interactive layer to not work right on IE.\n                     */\n                    if(d3.event.target.tagName !== \"svg\") {\n                        subtractMargin = false;\n                    }\n\n                    if (d3.event.target.className.baseVal.match(\"nv-legend\")) {\n                        mouseOutAnyReason = true;\n                    }\n\n                }\n\n                if(subtractMargin) {\n                    mouseX -= margin.left;\n                    mouseY -= margin.top;\n                }\n\n                /* If mouseX/Y is outside of the chart's bounds,\n                 trigger a mouseOut event.\n                 */\n                if (d3.event.type === 'mouseout'\n                    || mouseX < 0 || mouseY < 0\n                    || mouseX > availableWidth || mouseY > availableHeight\n                    || (d3.event.relatedTarget && d3.event.relatedTarget.ownerSVGElement === undefined)\n                    || mouseOutAnyReason\n                    ) {\n\n                    if (isMSIE) {\n                        if (d3.event.relatedTarget\n                            && d3.event.relatedTarget.ownerSVGElement === undefined\n                            && (d3.event.relatedTarget.className === undefined\n                                || d3.event.relatedTarget.className.match(tooltip.nvPointerEventsClass))) {\n\n                            return;\n                        }\n                    }\n                    dispatch.elementMouseout({\n                        mouseX: mouseX,\n                        mouseY: mouseY\n                    });\n                    layer.renderGuideLine(null); //hide the guideline\n                    tooltip.hidden(true);\n                    return;\n                } else {\n                    tooltip.hidden(false);\n                }\n\n\n                var scaleIsOrdinal = typeof xScale.rangeBands === 'function';\n                var pointXValue = undefined;\n\n                // Ordinal scale has no invert method\n                if (scaleIsOrdinal) {\n                    var elementIndex = d3.bisect(xScale.range(), mouseX) - 1;\n                    // Check if mouseX is in the range band\n                    if (xScale.range()[elementIndex] + xScale.rangeBand() >= mouseX) {\n                        pointXValue = xScale.domain()[d3.bisect(xScale.range(), mouseX) - 1];\n                    }\n                    else {\n                        dispatch.elementMouseout({\n                            mouseX: mouseX,\n                            mouseY: mouseY\n                        });\n                        layer.renderGuideLine(null); //hide the guideline\n                        tooltip.hidden(true);\n                        return;\n                    }\n                }\n                else {\n                    pointXValue = xScale.invert(mouseX);\n                }\n\n                dispatch.elementMousemove({\n                    mouseX: mouseX,\n                    mouseY: mouseY,\n                    pointXValue: pointXValue\n                });\n\n                //If user double clicks the layer, fire a elementDblclick\n                if (d3.event.type === \"dblclick\") {\n                    dispatch.elementDblclick({\n                        mouseX: mouseX,\n                        mouseY: mouseY,\n                        pointXValue: pointXValue\n                    });\n                }\n\n                // if user single clicks the layer, fire elementClick\n                if (d3.event.type === 'click') {\n                    dispatch.elementClick({\n                        mouseX: mouseX,\n                        mouseY: mouseY,\n                        pointXValue: pointXValue\n                    });\n                }\n\n                // if user presses mouse down the layer, fire elementMouseDown\n                if (d3.event.type === 'mousedown') {\n                \tdispatch.elementMouseDown({\n                \t\tmouseX: mouseX,\n                \t\tmouseY: mouseY,\n                \t\tpointXValue: pointXValue\n                \t});\n                }\n\n                // if user presses mouse down the layer, fire elementMouseUp\n                if (d3.event.type === 'mouseup') {\n                \tdispatch.elementMouseUp({\n                \t\tmouseX: mouseX,\n                \t\tmouseY: mouseY,\n                \t\tpointXValue: pointXValue\n                \t});\n                }\n            }\n\n            svgContainer\n                .on(\"touchmove\",mouseHandler)\n                .on(\"mousemove\",mouseHandler, true)\n                .on(\"mouseout\" ,mouseHandler,true)\n                .on(\"mousedown\" ,mouseHandler,true)\n                .on(\"mouseup\" ,mouseHandler,true)\n                .on(\"dblclick\" ,mouseHandler)\n                .on(\"click\", mouseHandler)\n            ;\n\n            layer.guideLine = null;\n            //Draws a vertical guideline at the given X postion.\n            layer.renderGuideLine = function(x) {\n                if (!showGuideLine) return;\n                if (layer.guideLine && layer.guideLine.attr(\"x1\") === x) return;\n                nv.dom.write(function() {\n                    var line = wrap.select(\".nv-interactiveGuideLine\")\n                        .selectAll(\"line\")\n                        .data((x != null) ? [nv.utils.NaNtoZero(x)] : [], String);\n                    line.enter()\n                        .append(\"line\")\n                        .attr(\"class\", \"nv-guideline\")\n                        .attr(\"x1\", function(d) { return d;})\n                        .attr(\"x2\", function(d) { return d;})\n                        .attr(\"y1\", availableHeight)\n                        .attr(\"y2\",0);\n                    line.exit().remove();\n                });\n            }\n        });\n    }\n\n    layer.dispatch = dispatch;\n    layer.tooltip = tooltip;\n\n    layer.margin = function(_) {\n        if (!arguments.length) return margin;\n        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        return layer;\n    };\n\n    layer.width = function(_) {\n        if (!arguments.length) return width;\n        width = _;\n        return layer;\n    };\n\n    layer.height = function(_) {\n        if (!arguments.length) return height;\n        height = _;\n        return layer;\n    };\n\n    layer.xScale = function(_) {\n        if (!arguments.length) return xScale;\n        xScale = _;\n        return layer;\n    };\n\n    layer.showGuideLine = function(_) {\n        if (!arguments.length) return showGuideLine;\n        showGuideLine = _;\n        return layer;\n    };\n\n    layer.svgContainer = function(_) {\n        if (!arguments.length) return svgContainer;\n        svgContainer = _;\n        return layer;\n    };\n\n    return layer;\n};\n\n/* Utility class that uses d3.bisect to find the index in a given array, where a search value can be inserted.\n This is different from normal bisectLeft; this function finds the nearest index to insert the search value.\n\n For instance, lets say your array is [1,2,3,5,10,30], and you search for 28.\n Normal d3.bisectLeft will return 4, because 28 is inserted after the number 10.  But interactiveBisect will return 5\n because 28 is closer to 30 than 10.\n\n Unit tests can be found in: interactiveBisectTest.html\n\n Has the following known issues:\n * Will not work if the data points move backwards (ie, 10,9,8,7, etc) or if the data points are in random order.\n * Won't work if there are duplicate x coordinate values.\n */\nnv.interactiveBisect = function (values, searchVal, xAccessor) {\n    \"use strict\";\n    if (! (values instanceof Array)) {\n        return null;\n    }\n    var _xAccessor;\n    if (typeof xAccessor !== 'function') {\n        _xAccessor = function(d) {\n            return d.x;\n        }\n    } else {\n        _xAccessor = xAccessor;\n    }\n    var _cmp = function(d, v) {\n        // Accessors are no longer passed the index of the element along with\n        // the element itself when invoked by d3.bisector.\n        //\n        // Starting at D3 v3.4.4, d3.bisector() started inspecting the\n        // function passed to determine if it should consider it an accessor\n        // or a comparator. This meant that accessors that take two arguments\n        // (expecting an index as the second parameter) are treated as\n        // comparators where the second argument is the search value against\n        // which the first argument is compared.\n        return _xAccessor(d) - v;\n    };\n\n    var bisect = d3.bisector(_cmp).left;\n    var index = d3.max([0, bisect(values,searchVal) - 1]);\n    var currentValue = _xAccessor(values[index]);\n\n    if (typeof currentValue === 'undefined') {\n        currentValue = index;\n    }\n\n    if (currentValue === searchVal) {\n        return index; //found exact match\n    }\n\n    var nextIndex = d3.min([index+1, values.length - 1]);\n    var nextValue = _xAccessor(values[nextIndex]);\n\n    if (typeof nextValue === 'undefined') {\n        nextValue = nextIndex;\n    }\n\n    if (Math.abs(nextValue - searchVal) >= Math.abs(currentValue - searchVal)) {\n        return index;\n    } else {\n        return nextIndex\n    }\n};\n\n/*\n Returns the index in the array \"values\" that is closest to searchVal.\n Only returns an index if searchVal is within some \"threshold\".\n Otherwise, returns null.\n */\nnv.nearestValueIndex = function (values, searchVal, threshold) {\n    \"use strict\";\n    var yDistMax = Infinity, indexToHighlight = null;\n    values.forEach(function(d,i) {\n        var delta = Math.abs(searchVal - d);\n        if ( d != null && delta <= yDistMax && delta < threshold) {\n            yDistMax = delta;\n            indexToHighlight = i;\n        }\n    });\n    return indexToHighlight;\n};\n\n/* Model which can be instantiated to handle tooltip rendering.\n Example usage:\n var tip = nv.models.tooltip().gravity('w').distance(23)\n .data(myDataObject);\n\n tip();    //just invoke the returned function to render tooltip.\n */\nnv.models.tooltip = function() {\n    \"use strict\";\n\n    /*\n    Tooltip data. If data is given in the proper format, a consistent tooltip is generated.\n    Example Format of data:\n    {\n        key: \"Date\",\n        value: \"August 2009\",\n        series: [\n            {key: \"Series 1\", value: \"Value 1\", color: \"#000\"},\n            {key: \"Series 2\", value: \"Value 2\", color: \"#00f\"}\n        ]\n    }\n    */\n    var id = \"nvtooltip-\" + Math.floor(Math.random() * 100000) // Generates a unique id when you create a new tooltip() object.\n        ,   data = null\n        ,   gravity = 'w'   // Can be 'n','s','e','w'. Determines how tooltip is positioned.\n        ,   distance = 25 // Distance to offset tooltip from the mouse location.\n        ,   snapDistance = 0   // Tolerance allowed before tooltip is moved from its current position (creates 'snapping' effect)\n        ,   classes = null  // Attaches additional CSS classes to the tooltip DIV that is created.\n        ,   hidden = true  // Start off hidden, toggle with hide/show functions below.\n        ,   hideDelay = 200  // Delay (in ms) before the tooltip hides after calling hide().\n        ,   tooltip = null // d3 select of the tooltip div.\n        ,   lastPosition = { left: null, top: null } // Last position the tooltip was in.\n        ,   enabled = true  // True -> tooltips are rendered. False -> don't render tooltips.\n        ,   duration = 100 // Tooltip movement duration, in ms.\n        ,   headerEnabled = true // If is to show the tooltip header.\n        ,   nvPointerEventsClass = \"nv-pointer-events-none\" // CSS class to specify whether element should not have mouse events.\n    ;\n\n    // Format function for the tooltip values column.\n    var valueFormatter = function(d, i) {\n        return d;\n    };\n\n    // Format function for the tooltip header value.\n    var headerFormatter = function(d) {\n        return d;\n    };\n\n    var keyFormatter = function(d, i) {\n        return d;\n    };\n\n    // By default, the tooltip model renders a beautiful table inside a DIV.\n    // You can override this function if a custom tooltip is desired.\n    var contentGenerator = function(d) {\n        if (d === null) {\n            return '';\n        }\n\n        var table = d3.select(document.createElement(\"table\"));\n        if (headerEnabled) {\n            var theadEnter = table.selectAll(\"thead\")\n                .data([d])\n                .enter().append(\"thead\");\n\n            theadEnter.append(\"tr\")\n                .append(\"td\")\n                .attr(\"colspan\", 3)\n                .append(\"strong\")\n                .classed(\"x-value\", true)\n                .html(headerFormatter(d.value));\n        }\n\n        var tbodyEnter = table.selectAll(\"tbody\")\n            .data([d])\n            .enter().append(\"tbody\");\n\n        var trowEnter = tbodyEnter.selectAll(\"tr\")\n                .data(function(p) { return p.series})\n                .enter()\n                .append(\"tr\")\n                .classed(\"highlight\", function(p) { return p.highlight});\n\n        trowEnter.append(\"td\")\n            .classed(\"legend-color-guide\",true)\n            .append(\"div\")\n            .style(\"background-color\", function(p) { return p.color});\n\n        trowEnter.append(\"td\")\n            .classed(\"key\",true)\n            .classed(\"total\",function(p) { return !!p.total})\n            .html(function(p, i) { return keyFormatter(p.key, i)});\n\n        trowEnter.append(\"td\")\n            .classed(\"value\",true)\n            .html(function(p, i) { return valueFormatter(p.value, i) });\n\n        trowEnter.filter(function (p,i) { return p.percent !== undefined }).append(\"td\")\n            .classed(\"percent\", true)\n            .html(function(p, i) { return \"(\" + d3.format('%')(p.percent) + \")\" });\n\n        trowEnter.selectAll(\"td\").each(function(p) {\n            if (p.highlight) {\n                var opacityScale = d3.scale.linear().domain([0,1]).range([\"#fff\",p.color]);\n                var opacity = 0.6;\n                d3.select(this)\n                    .style(\"border-bottom-color\", opacityScale(opacity))\n                    .style(\"border-top-color\", opacityScale(opacity))\n                ;\n            }\n        });\n\n        var html = table.node().outerHTML;\n        if (d.footer !== undefined)\n            html += \"<div class='footer'>\" + d.footer + \"</div>\";\n        return html;\n\n    };\n\n    /*\n     Function that returns the position (relative to the viewport/document.body)\n     the tooltip should be placed in.\n     Should return: {\n        left: <leftPos>,\n        top: <topPos>\n     }\n     */\n    var position = function() {\n        var pos = {\n            left: d3.event !== null ? d3.event.clientX : 0,\n            top: d3.event !== null ? d3.event.clientY : 0\n        };\n\n        if(getComputedStyle(document.body).transform != 'none') {\n            // Take the offset into account, as now the tooltip is relative\n            // to document.body.\n            var client = document.body.getBoundingClientRect();\n            pos.left -= client.left;\n            pos.top -= client.top;\n        }\n\n        return pos;\n    };\n\n    var dataSeriesExists = function(d) {\n        if (d && d.series) {\n            if (nv.utils.isArray(d.series)) {\n                return true;\n            }\n            // if object, it's okay just convert to array of the object\n            if (nv.utils.isObject(d.series)) {\n                d.series = [d.series];\n                return true;\n            }\n        }\n        return false;\n    };\n\n    // Calculates the gravity offset of the tooltip. Parameter is position of tooltip\n    // relative to the viewport.\n    var calcGravityOffset = function(pos) {\n        var height = tooltip.node().offsetHeight,\n            width = tooltip.node().offsetWidth,\n            clientWidth = document.documentElement.clientWidth, // Don't want scrollbars.\n            clientHeight = document.documentElement.clientHeight, // Don't want scrollbars.\n            left, top, tmp;\n\n        // calculate position based on gravity\n        switch (gravity) {\n            case 'e':\n                left = - width - distance;\n                top = - (height / 2);\n                if(pos.left + left < 0) left = distance;\n                if((tmp = pos.top + top) < 0) top -= tmp;\n                if((tmp = pos.top + top + height) > clientHeight) top -= tmp - clientHeight;\n                break;\n            case 'w':\n                left = distance;\n                top = - (height / 2);\n                if (pos.left + left + width > clientWidth) left = - width - distance;\n                if ((tmp = pos.top + top) < 0) top -= tmp;\n                if ((tmp = pos.top + top + height) > clientHeight) top -= tmp - clientHeight;\n                break;\n            case 'n':\n                left = - (width / 2) - 5; // - 5 is an approximation of the mouse's height.\n                top = distance;\n                if (pos.top + top + height > clientHeight) top = - height - distance;\n                if ((tmp = pos.left + left) < 0) left -= tmp;\n                if ((tmp = pos.left + left + width) > clientWidth) left -= tmp - clientWidth;\n                break;\n            case 's':\n                left = - (width / 2);\n                top = - height - distance;\n                if (pos.top + top < 0) top = distance;\n                if ((tmp = pos.left + left) < 0) left -= tmp;\n                if ((tmp = pos.left + left + width) > clientWidth) left -= tmp - clientWidth;\n                break;\n            case 'center':\n                left = - (width / 2);\n                top = - (height / 2);\n                break;\n            default:\n                left = 0;\n                top = 0;\n                break;\n        }\n\n        return { 'left': left, 'top': top };\n    };\n\n    /*\n     Positions the tooltip in the correct place, as given by the position() function.\n     */\n    var positionTooltip = function() {\n        nv.dom.read(function() {\n            var pos = position(),\n                gravityOffset = calcGravityOffset(pos),\n                left = pos.left + gravityOffset.left,\n                top = pos.top + gravityOffset.top;\n\n            // delay hiding a bit to avoid flickering\n            if (hidden) {\n                tooltip\n                    .interrupt()\n                    .transition()\n                    .delay(hideDelay)\n                    .duration(0)\n                    .style('opacity', 0);\n            } else {\n                // using tooltip.style('transform') returns values un-usable for tween\n                var old_translate = 'translate(' + lastPosition.left + 'px, ' + lastPosition.top + 'px)';\n                var new_translate = 'translate(' + Math.round(left) + 'px, ' + Math.round(top) + 'px)';\n                var translateInterpolator = d3.interpolateString(old_translate, new_translate);\n                var is_hidden = tooltip.style('opacity') < 0.1;\n\n                tooltip\n                    .interrupt() // cancel running transitions\n                    .transition()\n                    .duration(is_hidden ? 0 : duration)\n                    // using tween since some versions of d3 can't auto-tween a translate on a div\n                    .styleTween('transform', function (d) {\n                        return translateInterpolator;\n                    }, 'important')\n                    // Safari has its own `-webkit-transform` and does not support `transform`\n                    .styleTween('-webkit-transform', function (d) {\n                        return translateInterpolator;\n                    })\n                    .style('-ms-transform', new_translate)\n                    .style('opacity', 1);\n            }\n\n            lastPosition.left = left;\n            lastPosition.top = top;\n        });\n    };\n\n    // Creates new tooltip container, or uses existing one on DOM.\n    function initTooltip() {\n        if (!tooltip || !tooltip.node()) {\n            // Create new tooltip div if it doesn't exist on DOM.\n\n            var data = [1];\n            tooltip = d3.select(document.body).select('#'+id).data(data);\n\n            tooltip.enter().append('div')\n                   .attr(\"class\", \"nvtooltip \" + (classes ? classes : \"xy-tooltip\"))\n                   .attr(\"id\", id)\n                   .style(\"top\", 0).style(\"left\", 0)\n                   .style('opacity', 0)\n                   .style('position', 'fixed')\n                   .selectAll(\"div, table, td, tr\").classed(nvPointerEventsClass, true)\n                   .classed(nvPointerEventsClass, true);\n\n            tooltip.exit().remove()\n        }\n    }\n\n    // Draw the tooltip onto the DOM.\n    function nvtooltip() {\n        if (!enabled) return;\n        if (!dataSeriesExists(data)) return;\n\n        nv.dom.write(function () {\n            initTooltip();\n            // Generate data and set it into tooltip.\n            // Bonus - If you override contentGenerator and return falsey you can use something like\n            //         React or Knockout to bind the data for your tooltip.\n            var newContent = contentGenerator(data);\n            if (newContent) {\n                tooltip.node().innerHTML = newContent;\n            }\n\n            positionTooltip();\n        });\n\n        return nvtooltip;\n    }\n\n    nvtooltip.nvPointerEventsClass = nvPointerEventsClass;\n    nvtooltip.options = nv.utils.optionsFunc.bind(nvtooltip);\n\n    nvtooltip._options = Object.create({}, {\n        // simple read/write options\n        duration: {get: function(){return duration;}, set: function(_){duration=_;}},\n        gravity: {get: function(){return gravity;}, set: function(_){gravity=_;}},\n        distance: {get: function(){return distance;}, set: function(_){distance=_;}},\n        snapDistance: {get: function(){return snapDistance;}, set: function(_){snapDistance=_;}},\n        classes: {get: function(){return classes;}, set: function(_){classes=_;}},\n        enabled: {get: function(){return enabled;}, set: function(_){enabled=_;}},\n        hideDelay: {get: function(){return hideDelay;}, set: function(_){hideDelay=_;}},\n        contentGenerator: {get: function(){return contentGenerator;}, set: function(_){contentGenerator=_;}},\n        valueFormatter: {get: function(){return valueFormatter;}, set: function(_){valueFormatter=_;}},\n        headerFormatter: {get: function(){return headerFormatter;}, set: function(_){headerFormatter=_;}},\n        keyFormatter: {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        headerEnabled: {get: function(){return headerEnabled;}, set: function(_){headerEnabled=_;}},\n        position: {get: function(){return position;}, set: function(_){position=_;}},\n\n        // Deprecated options\n        chartContainer: {get: function(){return document.body;}, set: function(_){\n            // deprecated after 1.8.3\n            nv.deprecated('chartContainer', 'feature removed after 1.8.3');\n        }},\n        fixedTop: {get: function(){return null;}, set: function(_){\n            // deprecated after 1.8.1\n            nv.deprecated('fixedTop', 'feature removed after 1.8.1');\n        }},\n        offset: {get: function(){return {left: 0, top: 0};}, set: function(_){\n            // deprecated after 1.8.1\n            nv.deprecated('offset', 'use chart.tooltip.distance() instead');\n        }},\n\n        // options with extra logic\n        hidden: {get: function(){return hidden;}, set: function(_){\n            if (hidden != _) {\n                hidden = !!_;\n                nvtooltip();\n            }\n        }},\n        data: {get: function(){return data;}, set: function(_){\n            // if showing a single data point, adjust data format with that\n            if (_.point) {\n                _.value = _.point.x;\n                _.series = _.series || {};\n                _.series.value = _.point.y;\n                _.series.color = _.point.color || _.series.color;\n            }\n            data = _;\n        }},\n\n        // read only properties\n        node: {get: function(){return tooltip.node();}, set: function(_){}},\n        id: {get: function(){return id;}, set: function(_){}}\n    });\n\n    nv.utils.initOptions(nvtooltip);\n    return nvtooltip;\n};\n\n\n/*\nGets the browser window size\n\nReturns object with height and width properties\n */\nnv.utils.windowSize = function() {\n    // Sane defaults\n    var size = {width: 640, height: 480};\n\n    // Most recent browsers use\n    if (window.innerWidth && window.innerHeight) {\n        size.width = window.innerWidth;\n        size.height = window.innerHeight;\n        return (size);\n    }\n\n    // IE can use depending on mode it is in\n    if (document.compatMode=='CSS1Compat' &&\n        document.documentElement &&\n        document.documentElement.offsetWidth ) {\n\n        size.width = document.documentElement.offsetWidth;\n        size.height = document.documentElement.offsetHeight;\n        return (size);\n    }\n\n    // Earlier IE uses Doc.body\n    if (document.body && document.body.offsetWidth) {\n        size.width = document.body.offsetWidth;\n        size.height = document.body.offsetHeight;\n        return (size);\n    }\n\n    return (size);\n};\n\n\n/* handle dumb browser quirks...  isinstance breaks if you use frames\ntypeof returns 'object' for null, NaN is a number, etc.\n */\nnv.utils.isArray = Array.isArray;\nnv.utils.isObject = function(a) {\n    return a !== null && typeof a === 'object';\n};\nnv.utils.isFunction = function(a) {\n    return typeof a === 'function';\n};\nnv.utils.isDate = function(a) {\n    return toString.call(a) === '[object Date]';\n};\nnv.utils.isNumber = function(a) {\n    return !isNaN(a) && typeof a === 'number';\n};\n\n\n/*\nBinds callback function to run when window is resized\n */\nnv.utils.windowResize = function(handler) {\n    if (window.addEventListener) {\n        window.addEventListener('resize', handler);\n    } else {\n        nv.log(\"ERROR: Failed to bind to window.resize with: \", handler);\n    }\n    // return object with clear function to remove the single added callback.\n    return {\n        callback: handler,\n        clear: function() {\n            window.removeEventListener('resize', handler);\n        }\n    }\n};\n\n\n/*\nBackwards compatible way to implement more d3-like coloring of graphs.\nCan take in nothing, an array, or a function/scale\nTo use a normal scale, get the range and pass that because we must be able\nto take two arguments and use the index to keep backward compatibility\n*/\nnv.utils.getColor = function(color) {\n    //if you pass in nothing, get default colors back\n    if (color === undefined) {\n        return nv.utils.defaultColor();\n\n    //if passed an array, turn it into a color scale\n    } else if(nv.utils.isArray(color)) {\n        var color_scale = d3.scale.ordinal().range(color);\n        return function(d, i) {\n            var key = i === undefined ? d : i;\n            return d.color || color_scale(key);\n        };\n\n    //if passed a function or scale, return it, or whatever it may be\n    //external libs, such as angularjs-nvd3-directives use this\n    } else {\n        //can't really help it if someone passes rubbish as color\n        return color;\n    }\n};\n\n\n/*\nDefault color chooser uses a color scale of 20 colors from D3\n https://github.com/mbostock/d3/wiki/Ordinal-Scales#categorical-colors\n */\nnv.utils.defaultColor = function() {\n    // get range of the scale so we'll turn it into our own function.\n    return nv.utils.getColor(d3.scale.category20().range());\n};\n\n\n/*\nReturns a color function that takes the result of 'getKey' for each series and\nlooks for a corresponding color from the dictionary\n*/\nnv.utils.customTheme = function(dictionary, getKey, defaultColors) {\n    // use default series.key if getKey is undefined\n    getKey = getKey || function(series) { return series.key };\n    defaultColors = defaultColors || d3.scale.category20().range();\n\n    // start at end of default color list and walk back to index 0\n    var defIndex = defaultColors.length;\n\n    return function(series, index) {\n        var key = getKey(series);\n        if (nv.utils.isFunction(dictionary[key])) {\n            return dictionary[key]();\n        } else if (dictionary[key] !== undefined) {\n            return dictionary[key];\n        } else {\n            // no match in dictionary, use a default color\n            if (!defIndex) {\n                // used all the default colors, start over\n                defIndex = defaultColors.length;\n            }\n            defIndex = defIndex - 1;\n            return defaultColors[defIndex];\n        }\n    };\n};\n\n\n/*\nFrom the PJAX example on d3js.org, while this is not really directly needed\nit's a very cool method for doing pjax, I may expand upon it a little bit,\nopen to suggestions on anything that may be useful\n*/\nnv.utils.pjax = function(links, content) {\n\n    var load = function(href) {\n        d3.html(href, function(fragment) {\n            var target = d3.select(content).node();\n            target.parentNode.replaceChild(\n                d3.select(fragment).select(content).node(),\n                target);\n            nv.utils.pjax(links, content);\n        });\n    };\n\n    d3.selectAll(links).on(\"click\", function() {\n        history.pushState(this.href, this.textContent, this.href);\n        load(this.href);\n        d3.event.preventDefault();\n    });\n\n    d3.select(window).on(\"popstate\", function() {\n        if (d3.event.state) {\n            load(d3.event.state);\n        }\n    });\n};\n\n\n/*\nFor when we want to approximate the width in pixels for an SVG:text element.\nMost common instance is when the element is in a display:none; container.\nForumla is : text.length * font-size * constant_factor\n*/\nnv.utils.calcApproxTextWidth = function (svgTextElem) {\n    if (nv.utils.isFunction(svgTextElem.style) && nv.utils.isFunction(svgTextElem.text)) {\n        var fontSize = parseInt(svgTextElem.style(\"font-size\").replace(\"px\",\"\"), 10);\n        var textLength = svgTextElem.text().length;\n        return nv.utils.NaNtoZero(textLength * fontSize * 0.5);\n    }\n    return 0;\n};\n\n\n/*\nNumbers that are undefined, null or NaN, convert them to zeros.\n*/\nnv.utils.NaNtoZero = function(n) {\n    if (!nv.utils.isNumber(n)\n        || isNaN(n)\n        || n === null\n        || n === Infinity\n        || n === -Infinity) {\n\n        return 0;\n    }\n    return n;\n};\n\n/*\nAdd a way to watch for d3 transition ends to d3\n*/\nd3.selection.prototype.watchTransition = function(renderWatch){\n    var args = [this].concat([].slice.call(arguments, 1));\n    return renderWatch.transition.apply(renderWatch, args);\n};\n\n\n/*\nHelper object to watch when d3 has rendered something\n*/\nnv.utils.renderWatch = function(dispatch, duration) {\n    if (!(this instanceof nv.utils.renderWatch)) {\n        return new nv.utils.renderWatch(dispatch, duration);\n    }\n\n    var _duration = duration !== undefined ? duration : 250;\n    var renderStack = [];\n    var self = this;\n\n    this.models = function(models) {\n        models = [].slice.call(arguments, 0);\n        models.forEach(function(model){\n            model.__rendered = false;\n            (function(m){\n                m.dispatch.on('renderEnd', function(arg){\n                    m.__rendered = true;\n                    self.renderEnd('model');\n                });\n            })(model);\n\n            if (renderStack.indexOf(model) < 0) {\n                renderStack.push(model);\n            }\n        });\n    return this;\n    };\n\n    this.reset = function(duration) {\n        if (duration !== undefined) {\n            _duration = duration;\n        }\n        renderStack = [];\n    };\n\n    this.transition = function(selection, args, duration) {\n        args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n\n        if (args.length > 1) {\n            duration = args.pop();\n        } else {\n            duration = _duration !== undefined ? _duration : 250;\n        }\n        selection.__rendered = false;\n\n        if (renderStack.indexOf(selection) < 0) {\n            renderStack.push(selection);\n        }\n\n        if (duration === 0) {\n            selection.__rendered = true;\n            selection.delay = function() { return this; };\n            selection.duration = function() { return this; };\n            return selection;\n        } else {\n            if (selection.length === 0) {\n                selection.__rendered = true;\n            } else if (selection.every( function(d){ return !d.length; } )) {\n                selection.__rendered = true;\n            } else {\n                selection.__rendered = false;\n            }\n\n            var n = 0;\n            return selection\n                .transition()\n                .duration(duration)\n                .each(function(){ ++n; })\n                .each('end', function(d, i) {\n                    if (--n === 0) {\n                        selection.__rendered = true;\n                        self.renderEnd.apply(this, args);\n                    }\n                });\n        }\n    };\n\n    this.renderEnd = function() {\n        if (renderStack.every( function(d){ return d.__rendered; } )) {\n            renderStack.forEach( function(d){ d.__rendered = false; });\n            dispatch.renderEnd.apply(this, arguments);\n        }\n    }\n\n};\n\n\n/*\nTakes multiple objects and combines them into the first one (dst)\nexample:  nv.utils.deepExtend({a: 1}, {a: 2, b: 3}, {c: 4});\ngives:  {a: 2, b: 3, c: 4}\n*/\nnv.utils.deepExtend = function(dst){\n    var sources = arguments.length > 1 ? [].slice.call(arguments, 1) : [];\n    sources.forEach(function(source) {\n        for (var key in source) {\n            var isArray = nv.utils.isArray(dst[key]);\n            var isObject = nv.utils.isObject(dst[key]);\n            var srcObj = nv.utils.isObject(source[key]);\n\n            if (isObject && !isArray && srcObj) {\n                nv.utils.deepExtend(dst[key], source[key]);\n            } else {\n                dst[key] = source[key];\n            }\n        }\n    });\n};\n\n\n/*\nstate utility object, used to track d3 states in the models\n*/\nnv.utils.state = function(){\n    if (!(this instanceof nv.utils.state)) {\n        return new nv.utils.state();\n    }\n    var state = {};\n    var _self = this;\n    var _setState = function(){};\n    var _getState = function(){ return {}; };\n    var init = null;\n    var changed = null;\n\n    this.dispatch = d3.dispatch('change', 'set');\n\n    this.dispatch.on('set', function(state){\n        _setState(state, true);\n    });\n\n    this.getter = function(fn){\n        _getState = fn;\n        return this;\n    };\n\n    this.setter = function(fn, callback) {\n        if (!callback) {\n            callback = function(){};\n        }\n        _setState = function(state, update){\n            fn(state);\n            if (update) {\n                callback();\n            }\n        };\n        return this;\n    };\n\n    this.init = function(state){\n        init = init || {};\n        nv.utils.deepExtend(init, state);\n    };\n\n    var _set = function(){\n        var settings = _getState();\n\n        if (JSON.stringify(settings) === JSON.stringify(state)) {\n            return false;\n        }\n\n        for (var key in settings) {\n            if (state[key] === undefined) {\n                state[key] = {};\n            }\n            state[key] = settings[key];\n            changed = true;\n        }\n        return true;\n    };\n\n    this.update = function(){\n        if (init) {\n            _setState(init, false);\n            init = null;\n        }\n        if (_set.call(this)) {\n            this.dispatch.change(state);\n        }\n    };\n\n};\n\n\n/*\nSnippet of code you can insert into each nv.models.* to give you the ability to\ndo things like:\nchart.options({\n  showXAxis: true,\n  tooltips: true\n});\n\nTo enable in the chart:\nchart.options = nv.utils.optionsFunc.bind(chart);\n*/\nnv.utils.optionsFunc = function(args) {\n    if (args) {\n        d3.map(args).forEach((function(key,value) {\n            if (nv.utils.isFunction(this[key])) {\n                this[key](value);\n            }\n        }).bind(this));\n    }\n    return this;\n};\n\n\n/*\nnumTicks:  requested number of ticks\ndata:  the chart data\n\nreturns the number of ticks to actually use on X axis, based on chart data\nto avoid duplicate ticks with the same value\n*/\nnv.utils.calcTicksX = function(numTicks, data) {\n    // find max number of values from all data streams\n    var numValues = 1;\n    var i = 0;\n    for (i; i < data.length; i += 1) {\n        var stream_len = data[i] && data[i].values ? data[i].values.length : 0;\n        numValues = stream_len > numValues ? stream_len : numValues;\n    }\n    nv.log(\"Requested number of ticks: \", numTicks);\n    nv.log(\"Calculated max values to be: \", numValues);\n    // make sure we don't have more ticks than values to avoid duplicates\n    numTicks = numTicks > numValues ? numTicks = numValues - 1 : numTicks;\n    // make sure we have at least one tick\n    numTicks = numTicks < 1 ? 1 : numTicks;\n    // make sure it's an integer\n    numTicks = Math.floor(numTicks);\n    nv.log(\"Calculating tick count as: \", numTicks);\n    return numTicks;\n};\n\n\n/*\nreturns number of ticks to actually use on Y axis, based on chart data\n*/\nnv.utils.calcTicksY = function(numTicks, data) {\n    // currently uses the same logic but we can adjust here if needed later\n    return nv.utils.calcTicksX(numTicks, data);\n};\n\n\n/*\nAdd a particular option from an options object onto chart\nOptions exposed on a chart are a getter/setter function that returns chart\non set to mimic typical d3 option chaining, e.g. svg.option1('a').option2('b');\n\noption objects should be generated via Object.create() to provide\nthe option of manipulating data via get/set functions.\n*/\nnv.utils.initOption = function(chart, name) {\n    // if it's a call option, just call it directly, otherwise do get/set\n    if (chart._calls && chart._calls[name]) {\n        chart[name] = chart._calls[name];\n    } else {\n        chart[name] = function (_) {\n            if (!arguments.length) return chart._options[name];\n            chart._overrides[name] = true;\n            chart._options[name] = _;\n            return chart;\n        };\n        // calling the option as _option will ignore if set by option already\n        // so nvd3 can set options internally but the stop if set manually\n        chart['_' + name] = function(_) {\n            if (!arguments.length) return chart._options[name];\n            if (!chart._overrides[name]) {\n                chart._options[name] = _;\n            }\n            return chart;\n        }\n    }\n};\n\n\n/*\nAdd all options in an options object to the chart\n*/\nnv.utils.initOptions = function(chart) {\n    chart._overrides = chart._overrides || {};\n    var ops = Object.getOwnPropertyNames(chart._options || {});\n    var calls = Object.getOwnPropertyNames(chart._calls || {});\n    ops = ops.concat(calls);\n    for (var i in ops) {\n        nv.utils.initOption(chart, ops[i]);\n    }\n};\n\n\n/*\nInherit options from a D3 object\nd3.rebind makes calling the function on target actually call it on source\nAlso use _d3options so we can track what we inherit for documentation and chained inheritance\n*/\nnv.utils.inheritOptionsD3 = function(target, d3_source, oplist) {\n    target._d3options = oplist.concat(target._d3options || []);\n    oplist.unshift(d3_source);\n    oplist.unshift(target);\n    d3.rebind.apply(this, oplist);\n};\n\n\n/*\nRemove duplicates from an array\n*/\nnv.utils.arrayUnique = function(a) {\n    return a.sort().filter(function(item, pos) {\n        return !pos || item != a[pos - 1];\n    });\n};\n\n\n/*\nKeeps a list of custom symbols to draw from in addition to d3.svg.symbol\nNecessary since d3 doesn't let you extend its list -_-\nAdd new symbols by doing nv.utils.symbols.set('name', function(size){...});\n*/\nnv.utils.symbolMap = d3.map();\n\n\n/*\nReplaces d3.svg.symbol so that we can look both there and our own map\n */\nnv.utils.symbol = function() {\n    var type,\n        size = 64;\n    function symbol(d,i) {\n        var t = type.call(this,d,i);\n        var s = size.call(this,d,i);\n        if (d3.svg.symbolTypes.indexOf(t) !== -1) {\n            return d3.svg.symbol().type(t).size(s)();\n        } else {\n            return nv.utils.symbolMap.get(t)(s);\n        }\n    }\n    symbol.type = function(_) {\n        if (!arguments.length) return type;\n        type = d3.functor(_);\n        return symbol;\n    };\n    symbol.size = function(_) {\n        if (!arguments.length) return size;\n        size = d3.functor(_);\n        return symbol;\n    };\n    return symbol;\n};\n\n\n/*\nInherit option getter/setter functions from source to target\nd3.rebind makes calling the function on target actually call it on source\nAlso track via _inherited and _d3options so we can track what we inherit\nfor documentation generation purposes and chained inheritance\n*/\nnv.utils.inheritOptions = function(target, source) {\n    // inherit all the things\n    var ops = Object.getOwnPropertyNames(source._options || {});\n    var calls = Object.getOwnPropertyNames(source._calls || {});\n    var inherited = source._inherited || [];\n    var d3ops = source._d3options || [];\n    var args = ops.concat(calls).concat(inherited).concat(d3ops);\n    args.unshift(source);\n    args.unshift(target);\n    d3.rebind.apply(this, args);\n    // pass along the lists to keep track of them, don't allow duplicates\n    target._inherited = nv.utils.arrayUnique(ops.concat(calls).concat(inherited).concat(ops).concat(target._inherited || []));\n    target._d3options = nv.utils.arrayUnique(d3ops.concat(target._d3options || []));\n};\n\n\n/*\nRuns common initialize code on the svg before the chart builds\n*/\nnv.utils.initSVG = function(svg) {\n    svg.classed({'nvd3-svg':true});\n};\n\n\n/*\nSanitize and provide default for the container height.\n*/\nnv.utils.sanitizeHeight = function(height, container) {\n    return (height || parseInt(container.style('height'), 10) || 400);\n};\n\n\n/*\nSanitize and provide default for the container width.\n*/\nnv.utils.sanitizeWidth = function(width, container) {\n    return (width || parseInt(container.style('width'), 10) || 960);\n};\n\n\n/*\nCalculate the available height for a chart.\n*/\nnv.utils.availableHeight = function(height, container, margin) {\n    return Math.max(0,nv.utils.sanitizeHeight(height, container) - margin.top - margin.bottom);\n};\n\n/*\nCalculate the available width for a chart.\n*/\nnv.utils.availableWidth = function(width, container, margin) {\n    return Math.max(0,nv.utils.sanitizeWidth(width, container) - margin.left - margin.right);\n};\n\n/*\nClear any rendered chart components and display a chart's 'noData' message\n*/\nnv.utils.noData = function(chart, container) {\n    var opt = chart.options(),\n        margin = opt.margin(),\n        noData = opt.noData(),\n        data = (noData == null) ? [\"No Data Available.\"] : [noData],\n        height = nv.utils.availableHeight(null, container, margin),\n        width = nv.utils.availableWidth(null, container, margin),\n        x = margin.left + width/2,\n        y = margin.top + height/2;\n\n    //Remove any previously created chart components\n    container.selectAll('g').remove();\n\n    var noDataText = container.selectAll('.nv-noData').data(data);\n\n    noDataText.enter().append('text')\n        .attr('class', 'nvd3 nv-noData')\n        .attr('dy', '-.7em')\n        .style('text-anchor', 'middle');\n\n    noDataText\n        .attr('x', x)\n        .attr('y', y)\n        .text(function(t){ return t; });\n};\n\n/*\n Wrap long labels.\n */\nnv.utils.wrapTicks = function (text, width) {\n    text.each(function() {\n        var text = d3.select(this),\n            words = text.text().split(/\\s+/).reverse(),\n            word,\n            line = [],\n            lineNumber = 0,\n            lineHeight = 1.1,\n            y = text.attr(\"y\"),\n            dy = parseFloat(text.attr(\"dy\")),\n            tspan = text.text(null).append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", dy + \"em\");\n        while (word = words.pop()) {\n            line.push(word);\n            tspan.text(line.join(\" \"));\n            if (tspan.node().getComputedTextLength() > width) {\n                line.pop();\n                tspan.text(line.join(\" \"));\n                line = [word];\n                tspan = text.append(\"tspan\").attr(\"x\", 0).attr(\"y\", y).attr(\"dy\", ++lineNumber * lineHeight + dy + \"em\").text(word);\n            }\n        }\n    });\n};\n\n/*\nCheck equality of 2 array\n*/\nnv.utils.arrayEquals = function (array1, array2) {\n    if (array1 === array2)\n        return true;\n\n    if (!array1 || !array2)\n        return false;\n\n    // compare lengths - can save a lot of time\n    if (array1.length != array2.length)\n        return false;\n\n    for (var i = 0,\n        l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!nv.arrayEquals(array1[i], array2[i]))\n                return false;\n        } else if (array1[i] != array2[i]) {\n            // Warning - two different object instances will never be equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n    return true;\n};\nnv.models.axis = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var axis = d3.svg.axis();\n    var scale = d3.scale.linear();\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 75 //only used for tickLabel currently\n        , height = 60 //only used for tickLabel currently\n        , axisLabelText = null\n        , showMaxMin = true //TODO: showMaxMin should be disabled on all ordinal scaled axes\n        , rotateLabels = 0\n        , rotateYLabel = true\n        , staggerLabels = false\n        , isOrdinal = false\n        , ticks = null\n        , axisLabelDistance = 0\n        , fontSize = undefined\n        , duration = 250\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n    axis\n        .scale(scale)\n        .orient('bottom')\n        .tickFormat(function(d) { return d })\n    ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var scale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-axis').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-axis');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            if (ticks !== null)\n                axis.ticks(ticks);\n            else if (axis.orient() == 'top' || axis.orient() == 'bottom')\n                axis.ticks(Math.abs(scale.range()[1] - scale.range()[0]) / 100);\n\n            //TODO: consider calculating width/height based on whether or not label is added, for reference in charts using this component\n            g.watchTransition(renderWatch, 'axis').call(axis);\n\n            scale0 = scale0 || axis.scale();\n\n            var fmt = axis.tickFormat();\n            if (fmt == null) {\n                fmt = scale0.tickFormat();\n            }\n\n            var axisLabel = g.selectAll('text.nv-axislabel')\n                .data([axisLabelText || null]);\n            axisLabel.exit().remove();\n\n            //only skip when fontSize is undefined so it can be cleared with a null or blank string\n            if (fontSize !== undefined) {\n                g.selectAll('g').select(\"text\").style('font-size', fontSize);\n            }\n\n            var xLabelMargin;\n            var axisMaxMin;\n            var w;\n            switch (axis.orient()) {\n                case 'top':\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                  w = 0;\n                  if (scale.range().length === 1) {\n                    w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;\n                  } else if (scale.range().length === 2) {\n                    w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];\n                  } else if ( scale.range().length > 2){\n                    w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);\n                  };\n                    axisLabel\n                        .attr('text-anchor', 'middle')\n                        .attr('y', 0)\n                        .attr('x', w/2);\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')\n                        }).append('text');\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero(scale(d)) + ',0)'\n                            })\n                            .select('text')\n                            .attr('dy', '-0.5em')\n                            .attr('y', -axis.tickPadding())\n                            .attr('text-anchor', 'middle')\n                            .text(function(d,i) {\n                                var v = fmt(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max top')\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero(scale.range()[i]) + ',0)'\n                            });\n                    }\n                    break;\n                case 'bottom':\n                    xLabelMargin = axisLabelDistance + 36;\n                    var maxTextWidth = 30;\n                    var textHeight = 0;\n                    var xTicks = g.selectAll('g').select(\"text\");\n                    var rotateLabelsRule = '';\n                    if (rotateLabels%360) {\n                        //Reset transform on ticks so textHeight can be calculated correctly\n                        xTicks.attr('transform', ''); \n                        //Calculate the longest xTick width\n                        xTicks.each(function(d,i){\n                            var box = this.getBoundingClientRect();\n                            var width = box.width;\n                            textHeight = box.height;\n                            if(width > maxTextWidth) maxTextWidth = width;\n                        });\n                        rotateLabelsRule = 'rotate(' + rotateLabels + ' 0,' + (textHeight/2 + axis.tickPadding()) + ')';\n                        //Convert to radians before calculating sin. Add 30 to margin for healthy padding.\n                        var sin = Math.abs(Math.sin(rotateLabels*Math.PI/180));\n                        xLabelMargin = (sin ? sin*maxTextWidth : maxTextWidth)+30;\n                        //Rotate all xTicks\n                        xTicks\n                            .attr('transform', rotateLabelsRule)\n                            .style('text-anchor', rotateLabels%360 > 0 ? 'start' : 'end');\n                    } else {\n                        if (staggerLabels) {\n                            xTicks\n                                .attr('transform', function(d,i) {\n                                    return 'translate(0,' + (i % 2 == 0 ? '0' : '12') + ')'\n                                });\n                        } else {\n                            xTicks.attr('transform', \"translate(0,0)\");\n                        }\n                    }\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    w = 0;\n                    if (scale.range().length === 1) {\n                        w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;\n                    } else if (scale.range().length === 2) {\n                        w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];\n                    } else if ( scale.range().length > 2){\n                        w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);\n                    };\n                    axisLabel\n                        .attr('text-anchor', 'middle')\n                        .attr('y', xLabelMargin)\n                        .attr('x', w/2);\n                    if (showMaxMin) {\n                        //if (showMaxMin && !isOrdinal) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            //.data(scale.domain())\n                            .data([scale.domain()[0], scale.domain()[scale.domain().length - 1]]);\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')\n                        }).append('text');\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'\n                            })\n                            .select('text')\n                            .attr('dy', '.71em')\n                            .attr('y', axis.tickPadding())\n                            .attr('transform', rotateLabelsRule)\n                            .style('text-anchor', rotateLabels ? (rotateLabels%360 > 0 ? 'start' : 'end') : 'middle')\n                            .text(function(d,i) {\n                                var v = fmt(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max bottom')\n                            .attr('transform', function(d,i) {\n                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'\n                            });\n                    }\n\n                    break;\n                case 'right':\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    axisLabel\n                        .style('text-anchor', rotateYLabel ? 'middle' : 'begin')\n                        .attr('transform', rotateYLabel ? 'rotate(90)' : '')\n                        .attr('y', rotateYLabel ? (-Math.max(margin.right, width) + 12 - (axisLabelDistance || 0)) : -10) //TODO: consider calculating this based on largest tick width... OR at least expose this on chart\n                        .attr('x', rotateYLabel ? (d3.max(scale.range()) / 2) : axis.tickPadding());\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                       \taxisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')\n                        }).append('text')\n                            .style('opacity', 0);\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale(d)) + ')'\n                            })\n                            .select('text')\n                            .attr('dy', '.32em')\n                            .attr('y', 0)\n                            .attr('x', axis.tickPadding())\n                            .style('text-anchor', 'start')\n                            .text(function(d, i) {\n                                var v = fmt(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max right')\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'\n                            })\n                            .select('text')\n                            .style('opacity', 1);\n                    }\n                    break;\n                case 'left':\n                    /*\n                     //For dynamically placing the label. Can be used with dynamically-sized chart axis margins\n                     var yTicks = g.selectAll('g').select(\"text\");\n                     yTicks.each(function(d,i){\n                     var labelPadding = this.getBoundingClientRect().width + axis.tickPadding() + 16;\n                     if(labelPadding > width) width = labelPadding;\n                     });\n                     */\n                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');\n                    axisLabel\n                        .style('text-anchor', rotateYLabel ? 'middle' : 'end')\n                        .attr('transform', rotateYLabel ? 'rotate(-90)' : '')\n                        .attr('y', rotateYLabel ? (-Math.max(margin.left, width) + 25 - (axisLabelDistance || 0)) : -10)\n                        .attr('x', rotateYLabel ? (-d3.max(scale.range()) / 2) : -axis.tickPadding());\n                    if (showMaxMin) {\n                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')\n                            .data(scale.domain());\n                        axisMaxMin.enter().append('g').attr('class',function(d,i){\n                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')\n                        }).append('text')\n                            .style('opacity', 0);\n                        axisMaxMin.exit().remove();\n                        axisMaxMin\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale0(d)) + ')'\n                            })\n                            .select('text')\n                            .attr('dy', '.32em')\n                            .attr('y', 0)\n                            .attr('x', -axis.tickPadding())\n                            .attr('text-anchor', 'end')\n                            .text(function(d,i) {\n                                var v = fmt(d);\n                                return ('' + v).match('NaN') ? '' : v;\n                            });\n                        axisMaxMin.watchTransition(renderWatch, 'min-max right')\n                            .attr('transform', function(d,i) {\n                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'\n                            })\n                            .select('text')\n                            .style('opacity', 1);\n                    }\n                    break;\n            }\n            axisLabel.text(function(d) { return d });\n\n            if (showMaxMin && (axis.orient() === 'left' || axis.orient() === 'right')) {\n                //check if max and min overlap other values, if so, hide the values that overlap\n                g.selectAll('g') // the g's wrapping each tick\n                    .each(function(d,i) {\n                        d3.select(this).select('text').attr('opacity', 1);\n                        if (scale(d) < scale.range()[1] + 10 || scale(d) > scale.range()[0] - 10) { // 10 is assuming text height is 16... if d is 0, leave it!\n                            if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n                                d3.select(this).attr('opacity', 0);\n\n                            d3.select(this).select('text').attr('opacity', 0); // Don't remove the ZERO line!!\n                        }\n                    });\n\n                //if Max and Min = 0 only show min, Issue #281\n                if (scale.domain()[0] == scale.domain()[1] && scale.domain()[0] == 0) {\n                    wrap.selectAll('g.nv-axisMaxMin').style('opacity', function (d, i) {\n                        return !i ? 1 : 0\n                    });\n                }\n            }\n\n            if (showMaxMin && (axis.orient() === 'top' || axis.orient() === 'bottom')) {\n                var maxMinRange = [];\n                wrap.selectAll('g.nv-axisMaxMin')\n                    .each(function(d,i) {\n                        try {\n                            if (i) // i== 1, max position\n                                maxMinRange.push(scale(d) - this.getBoundingClientRect().width - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n                            else // i==0, min position\n                                maxMinRange.push(scale(d) + this.getBoundingClientRect().width + 4)\n                        }catch (err) {\n                            if (i) // i== 1, max position\n                                maxMinRange.push(scale(d) - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)\n                            else // i==0, min position\n                                maxMinRange.push(scale(d) + 4);\n                        }\n                    });\n                // the g's wrapping each tick\n                g.selectAll('g').each(function(d, i) {\n                    if (scale(d) < maxMinRange[0] || scale(d) > maxMinRange[1]) {\n                        if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL\n                            d3.select(this).remove();\n                        else\n                            d3.select(this).select('text').remove(); // Don't remove the ZERO line!!\n                    }\n                });\n            }\n\n            //Highlight zero tick line\n            g.selectAll('.tick')\n                .filter(function (d) {\n                    /*\n                    The filter needs to return only ticks at or near zero.\n                    Numbers like 0.00001 need to count as zero as well,\n                    and the arithmetic trick below solves that.\n                    */\n                    return !parseFloat(Math.round(d * 100000) / 1000000) && (d !== undefined)\n                }) \n                .classed('zero', true);\n            \n            //store old scales for use in transitions on update\n            scale0 = scale.copy();\n\n        });\n\n        renderWatch.renderEnd('axis immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.axis = axis;\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        axisLabelDistance: {get: function(){return axisLabelDistance;}, set: function(_){axisLabelDistance=_;}},\n        staggerLabels:     {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        rotateLabels:      {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        rotateYLabel:      {get: function(){return rotateYLabel;}, set: function(_){rotateYLabel=_;}},\n        showMaxMin:        {get: function(){return showMaxMin;}, set: function(_){showMaxMin=_;}},\n        axisLabel:         {get: function(){return axisLabelText;}, set: function(_){axisLabelText=_;}},\n        height:            {get: function(){return height;}, set: function(_){height=_;}},\n        ticks:             {get: function(){return ticks;}, set: function(_){ticks=_;}},\n        width:             {get: function(){return width;}, set: function(_){width=_;}},\n        fontSize:          {get: function(){return fontSize;}, set: function(_){fontSize=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top !== undefined    ? _.top    : margin.top;\n            margin.right  = _.right !== undefined  ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left !== undefined   ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration=_;\n            renderWatch.reset(duration);\n        }},\n        scale: {get: function(){return scale;}, set: function(_){\n            scale = _;\n            axis.scale(scale);\n            isOrdinal = typeof scale.rangeBands === 'function';\n            nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    nv.utils.inheritOptionsD3(chart, axis, ['orient', 'tickValues', 'tickSubdivide', 'tickSize', 'tickPadding', 'tickFormat']);\n    nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);\n\n    return chart;\n};\nnv.models.boxPlot = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0},\n        width = 960,\n        height = 500,\n        id = Math.floor(Math.random() * 10000), // Create semi-unique ID in case user doesn't select one\n        xScale = d3.scale.ordinal(),\n        yScale = d3.scale.linear(),\n        getX  = function(d) { return d.label }, // Default data model selectors.\n        getQ1 = function(d) { return d.values.Q1 },\n        getQ2 = function(d) { return d.values.Q2 },\n        getQ3 = function(d) { return d.values.Q3 },\n        getWl = function(d) { return d.values.whisker_low },\n        getWh = function(d) { return d.values.whisker_high },\n        getColor = function(d) { return d.color },\n        getOlItems  = function(d) { return d.values.outliers },\n        getOlValue = function(d, i, j) { return d },\n        getOlLabel = function(d, i, j) { return d },\n        getOlColor = function(d, i, j) { return undefined },\n        color = nv.utils.defaultColor(),\n        container = null,\n        xDomain, xRange,\n        yDomain, yRange,\n        dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd'),\n        duration = 250,\n        maxBoxWidth = null;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var xScale0, yScale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            xScale.domain(xDomain || data.map(function(d,i) { return getX(d,i); }))\n                .rangeBands(xRange || [0, availableWidth], 0.1);\n\n            // if we know yDomain, no need to calculate\n            var yData = []\n            if (!yDomain) {\n                // (y-range is based on quartiles, whiskers and outliers)\n                var values = [], yMin, yMax;\n                data.forEach(function (d, i) {\n                    var q1 = getQ1(d), q3 = getQ3(d), wl = getWl(d), wh = getWh(d);\n                    var olItems = getOlItems(d);\n                    if (olItems) {\n                        olItems.forEach(function (e, i) {\n                            values.push(getOlValue(e, i, undefined));\n                        });\n                    }\n                    if (wl) { values.push(wl) }\n                    if (q1) { values.push(q1) }\n                    if (q3) { values.push(q3) }\n                    if (wh) { values.push(wh) }\n                });\n                yMin = d3.min(values);\n                yMax = d3.max(values);\n                yData = [ yMin, yMax ] ;\n            }\n\n            yScale.domain(yDomain || yData);\n            yScale.range(yRange || [availableHeight, 0]);\n\n            //store old scales if they exist\n            xScale0 = xScale0 || xScale;\n            yScale0 = yScale0 || yScale.copy().range([yScale(0),yScale(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var boxplots = wrap.selectAll('.nv-boxplot').data(function(d) { return d });\n            var boxEnter = boxplots.enter().append('g').style('stroke-opacity', 1e-6).style('fill-opacity', 1e-6);\n            boxplots\n                .attr('class', 'nv-boxplot')\n                .attr('transform', function(d,i,j) { return 'translate(' + (xScale(getX(d,i)) + xScale.rangeBand() * 0.05) + ', 0)'; })\n                .classed('hover', function(d) { return d.hover });\n            boxplots\n                .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', 0.75)\n                .delay(function(d,i) { return i * duration / data.length })\n                .attr('transform', function(d,i) {\n                    return 'translate(' + (xScale(getX(d,i)) + xScale.rangeBand() * 0.05) + ', 0)';\n                });\n            boxplots.exit().remove();\n\n            // ----- add the SVG elements for each boxPlot -----\n\n            // conditionally append whisker lines\n            boxEnter.each(function(d,i) {\n                var box = d3.select(this);\n                [getWl, getWh].forEach(function (f) {\n                    if (f(d) !== undefined && f(d) !== null) {\n                        var key = (f === getWl) ? 'low' : 'high';\n                        box.append('line')\n                          .style('stroke', getColor(d) || color(d,i))\n                          .attr('class', 'nv-boxplot-whisker nv-boxplot-' + key);\n                        box.append('line')\n                          .style('stroke', getColor(d) || color(d,i))\n                          .attr('class', 'nv-boxplot-tick nv-boxplot-' + key);\n                    }\n                });\n            });\n\n            var box_width = function() { return (maxBoxWidth === null ? xScale.rangeBand() * 0.9 : Math.min(75, xScale.rangeBand() * 0.9)); };\n            var box_left  = function() { return xScale.rangeBand() * 0.45 - box_width()/2; };\n            var box_right = function() { return xScale.rangeBand() * 0.45 + box_width()/2; };\n\n            // update whisker lines and ticks\n            [getWl, getWh].forEach(function (f) {\n                var key = (f === getWl) ? 'low' : 'high';\n                var endpoint = (f === getWl) ? getQ1 : getQ3;\n                boxplots.select('line.nv-boxplot-whisker.nv-boxplot-' + key)\n                  .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                    .attr('x1', xScale.rangeBand() * 0.45 )\n                    .attr('y1', function(d,i) { return yScale(f(d)); })\n                    .attr('x2', xScale.rangeBand() * 0.45 )\n                    .attr('y2', function(d,i) { return yScale(endpoint(d)); });\n                boxplots.select('line.nv-boxplot-tick.nv-boxplot-' + key)\n                  .watchTransition(renderWatch, 'nv-boxplot: boxplots')\n                    .attr('x1', box_left )\n                    .attr('y1', function(d,i) { return yScale(f(d)); })\n                    .attr('x2', box_right )\n                    .attr('y2', function(d,i) { return yScale(f(d)); });\n            });\n\n            [getWl, getWh].forEach(function (f) {\n                var key = (f === getWl) ? 'low' : 'high';\n                boxEnter.selectAll('.nv-boxplot-' + key)\n                  .on('mouseover', function(d,i,j) {\n                      d3.select(this).classed('hover', true);\n                      dispatch.elementMouseover({\n                          series: { key: f(d), color: getColor(d) || color(d,j) },\n                          e: d3.event\n                      });\n                  })\n                  .on('mouseout', function(d,i,j) {\n                      d3.select(this).classed('hover', false);\n                      dispatch.elementMouseout({\n                          series: { key: f(d), color: getColor(d) || color(d,j) },\n                          e: d3.event\n                      });\n                  })\n                  .on('mousemove', function(d,i) {\n                      dispatch.elementMousemove({e: d3.event});\n                  });\n            });\n\n            // boxes\n            boxEnter.append('rect')\n                .attr('class', 'nv-boxplot-box')\n                // tooltip events\n                .on('mouseover', function(d,i) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        key: getX(d),\n                        value: getX(d),\n                        series: [\n                            { key: 'Q3', value: getQ3(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q2', value: getQ2(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q1', value: getQ1(d), color: getColor(d) || color(d,i) }\n                        ],\n                        data: d,\n                        index: i,\n                        e: d3.event\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        key: getX(d),\n                        value: getX(d),\n                        series: [\n                            { key: 'Q3', value: getQ3(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q2', value: getQ2(d), color: getColor(d) || color(d,i) },\n                            { key: 'Q1', value: getQ1(d), color: getColor(d) || color(d,i) }\n                        ],\n                        data: d,\n                        index: i,\n                        e: d3.event\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({e: d3.event});\n                });\n\n            // box transitions\n            boxplots.select('rect.nv-boxplot-box')\n              .watchTransition(renderWatch, 'nv-boxplot: boxes')\n                .attr('y', function(d,i) { return yScale(getQ3(d)); })\n                .attr('width', box_width)\n                .attr('x', box_left )\n                .attr('height', function(d,i) { return Math.abs(yScale(getQ3(d)) - yScale(getQ1(d))) || 1 })\n                .style('fill', function(d,i) { return getColor(d) || color(d,i) })\n                .style('stroke', function(d,i) { return getColor(d) || color(d,i) });\n\n            // median line\n            boxEnter.append('line').attr('class', 'nv-boxplot-median');\n\n            boxplots.select('line.nv-boxplot-median')\n              .watchTransition(renderWatch, 'nv-boxplot: boxplots line')\n                .attr('x1', box_left)\n                .attr('y1', function(d,i) { return yScale(getQ2(d)); })\n                .attr('x2', box_right)\n                .attr('y2', function(d,i) { return yScale(getQ2(d)); });\n\n            // outliers\n            var outliers = boxplots.selectAll('.nv-boxplot-outlier').data(function(d) {\n                return getOlItems(d) || [];\n            });\n            outliers.enter().append('circle')\n                .style('fill', function(d,i,j) { return getOlColor(d,i,j) || color(d,j) })\n                .style('stroke', function(d,i,j) { return getOlColor(d,i,j) || color(d,j) })\n                .style('z-index', 9000)\n                .on('mouseover', function(d,i,j) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        series: { key: getOlLabel(d,i,j), color: getOlColor(d,i,j) || color(d,j) },\n                        e: d3.event\n                    });\n                })\n                .on('mouseout', function(d,i,j) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        series: { key: getOlLabel(d,i,j), color: getOlColor(d,i,j) || color(d,j) },\n                        e: d3.event\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({e: d3.event});\n                });\n            outliers.attr('class', 'nv-boxplot-outlier');\n            outliers\n              .watchTransition(renderWatch, 'nv-boxplot: nv-boxplot-outlier')\n                .attr('cx', xScale.rangeBand() * 0.45)\n                .attr('cy', function(d,i,j) { return yScale(getOlValue(d,i,j)); })\n                .attr('r', '3');\n            outliers.exit().remove();\n\n            //store old scales for use in transitions on update\n            xScale0 = xScale.copy();\n            yScale0 = yScale.copy();\n        });\n\n        renderWatch.renderEnd('nv-boxplot immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:       {get: function(){return width;}, set: function(_){width=_;}},\n        height:      {get: function(){return height;}, set: function(_){height=_;}},\n        maxBoxWidth: {get: function(){return maxBoxWidth;}, set: function(_){maxBoxWidth=_;}},\n        x:           {get: function(){return getX;}, set: function(_){getX=_;}},\n        q1: {get: function(){return getQ1;}, set: function(_){getQ1=_;}},\n        q2: {get: function(){return getQ2;}, set: function(_){getQ2=_;}},\n        q3: {get: function(){return getQ3;}, set: function(_){getQ3=_;}},\n        wl: {get: function(){return getWl;}, set: function(_){getWl=_;}},\n        wh: {get: function(){return getWh;}, set: function(_){getWh=_;}},\n        itemColor:    {get: function(){return getColor;}, set: function(_){getColor=_;}},\n        outliers:     {get: function(){return getOlItems;}, set: function(_){getOlItems=_;}},\n        outlierValue: {get: function(){return getOlValue;}, set: function(_){getOlValue=_;}},\n        outlierLabel: {get: function(){return getOlLabel;}, set: function(_){getOlLabel=_;}},\n        outlierColor: {get: function(){return getOlColor;}, set: function(_){getOlColor=_;}},\n        xScale:  {get: function(){return xScale;}, set: function(_){xScale=_;}},\n        yScale:  {get: function(){return yScale;}, set: function(_){yScale=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        // rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},\n        y: {\n            get: function() {\n                console.warn('BoxPlot \\'y\\' chart option is deprecated. Please use model overrides instead.');\n                return {};\n            },\n            set: function(_) {\n                console.warn('BoxPlot \\'y\\' chart option is deprecated. Please use model overrides instead.');\n            }\n        },\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.boxPlotChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var boxplot = nv.models.boxPlot(),\n        xAxis = nv.models.axis(),\n        yAxis = nv.models.axis();\n\n    var margin = {top: 15, right: 10, bottom: 50, left: 60},\n        width = null,\n        height = null,\n        color = nv.utils.getColor(),\n        showXAxis = true,\n        showYAxis = true,\n        rightAlignYAxis = false,\n        staggerLabels = false,\n        tooltip = nv.models.tooltip(),\n        x, y,\n        noData = 'No Data Available.',\n        dispatch = d3.dispatch('beforeUpdate', 'renderEnd'),\n        duration = 250;\n\n    xAxis\n        .orient('bottom')\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip.duration(0);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(boxplot);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this), that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = (width  || parseInt(container.style('width')) || 960) - margin.left - margin.right;\n            var availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;\n\n            chart.update = function() {\n                dispatch.beforeUpdate();\n                container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            // TODO still need to find a way to validate quartile data presence using boxPlot callbacks.\n            // Display No Data message if there's nothing to show. (quartiles required at minimum).\n            if (!data || !data.length) {\n                var noDataText = container.selectAll('.nv-noData').data([noData]);\n\n                noDataText.enter().append('text')\n                    .attr('class', 'nvd3 nv-noData')\n                    .attr('dy', '-.7em')\n                    .style('text-anchor', 'middle');\n\n                noDataText\n                    .attr('x', margin.left + availableWidth / 2)\n                    .attr('y', margin.top + availableHeight / 2)\n                    .text(function(d) { return d });\n\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = boxplot.xScale();\n            y = boxplot.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-boxPlotWithAxes').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-boxPlotWithAxes').append('g');\n            var defsEnter = gEnter.append('defs');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select('.nv-y.nv-axis')\n                    .attr('transform', 'translate(' + availableWidth + ',0)');\n            }\n\n            // Main Chart Component(s)\n            boxplot.width(availableWidth).height(availableHeight);\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }))\n\n            barsWrap.transition().call(boxplot);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-x-label-clip-' + boxplot.id())\n                .append('rect');\n\n            g.select('#nv-x-label-clip-' + boxplot.id() + ' rect')\n                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))\n                .attr('height', 16)\n                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    .ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n                if (staggerLabels) {\n                    xTicks\n                        .selectAll('text')\n                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 === 0 ? '5' : '17') + ')' })\n                }\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    .ticks( Math.floor(availableHeight/36) ) // can't use nv.utils.calcTicksY with Object data\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select('.nv-zeroLine line')\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', y(0))\n                .attr('y2', y(0))\n            ;\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n        });\n\n        renderWatch.renderEnd('nv-boxplot chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    boxplot.dispatch.on('elementMouseover.tooltip', function(evt) {\n        tooltip.data(evt).hidden(false);\n    });\n\n    boxplot.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.data(evt).hidden(true);\n    });\n\n    boxplot.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.boxplot = boxplot;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        tooltipContent:    {get: function(){return tooltip;}, set: function(_){tooltip=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            boxplot.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            boxplot.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, boxplot);\n    nv.utils.initOptions(chart);\n\n    return chart;\n}\n\n// Chart design based on the recommendations of Stephen Few. Implementation\n// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n// http://projects.instantcognition.com/protovis/bulletchart/\n\nnv.models.bullet = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , orient = 'left' // TODO top & bottom\n        , reverse = false\n        , ranges = function(d) { return d.ranges }\n        , markers = function(d) { return d.markers ? d.markers : [] }\n        , markerLines = function(d) { return d.markerLines ? d.markerLines : [0] }\n        , measures = function(d) { return d.measures }\n        , rangeLabels = function(d) { return d.rangeLabels ? d.rangeLabels : [] }\n        , markerLabels = function(d) { return d.markerLabels ? d.markerLabels : []  }\n        , markerLineLabels = function(d) { return d.markerLineLabels ? d.markerLineLabels : []  }\n        , measureLabels = function(d) { return d.measureLabels ? d.measureLabels : []  }\n        , forceX = [0] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n        , width = 380\n        , height = 30\n        , container = null\n        , tickFormat = null\n        , color = nv.utils.getColor(['#1f77b4'])\n        , dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove')\n        , defaultRangeLabels = [\"Maximum\", \"Mean\", \"Minimum\"]\n        , legacyRangeClassNames = [\"Max\", \"Avg\", \"Min\"]\n        , duration = 1000\n        ;\n\n    function sortLabels(labels, values){\n        var lz = labels.slice();\n        labels.sort(function(a, b){\n            var iA = lz.indexOf(a);\n            var iB = lz.indexOf(b);\n            return d3.descending(values[iA], values[iB]);\n        });\n    };\n\n    function chart(selection) {\n        selection.each(function(d, i) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var rangez = ranges.call(this, d, i).slice(),\n                markerz = markers.call(this, d, i).slice(),\n                markerLinez = markerLines.call(this, d, i).slice(),\n                measurez = measures.call(this, d, i).slice(),\n                rangeLabelz = rangeLabels.call(this, d, i).slice(),\n                markerLabelz = markerLabels.call(this, d, i).slice(),\n                markerLineLabelz = markerLineLabels.call(this, d, i).slice(),\n                measureLabelz = measureLabels.call(this, d, i).slice();\n\n            // Sort labels according to their sorted values\n            sortLabels(rangeLabelz, rangez);\n            sortLabels(markerLabelz, markerz);\n            sortLabels(markerLineLabelz, markerLinez);\n            sortLabels(measureLabelz, measurez);\n\n            // sort values descending\n            rangez.sort(d3.descending);\n            markerz.sort(d3.descending);\n            markerLinez.sort(d3.descending);\n            measurez.sort(d3.descending);\n\n            // Setup Scales\n            // Compute the new x-scale.\n            var x1 = d3.scale.linear()\n                .domain( d3.extent(d3.merge([forceX, rangez])) )\n                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\n            // Retrieve the old x-scale, if this is an update.\n            var x0 = this.__chart__ || d3.scale.linear()\n                .domain([0, Infinity])\n                .range(x1.range());\n\n            // Stash the new scale.\n            this.__chart__ = x1;\n\n            var rangeMin = d3.min(rangez), //rangez[2]\n                rangeMax = d3.max(rangez), //rangez[0]\n                rangeAvg = rangez[1];\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-bullet').data([d]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bullet');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            for(var i=0,il=rangez.length; i<il; i++){\n                var rangeClassNames = 'nv-range nv-range'+i;\n                if(i <= 2){\n                    rangeClassNames = rangeClassNames + ' nv-range'+legacyRangeClassNames[i];\n                }\n                gEnter.append('rect').attr('class', rangeClassNames);\n            }\n\n            gEnter.append('rect').attr('class', 'nv-measure');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n            var xp0 = function(d) { return d < 0 ? x0(d) : x0(0) },\n                xp1 = function(d) { return d < 0 ? x1(d) : x1(0) };\n\n            for(var i=0,il=rangez.length; i<il; i++){\n                var range = rangez[i];\n                g.select('rect.nv-range'+i)\n                    .datum(range)\n                    .attr('height', availableHeight)\n                    .transition()\n                    .duration(duration)\n                    .attr('width', w1(range))\n                    .attr('x', xp1(range))\n            }\n\n            g.select('rect.nv-measure')\n                .style('fill', color)\n                .attr('height', availableHeight / 3)\n                .attr('y', availableHeight / 3)\n                .on('mouseover', function() {\n                    dispatch.elementMouseover({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mousemove', function() {\n                    dispatch.elementMousemove({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mouseout', function() {\n                    dispatch.elementMouseout({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Current',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .transition()\n                .duration(duration)\n                .attr('width', measurez < 0 ?\n                    x1(0) - x1(measurez[0])\n                    : x1(measurez[0]) - x1(0))\n                .attr('x', xp1(measurez));\n\n            var h3 =  availableHeight / 6;\n\n            var markerData = markerz.map( function(marker, index) {\n                return {value: marker, label: markerLabelz[index]}\n            });\n            gEnter\n              .selectAll(\"path.nv-markerTriangle\")\n              .data(markerData)\n              .enter()\n              .append('path')\n              .attr('class', 'nv-markerTriangle')\n              .attr('d', 'M0,' + h3 + 'L' + h3 + ',' + (-h3) + ' ' + (-h3) + ',' + (-h3) + 'Z')\n              .on('mouseover', function(d) {\n                dispatch.elementMouseover({\n                  value: d.value,\n                  label: d.label || 'Previous',\n                  color: d3.select(this).style(\"fill\"),\n                  pos: [x1(d.value), availableHeight/2]\n                })\n\n              })\n              .on('mousemove', function(d) {\n                  dispatch.elementMousemove({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              })\n              .on('mouseout', function(d, i) {\n                  dispatch.elementMouseout({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              });\n\n            g.selectAll(\"path.nv-markerTriangle\")\n              .data(markerData)\n              .transition()\n              .duration(duration)\n              .attr('transform', function(d) { return 'translate(' + x1(d.value) + ',' + (availableHeight / 2) + ')' });\n\n            var markerLinesData = markerLinez.map( function(marker, index) {\n                return {value: marker, label: markerLineLabelz[index]}\n            });\n            gEnter\n              .selectAll(\"line.nv-markerLine\")\n              .data(markerLinesData)\n              .enter()\n              .append('line')\n              .attr('cursor', '')\n              .attr('class', 'nv-markerLine')\n              .attr('x1', function(d) { return x1(d.value) })\n              .attr('y1', '2')\n              .attr('x2', function(d) { return x1(d.value) })\n              .attr('y2', availableHeight - 2)\n              .on('mouseover', function(d) {\n                dispatch.elementMouseover({\n                  value: d.value,\n                  label: d.label || 'Previous',\n                  color: d3.select(this).style(\"fill\"),\n                  pos: [x1(d.value), availableHeight/2]\n                })\n\n              })\n              .on('mousemove', function(d) {\n                  dispatch.elementMousemove({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              })\n              .on('mouseout', function(d, i) {\n                  dispatch.elementMouseout({\n                      value: d.value,\n                      label: d.label || 'Previous',\n                      color: d3.select(this).style(\"fill\")\n                  })\n              });\n\n            g.selectAll(\"line.nv-markerLine\")\n              .data(markerLinesData)\n              .transition()\n              .duration(duration)\n              .attr('x1', function(d) { return x1(d.value) })\n              .attr('x2', function(d) { return x1(d.value) });\n\n            wrap.selectAll('.nv-range')\n                .on('mouseover', function(d,i) {\n                    var label = rangeLabelz[i] || defaultRangeLabels[i];\n                    dispatch.elementMouseover({\n                        value: d,\n                        label: label,\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mousemove', function() {\n                    dispatch.elementMousemove({\n                        value: measurez[0],\n                        label: measureLabelz[0] || 'Previous',\n                        color: d3.select(this).style(\"fill\")\n                    })\n                })\n                .on('mouseout', function(d,i) {\n                    var label = rangeLabelz[i] || defaultRangeLabels[i];\n                    dispatch.elementMouseout({\n                        value: d,\n                        label: label,\n                        color: d3.select(this).style(\"fill\")\n                    })\n                });\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)\n        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)\n        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)\n        forceX:      {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},\n        duration:    {get: function(){return duration;}, set: function(_){duration=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom\n            orient = _;\n            reverse = orient == 'right' || orient == 'bottom';\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\n\n\n// Chart design based on the recommendations of Stephen Few. Implementation\n// based on the work of Clint Ivy, Jamie Love, and Jason Davies.\n// http://projects.instantcognition.com/protovis/bulletchart/\nnv.models.bulletChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var bullet = nv.models.bullet();\n    var tooltip = nv.models.tooltip();\n\n    var orient = 'left' // TODO top & bottom\n        , reverse = false\n        , margin = {top: 5, right: 40, bottom: 20, left: 120}\n        , ranges = function(d) { return d.ranges }\n        , markers = function(d) { return d.markers ? d.markers : [] }\n        , measures = function(d) { return d.measures }\n        , width = null\n        , height = 55\n        , tickFormat = null\n        , ticks = null\n        , noData = null\n        , dispatch = d3.dispatch()\n        ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false);\n\n    function chart(selection) {\n        selection.each(function(d, i) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = height - margin.top - margin.bottom,\n                that = this;\n\n            chart.update = function() { chart(selection) };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!d || !ranges.call(this, d, i)) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var rangez = ranges.call(this, d, i).slice().sort(d3.descending),\n                markerz = markers.call(this, d, i).slice().sort(d3.descending),\n                measurez = measures.call(this, d, i).slice().sort(d3.descending);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-bulletChart').data([d]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bulletChart');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-bulletWrap');\n            gEnter.append('g').attr('class', 'nv-titles');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Compute the new x-scale.\n            var x1 = d3.scale.linear()\n                .domain([0, Math.max(rangez[0], (markerz[0] || 0), measurez[0])])  // TODO: need to allow forceX and forceY, and xDomain, yDomain\n                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);\n\n            // Retrieve the old x-scale, if this is an update.\n            var x0 = this.__chart__ || d3.scale.linear()\n                .domain([0, Infinity])\n                .range(x1.range());\n\n            // Stash the new scale.\n            this.__chart__ = x1;\n\n            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)\n                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };\n\n            var title = gEnter.select('.nv-titles').append('g')\n                .attr('text-anchor', 'end')\n                .attr('transform', 'translate(-6,' + (height - margin.top - margin.bottom) / 2 + ')');\n            title.append('text')\n                .attr('class', 'nv-title')\n                .text(function(d) { return d.title; });\n\n            title.append('text')\n                .attr('class', 'nv-subtitle')\n                .attr('dy', '1em')\n                .text(function(d) { return d.subtitle; });\n\n            bullet\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var bulletWrap = g.select('.nv-bulletWrap');\n            d3.transition(bulletWrap).call(bullet);\n\n            // Compute the tick format.\n            var format = tickFormat || x1.tickFormat( availableWidth / 100 );\n\n            // Update the tick groups.\n            var tick = g.selectAll('g.nv-tick')\n                .data(x1.ticks( ticks ? ticks : (availableWidth / 50) ), function(d) {\n                    return this.textContent || format(d);\n                });\n\n            // Initialize the ticks with the old scale, x0.\n            var tickEnter = tick.enter().append('g')\n                .attr('class', 'nv-tick')\n                .attr('transform', function(d) { return 'translate(' + x0(d) + ',0)' })\n                .style('opacity', 1e-6);\n\n            tickEnter.append('line')\n                .attr('y1', availableHeight)\n                .attr('y2', availableHeight * 7 / 6);\n\n            tickEnter.append('text')\n                .attr('text-anchor', 'middle')\n                .attr('dy', '1em')\n                .attr('y', availableHeight * 7 / 6)\n                .text(format);\n\n            // Transition the updating ticks to the new scale, x1.\n            var tickUpdate = d3.transition(tick)\n                .transition()\n                .duration(bullet.duration())\n                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n                .style('opacity', 1);\n\n            tickUpdate.select('line')\n                .attr('y1', availableHeight)\n                .attr('y2', availableHeight * 7 / 6);\n\n            tickUpdate.select('text')\n                .attr('y', availableHeight * 7 / 6);\n\n            // Transition the exiting ticks to the new scale, x1.\n            d3.transition(tick.exit())\n                .transition()\n                .duration(bullet.duration())\n                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })\n                .style('opacity', 1e-6)\n                .remove();\n        });\n\n        d3.timer.flush();\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    bullet.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: evt.label,\n            value: evt.value,\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    bullet.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bullet.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.bullet = bullet;\n    chart.dispatch = dispatch;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)\n        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)\n        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},\n        ticks:    {get: function(){return ticks;}, set: function(_){ticks=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom\n            orient = _;\n            reverse = orient == 'right' || orient == 'bottom';\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, bullet);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\n\n\nnv.models.candlestickBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getOpen = function(d) { return d.open }\n        , getClose = function(d) { return d.close }\n        , getHigh = function(d) { return d.high }\n        , getLow = function(d) { return d.low }\n        , forceX = []\n        , forceY = []\n        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , interactive = false\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // Width of the candlestick bars.\n            var barWidth = (availableWidth / data[0].values.length) * .45;\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [5 + barWidth / 2, availableWidth - barWidth / 2 - 5]);\n\n            y.domain(yDomain || [\n                    d3.min(data[0].values.map(getLow).concat(forceY)),\n                    d3.max(data[0].values.map(getHigh).concat(forceY))\n                ]\n            ).range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-candlestickBar').data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-candlestickBar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-ticks');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')\n                .data(function(d) { return d });\n            ticks.exit().remove();\n\n            var tickGroups = ticks.enter().append('g');\n\n            // The colors are currently controlled by CSS.\n            ticks\n                .attr('class', function(d, i, j) { return (getOpen(d, i) > getClose(d, i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i});\n\n            var lines = tickGroups.append('line')\n                .attr('class', 'nv-candlestick-lines')\n                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })\n                .attr('x1', 0)\n                .attr('y1', function(d, i) { return y(getHigh(d, i)); })\n                .attr('x2', 0)\n                .attr('y2', function(d, i) { return y(getLow(d, i)); });\n\n            var rects = tickGroups.append('rect')\n                .attr('class', 'nv-candlestick-rects nv-bars')\n                .attr('transform', function(d, i) {\n                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','\n                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))\n                    + ')';\n                })\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('width', barWidth)\n                .attr('height', function(d, i) {\n                    var open = getOpen(d, i);\n                    var close = getClose(d, i);\n                    return open > close ? y(close) - y(open) : y(open) - y(close);\n                });\n\n            ticks.select('.nv-candlestick-lines').transition()\n                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })\n                .attr('x1', 0)\n                .attr('y1', function(d, i) { return y(getHigh(d, i)); })\n                .attr('x2', 0)\n                .attr('y2', function(d, i) { return y(getLow(d, i)); });\n\n            ticks.select('.nv-candlestick-rects').transition()\n                .attr('transform', function(d, i) {\n                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','\n                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))\n                    + ')';\n                })\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('width', barWidth)\n                .attr('height', function(d, i) {\n                    var open = getOpen(d, i);\n                    var close = getClose(d, i);\n                    return open > close ? y(close) - y(open) : y(open) - y(close);\n                });\n        });\n\n        return chart;\n    }\n\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        chart.clearHighlights();\n        container.select(\".nv-candlestickBar .nv-tick-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container.select(\".nv-candlestickBar .nv-tick.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:   {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:   {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:   {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:       {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        x:     {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:     {get: function(){return getY;}, set: function(_){getY=_;}},\n        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},\n        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},\n        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},\n        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.cumulativeLineChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 30, bottom: 50, left: 60}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = true\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , showControls = true\n        , useInteractiveGuideline = false\n        , rescaleY = true\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , id = lines.id()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , average = function(d) { return d.average }\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , transitionDuration = 250\n        , duration = 250\n        , noErrorCheck = false  //if set to TRUE, will bypass an error check in the indexify function.\n        ;\n\n    state.index = 0;\n    state.rescaleY = rescaleY;\n\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');\n\n    tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var dx = d3.scale.linear()\n        , index = {i: 0, x: 0}\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        ;\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                index: index.i,\n                rescaleY: rescaleY\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.index !== undefined)\n                index.i = state.index;\n            if (state.rescaleY !== undefined)\n                rescaleY = state.rescaleY;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(lines);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            container.classed('nv-chart-' + id, true);\n            var that = this;\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition().duration(duration).call(chart)\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            var indexDrag = d3.behavior.drag()\n                .on('dragstart', dragStart)\n                .on('drag', dragMove)\n                .on('dragend', dragEnd);\n\n\n            function dragStart(d,i) {\n                d3.select(chart.container)\n                    .style('cursor', 'ew-resize');\n            }\n\n            function dragMove(d,i) {\n                index.x = d3.event.x;\n                index.i = Math.round(dx.invert(index.x));\n                updateZero();\n            }\n\n            function dragEnd(d,i) {\n                d3.select(chart.container)\n                    .style('cursor', 'auto');\n\n                // update state and send stateChange with new index\n                state.index = index.i;\n                dispatch.stateChange(state);\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = lines.xScale();\n            y = lines.yScale();\n\n            if (!rescaleY) {\n                var seriesDomains = data\n                    .filter(function(series) { return !series.disabled })\n                    .map(function(series,i) {\n                        var initialDomain = d3.extent(series.values, lines.y());\n\n                        //account for series being disabled when losing 95% or more\n                        if (initialDomain[0] < -.95) initialDomain[0] = -.95;\n\n                        return [\n                                (initialDomain[0] - initialDomain[1]) / (1 + initialDomain[1]),\n                                (initialDomain[1] - initialDomain[0]) / (1 + initialDomain[0])\n                        ];\n                    });\n\n                var completeDomain = [\n                    d3.min(seriesDomains, function(d) { return d[0] }),\n                    d3.max(seriesDomains, function(d) { return d[1] })\n                ];\n\n                lines.yDomain(completeDomain);\n            } else {\n                lines.yDomain(null);\n            }\n\n            dx.domain([0, data[0].values.length - 1]) //Assumes all series have same length\n                .range([0, availableWidth])\n                .clamp(true);\n\n            var data = indexify(index.i, data);\n\n            // Setup containers and skeleton of chart\n            var interactivePointerEvents = (useInteractiveGuideline) ? \"none\" : \"all\";\n            var wrap = container.selectAll('g.nv-wrap.nv-cumulativeLine').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-cumulativeLine').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-interactive');\n            gEnter.append('g').attr('class', 'nv-x nv-axis').style(\"pointer-events\",\"none\");\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-background');\n            gEnter.append('g').attr('class', 'nv-linesWrap').style(\"pointer-events\",interactivePointerEvents);\n            gEnter.append('g').attr('class', 'nv-avgLinesWrap').style(\"pointer-events\",\"none\");\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: 'Re-scale y-axis', disabled: !rescaleY }\n                ];\n\n                controls\n                    .width(140)\n                    .color(['#444', '#444', '#444'])\n                    .rightAlign(false)\n                    .margin({top: 5, right: 0, bottom: 5, left: 20})\n                ;\n\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n                    .call(controls);\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Show error if series goes below 100%\n            var tempDisabled = data.filter(function(d) { return d.tempDisabled });\n\n            wrap.select('.tempDisabled').remove(); //clean-up and prevent duplicates\n            if (tempDisabled.length) {\n                wrap.append('text').attr('class', 'tempDisabled')\n                    .attr('x', availableWidth / 2)\n                    .attr('y', '-.71em')\n                    .style('text-anchor', 'end')\n                    .text(tempDisabled.map(function(d) { return d.key }).join(', ') + ' values cannot be calculated for this time period.');\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left,top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            gEnter.select('.nv-background')\n                .append('rect');\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            lines\n                //.x(function(d) { return d.x })\n                .y(function(d) { return d.display.y })\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled && !data[i].tempDisabled; }));\n\n            var linesWrap = g.select('.nv-linesWrap')\n                .datum(data.filter(function(d) { return  !d.disabled && !d.tempDisabled }));\n\n            linesWrap.call(lines);\n\n            //Store a series index number in the data array.\n            data.forEach(function(d,i) {\n                d.seriesIndex = i;\n            });\n\n            var avgLineData = data.filter(function(d) {\n                return !d.disabled && !!average(d);\n            });\n\n            var avgLines = g.select(\".nv-avgLinesWrap\").selectAll(\"line\")\n                .data(avgLineData, function(d) { return d.key; });\n\n            var getAvgLineY = function(d) {\n                //If average lines go off the svg element, clamp them to the svg bounds.\n                var yVal = y(average(d));\n                if (yVal < 0) return 0;\n                if (yVal > availableHeight) return availableHeight;\n                return yVal;\n            };\n\n            avgLines.enter()\n                .append('line')\n                .style('stroke-width',2)\n                .style('stroke-dasharray','10,10')\n                .style('stroke',function (d,i) {\n                    return lines.color()(d,d.seriesIndex);\n                })\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', getAvgLineY)\n                .attr('y2', getAvgLineY);\n\n            avgLines\n                .style('stroke-opacity',function(d){\n                    //If average lines go offscreen, make them transparent\n                    var yVal = y(average(d));\n                    if (yVal < 0 || yVal > availableHeight) return 0;\n                    return 1;\n                })\n                .attr('x1',0)\n                .attr('x2',availableWidth)\n                .attr('y1', getAvgLineY)\n                .attr('y2', getAvgLineY);\n\n            avgLines.exit().remove();\n\n            //Create index line\n            var indexLine = linesWrap.selectAll('.nv-indexLine')\n                .data([index]);\n            indexLine.enter().append('rect').attr('class', 'nv-indexLine')\n                .attr('width', 3)\n                .attr('x', -2)\n                .attr('fill', 'red')\n                .attr('fill-opacity', .5)\n                .style(\"pointer-events\",\"all\")\n                .call(indexDrag);\n\n            indexLine\n                .attr('transform', function(d) { return 'translate(' + dx(d.i) + ',0)' })\n                .attr('height', availableHeight);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/70, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            function updateZero() {\n                indexLine\n                    .data([index]);\n\n                //When dragging the index line, turn off line transitions.\n                // Then turn them back on when done dragging.\n                var oldDuration = chart.duration();\n                chart.duration(0);\n                chart.update();\n                chart.duration(oldDuration);\n            }\n\n            g.select('.nv-background rect')\n                .on('click', function() {\n                    index.x = d3.mouse(this)[0];\n                    index.i = Math.round(dx.invert(index.x));\n\n                    // update state and send stateChange with new index\n                    state.index = index.i;\n                    dispatch.stateChange(state);\n\n                    updateZero();\n                });\n\n            lines.dispatch.on('elementClick', function(e) {\n                index.i = e.pointIndex;\n                index.x = dx(index.i);\n\n                // update state and send stateChange with new index\n                state.index = index.i;\n                dispatch.stateChange(state);\n\n                updateZero();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                d.disabled = !d.disabled;\n                rescaleY = !d.disabled;\n\n                state.rescaleY = rescaleY;\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                lines.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        lines.highlightPoint(i, pointIndex, true);\n                        var point = series.values[pointIndex];\n                        if (typeof point === 'undefined') return;\n                        if (typeof singlePoint === 'undefined') singlePoint = point;\n                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: chart.y()(point, pointIndex),\n                            color: color(series,series.seriesIndex)\n                        });\n                    });\n\n                //Highlight the tooltip entry based on which point the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n                    var threshold = 0.03 * domainExtent;\n                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value}),yValue,threshold);\n                    if (indexToHighlight !== null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex), pointIndex);\n                interactiveLayer.tooltip\n                    .valueFormatter(function(d,i) {\n                        return yAxis.tickFormat()(d);\n                    })\n                    .data(\n                    {\n                        value: xValue,\n                        series: allData\n                    }\n                )();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                lines.clearHighlights();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.index !== 'undefined') {\n                    index.i = e.index;\n                    index.x = dx(index.i);\n\n                    state.index = e.index;\n\n                    indexLine\n                        .data([index]);\n                }\n\n                if (typeof e.rescaleY !== 'undefined') {\n                    rescaleY = e.rescaleY;\n                }\n\n                chart.update();\n            });\n\n        });\n\n        renderWatch.renderEnd('cumulativeLineChart immediate');\n\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        var point = {\n            x: chart.x()(evt.point),\n            y: chart.y()(evt.point),\n            color: evt.point.color\n        };\n        evt.point = point;\n        tooltip.data(evt).hidden(false);\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n\n    //============================================================\n    // Functions\n    //------------------------------------------------------------\n\n    var indexifyYGetter = null;\n    /* Normalize the data according to an index point. */\n    function indexify(idx, data) {\n        if (!indexifyYGetter) indexifyYGetter = lines.y();\n        return data.map(function(line, i) {\n            if (!line.values) {\n                return line;\n            }\n            var indexValue = line.values[idx];\n            if (indexValue == null) {\n                return line;\n            }\n            var v = indexifyYGetter(indexValue, idx);\n\n            //TODO: implement check below, and disable series if series loses 100% or more cause divide by 0 issue\n            if (v < -.95 && !noErrorCheck) {\n                //if a series loses more than 100%, calculations fail.. anything close can cause major distortion (but is mathematically correct till it hits 100)\n\n                line.tempDisabled = true;\n                return line;\n            }\n\n            line.tempDisabled = false;\n\n            line.values = line.values.map(function(point, pointIndex) {\n                point.display = {'y': (indexifyYGetter(point, pointIndex) - v) / (1 + v) };\n                return point;\n            });\n\n            return line;\n        })\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.lines = lines;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.state = state;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        rescaleY:     {get: function(){return rescaleY;}, set: function(_){rescaleY=_;}},\n        showControls:     {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        average: {get: function(){return average;}, set: function(_){average=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        showXAxis:    {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        noErrorCheck:    {get: function(){return noErrorCheck;}, set: function(_){noErrorCheck=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (_ === true) {\n                chart.interactive(false);\n                chart.useVoronoi(false);\n            }\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        duration:    {get: function(){return duration;}, set: function(_){\n            duration = _;\n            lines.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n//TODO: consider deprecating by adding necessary features to multiBar model\nnv.models.discreteBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , color = nv.utils.defaultColor()\n        , showValues = false\n        , valueFormat = d3.format(',.2f')\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        , rectClass = 'discreteBar'\n        , duration = 250\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            //add series index to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                });\n            });\n\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0 }\n                    })\n                });\n\n            x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableWidth], .1);\n            y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y }).concat(forceY)));\n\n            // If showValues, pad the Y axis range to account for label height\n            if (showValues) y.range(yRange || [availableHeight - (y.domain()[0] < 0 ? 12 : 0), y.domain()[1] > 0 ? 12 : 0]);\n            else y.range(yRange || [availableHeight, 0]);\n\n            //store old scales if they exist\n            x0 = x0 || x;\n            y0 = y0 || y.copy().range([y(0),y(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-discretebar').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discretebar');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            //TODO: by definition, the discrete bar should not have multiple groups, will modify/remove later\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit()\n                .watchTransition(renderWatch, 'discreteBar: exit groups')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6)\n                .remove();\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover });\n            groups\n                .watchTransition(renderWatch, 'discreteBar: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', .75);\n\n            var bars = groups.selectAll('g.nv-bar')\n                .data(function(d) { return d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('g')\n                .attr('transform', function(d,i,j) {\n                    return 'translate(' + (x(getX(d,i)) + x.rangeBand() * .05 ) + ', ' + y(0) + ')'\n                })\n                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            barsEnter.append('rect')\n                .attr('height', 0)\n                .attr('width', x.rangeBand() * .9 / data.length )\n\n            if (showValues) {\n                barsEnter.append('text')\n                    .attr('text-anchor', 'middle')\n                ;\n\n                bars.select('text')\n                    .text(function(d,i) { return valueFormat(getY(d,i)) })\n                    .watchTransition(renderWatch, 'discreteBar: bars text')\n                    .attr('x', x.rangeBand() * .9 / 2)\n                    .attr('y', function(d,i) { return getY(d,i) < 0 ? y(getY(d,i)) - y(0) + 12 : -4 })\n\n                ;\n            } else {\n                bars.selectAll('text').remove();\n            }\n\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive' })\n                .style('fill', function(d,i) { return d.color || color(d,i) })\n                .style('stroke', function(d,i) { return d.color || color(d,i) })\n                .select('rect')\n                .attr('class', rectClass)\n                .watchTransition(renderWatch, 'discreteBar: bars rect')\n                .attr('width', x.rangeBand() * .9 / data.length);\n            bars.watchTransition(renderWatch, 'discreteBar: bars')\n                //.delay(function(d,i) { return i * 1200 / data[0].values.length })\n                .attr('transform', function(d,i) {\n                    var left = x(getX(d,i)) + x.rangeBand() * .05,\n                        top = getY(d,i) < 0 ?\n                            y(0) :\n                                y(0) - y(getY(d,i)) < 1 ?\n                            y(0) - 1 : //make 1 px positive bars show up above y=0\n                            y(getY(d,i));\n\n                    return 'translate(' + left + ', ' + top + ')'\n                })\n                .select('rect')\n                .attr('height', function(d,i) {\n                    return  Math.max(Math.abs(y(getY(d,i)) - y(0)), 1)\n                });\n\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('discreteBar immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.discreteBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var discretebar = nv.models.discreteBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n\t, legend = nv.models.legend()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 15, right: 10, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.getColor()\n\t, showLegend = false\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , staggerLabels = false\n        , wrapLabels = false\n        , rotateLabels = 0\n        , x\n        , y\n        , noData = null\n        , dispatch = d3.dispatch('beforeUpdate','renderEnd')\n        , duration = 250\n        ;\n\n    xAxis\n        .orient('bottom')\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .keyFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(discretebar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                dispatch.beforeUpdate();\n                container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = discretebar.xScale();\n            y = discretebar.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-discreteBarWithAxes').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discreteBarWithAxes').append('g');\n            var defsEnter = gEnter.append('defs');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n\t    gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Main Chart Component(s)\n            discretebar\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.transition().call(discretebar);\n\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-x-label-clip-' + discretebar.id())\n                .append('rect');\n\n            g.select('#nv-x-label-clip-' + discretebar.id() + ' rect')\n                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))\n                .attr('height', 16)\n                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + (y.range()[0] + ((discretebar.showValues() && y.domain()[0] < 0) ? 16 : 0)) + ')');\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n                if (staggerLabels) {\n                    xTicks\n                        .selectAll('text')\n                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 == 0 ? '5' : '17') + ')' })\n                }\n\n                if (rotateLabels) {\n                    xTicks\n                        .selectAll('.tick text')\n                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')\n                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');\n                }\n\n                if (wrapLabels) {\n                    g.selectAll('.tick text')\n                        .call(nv.utils.wrapTicks, chart.xAxis.rangeBand())\n                }\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select(\".nv-zeroLine line\")\n                .attr(\"x1\",0)\n                .attr(\"x2\",(rightAlignYAxis) ? -availableWidth : availableWidth)\n                .attr(\"y1\", y(0))\n                .attr(\"y2\", y(0))\n            ;\n        });\n\n        renderWatch.renderEnd('discreteBar chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    discretebar.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    discretebar.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    discretebar.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.discretebar = discretebar;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n\tshowLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        rotateLabels:  {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        wrapLabels:  {get: function(){return wrapLabels;}, set: function(_){wrapLabels=!!_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            discretebar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            discretebar.color(color);\n\t    legend.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, discretebar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n}\n\nnv.models.distribution = function() {\n    \"use strict\";\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 400 //technically width or height depending on x or y....\n        , size = 8\n        , axis = 'x' // 'x' or 'y'... horizontal or vertical\n        , getData = function(d) { return d[axis] }  // defaults d.x or d.y\n        , color = nv.utils.defaultColor()\n        , scale = d3.scale.linear()\n        , domain\n        , duration = 250\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n\n    //============================================================\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var scale0;\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    //============================================================\n\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableLength = width - (axis === 'x' ? margin.left + margin.right : margin.top + margin.bottom),\n                naxis = axis == 'x' ? 'y' : 'x',\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            //------------------------------------------------------------\n            // Setup Scales\n\n            scale0 = scale0 || scale;\n\n            //------------------------------------------------------------\n\n\n            //------------------------------------------------------------\n            // Setup containers and skeleton of chart\n\n            var wrap = container.selectAll('g.nv-distribution').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-distribution');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n            //------------------------------------------------------------\n\n\n            var distWrap = g.selectAll('g.nv-dist')\n                .data(function(d) { return d }, function(d) { return d.key });\n\n            distWrap.enter().append('g');\n            distWrap\n                .attr('class', function(d,i) { return 'nv-dist nv-series-' + i })\n                .style('stroke', function(d,i) { return color(d, i) });\n\n            var dist = distWrap.selectAll('line.nv-dist' + axis)\n                .data(function(d) { return d.values })\n            dist.enter().append('line')\n                .attr(axis + '1', function(d,i) { return scale0(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale0(getData(d,i)) })\n            renderWatch.transition(distWrap.exit().selectAll('line.nv-dist' + axis), 'dist exit')\n                // .transition()\n                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n                .style('stroke-opacity', 0)\n                .remove();\n            dist\n                .attr('class', function(d,i) { return 'nv-dist' + axis + ' nv-dist' + axis + '-' + i })\n                .attr(naxis + '1', 0)\n                .attr(naxis + '2', size);\n            renderWatch.transition(dist, 'dist')\n                // .transition()\n                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })\n                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })\n\n\n            scale0 = scale.copy();\n\n        });\n        renderWatch.renderEnd('distribution immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart.dispatch = dispatch;\n\n    chart.margin = function(_) {\n        if (!arguments.length) return margin;\n        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n        margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n        margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        return chart;\n    };\n\n    chart.width = function(_) {\n        if (!arguments.length) return width;\n        width = _;\n        return chart;\n    };\n\n    chart.axis = function(_) {\n        if (!arguments.length) return axis;\n        axis = _;\n        return chart;\n    };\n\n    chart.size = function(_) {\n        if (!arguments.length) return size;\n        size = _;\n        return chart;\n    };\n\n    chart.getData = function(_) {\n        if (!arguments.length) return getData;\n        getData = d3.functor(_);\n        return chart;\n    };\n\n    chart.scale = function(_) {\n        if (!arguments.length) return scale;\n        scale = _;\n        return chart;\n    };\n\n    chart.color = function(_) {\n        if (!arguments.length) return color;\n        color = nv.utils.getColor(_);\n        return chart;\n    };\n\n    chart.duration = function(_) {\n        if (!arguments.length) return duration;\n        duration = _;\n        renderWatch.reset(duration);\n        return chart;\n    };\n    //============================================================\n\n\n    return chart;\n}\nnv.models.focus = function(content) {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var content = content || nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , brush = d3.svg.brush()\n        ;\n\n    var margin = {top: 10, right: 0, bottom: 30, left: 0}\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = 70\n        , showXAxis = true\n        , showYAxis = false\n        , rightAlignYAxis = false\n        , ticks = null\n        , x\n        , y\n        , brushExtent = null\n        , duration = 250\n        , dispatch = d3.dispatch('brush', 'onBrush', 'renderEnd')\n        , syncBrushing = true\n        ;\n\n    content.interactive(false);\n    content.pointActive(function(d) { return false; });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(content);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = height - margin.top - margin.bottom;\n\n            chart.update = function() { \n                if( duration === 0 ) {\n                    container.call( chart );\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = this;\n\n            // Setup Scales\n            x = content.xScale();\n            y = content.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-focus').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-focus').append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            gEnter.append('g').attr('class', 'nv-background').append('rect');\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-contentWrap');\n            gEnter.append('g').attr('class', 'nv-brushBackground');\n            gEnter.append('g').attr('class', 'nv-x nv-brush');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n                \n            content\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var contentWrap = g.select('.nv-contentWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n            d3.transition(contentWrap).call(content);\n            \n            // Setup Brush\n            brush\n                .x(x)\n                .on('brush', function() {\n                    onBrush(syncBrushing);\n                });\n\n            brush.on('brushend', function () {\n                if (!syncBrushing) {\n                    dispatch.onBrush(brush.empty() ? x.domain() : brush.extent());\n                }\n            });\n\n            if (brushExtent) brush.extent(brushExtent);\n\n            var brushBG = g.select('.nv-brushBackground').selectAll('g')\n                .data([brushExtent || brush.extent()]);\n    \n            var brushBGenter = brushBG.enter()\n                .append('g');\n\n            brushBGenter.append('rect')\n                .attr('class', 'left')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight);\n\n            brushBGenter.append('rect')\n                .attr('class', 'right')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight);\n\n            var gBrush = g.select('.nv-x.nv-brush')\n                .call(brush);\n            gBrush.selectAll('rect')\n                .attr('height', availableHeight);\n            gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\n            onBrush(true);\n\n            g.select('.nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            if (showXAxis) {\n                xAxis.scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n  \n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                d3.transition(g.select('.nv-x.nv-axis'))\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                d3.transition(g.select('.nv-y.nv-axis'))\n                    .call(yAxis);\n            }\n            \n            g.select('.nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + y.range()[0] + ')');\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n    \n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight / 3;\n                return 'M' + (0.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n    \n    \n            function updateBrushBG() {\n                if (!brush.empty()) brush.extent(brushExtent);\n                brushBG\n                    .data([brush.empty() ? x.domain() : brushExtent])\n                    .each(function(d,i) {\n                        var leftWidth = x(d[0]) - x.range()[0],\n                            rightWidth = availableWidth - x(d[1]);\n                        d3.select(this).select('.left')\n                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n    \n                        d3.select(this).select('.right')\n                            .attr('x', x(d[1]))\n                            .attr('width', rightWidth < 0 ? 0 : rightWidth);\n                    });\n            }\n\n\n            function onBrush(shouldDispatch) {\n                brushExtent = brush.empty() ? null : brush.extent();\n                var extent = brush.empty() ? x.domain() : brush.extent();\n                dispatch.brush({extent: extent, brush: brush});\n                updateBrushBG();\n                if (shouldDispatch) {\n                    dispatch.onBrush(extent);\n                }\n            }\n        });\n\n        renderWatch.renderEnd('focus immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.content = content;\n    chart.brush = brush;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        brushExtent: {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},\n        syncBrushing: {get: function(){return syncBrushing;}, set: function(_){syncBrushing=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            content.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            content.color(color);\n        }},\n        interpolate: {get: function(){return content.interpolate();}, set: function(_){\n            content.interpolate(_);\n        }},\n        xTickFormat: {get: function(){return xAxis.tickFormat();}, set: function(_){\n            xAxis.tickFormat(_);\n        }},\n        yTickFormat: {get: function(){return yAxis.tickFormat();}, set: function(_){\n            yAxis.tickFormat(_);\n        }},\n        x: {get: function(){return content.x();}, set: function(_){\n            content.x(_);\n        }},\n        y: {get: function(){return content.y();}, set: function(_){\n            content.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, content);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.forceDirectedGraph = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n    var margin = {top: 2, right: 0, bottom: 2, left: 0}\n        , width = 400\n        , height = 32\n        , container = null\n        , dispatch = d3.dispatch('renderEnd')\n        , color = nv.utils.getColor(['#000'])\n        , tooltip      = nv.models.tooltip()\n        , noData = null\n        // Force directed graph specific parameters [default values]\n        , linkStrength = 0.1\n        , friction = 0.9\n        , linkDist = 30\n        , charge = -120\n        , gravity = 0.1\n        , theta = 0.8\n        , alpha = 0.1\n        , radius = 5\n        // These functions allow to add extra attributes to ndes and links\n        ,nodeExtras = function(nodes) { /* Do nothing */ }\n        ,linkExtras = function(links) { /* Do nothing */ }\n        ;\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n\n        selection.each(function(data) {\n          container = d3.select(this);\n          nv.utils.initSVG(container);\n\n          var availableWidth = nv.utils.availableWidth(width, container, margin),\n              availableHeight = nv.utils.availableHeight(height, container, margin);\n\n          container\n                  .attr(\"width\", availableWidth)\n                  .attr(\"height\", availableHeight);\n\n          // Display No Data message if there's nothing to show.\n          if (!data || !data.links || !data.nodes) {\n              nv.utils.noData(chart, container)\n              return chart;\n          } else {\n              container.selectAll('.nv-noData').remove();\n          }\n          container.selectAll('*').remove();\n\n          // Collect names of all fields in the nodes\n          var nodeFieldSet = new Set();\n          data.nodes.forEach(function(node) {\n            var keys = Object.keys(node);\n            keys.forEach(function(key) {\n              nodeFieldSet.add(key);\n            });\n          });\n\n          var force = d3.layout.force()\n                .nodes(data.nodes)\n                .links(data.links)\n                .size([availableWidth, availableHeight])\n                .linkStrength(linkStrength)\n                .friction(friction)\n                .linkDistance(linkDist)\n                .charge(charge)\n                .gravity(gravity)\n                .theta(theta)\n                .alpha(alpha)\n                .start();\n\n          var link = container.selectAll(\".link\")\n                .data(data.links)\n                .enter().append(\"line\")\n                .attr(\"class\", \"nv-force-link\")\n                .style(\"stroke-width\", function(d) { return Math.sqrt(d.value); });\n\n          var node = container.selectAll(\".node\")\n                .data(data.nodes)\n                .enter()\n                .append(\"g\")\n                .attr(\"class\", \"nv-force-node\")\n                .call(force.drag);\n\n          node\n            .append(\"circle\")\n            .attr(\"r\", radius)\n            .style(\"fill\", function(d) { return color(d) } )\n            .on(\"mouseover\", function(evt) {\n              container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                  .attr('y1', evt.py);\n              container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                  .attr('x2', evt.px);\n\n              // Add 'series' object to\n              var nodeColor = color(evt);\n              evt.series = [];\n              nodeFieldSet.forEach(function(field) {\n                evt.series.push({\n                  color: nodeColor,\n                  key:   field,\n                  value: evt[field]\n                });\n              });\n              tooltip.data(evt).hidden(false);\n            })\n            .on(\"mouseout\",  function(d) {\n              tooltip.hidden(true);\n            });\n\n          tooltip.headerFormatter(function(d) {return \"Node\";});\n\n          // Apply extra attributes to nodes and links (if any)\n          linkExtras(link);\n          nodeExtras(node);\n\n          force.on(\"tick\", function() {\n              link.attr(\"x1\", function(d) { return d.source.x; })\n                  .attr(\"y1\", function(d) { return d.source.y; })\n                  .attr(\"x2\", function(d) { return d.target.x; })\n                  .attr(\"y2\", function(d) { return d.target.y; });\n\n              node.attr(\"transform\", function(d) {\n                return \"translate(\" + d.x + \", \" + d.y + \")\";\n              });\n            });\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:     {get: function(){return width;}, set: function(_){width=_;}},\n        height:    {get: function(){return height;}, set: function(_){height=_;}},\n\n        // Force directed graph specific parameters\n        linkStrength:{get: function(){return linkStrength;}, set: function(_){linkStrength=_;}},\n        friction:    {get: function(){return friction;}, set: function(_){friction=_;}},\n        linkDist:    {get: function(){return linkDist;}, set: function(_){linkDist=_;}},\n        charge:      {get: function(){return charge;}, set: function(_){charge=_;}},\n        gravity:     {get: function(){return gravity;}, set: function(_){gravity=_;}},\n        theta:       {get: function(){return theta;}, set: function(_){theta=_;}},\n        alpha:       {get: function(){return alpha;}, set: function(_){alpha=_;}},\n        radius:      {get: function(){return radius;}, set: function(_){radius=_;}},\n\n        //functor options\n        x: {get: function(){return getX;}, set: function(_){getX=d3.functor(_);}},\n        y: {get: function(){return getY;}, set: function(_){getY=d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        nodeExtras: {get: function(){return nodeExtras;}, set: function(_){\n            nodeExtras = _;\n        }},\n        linkExtras: {get: function(){return linkExtras;}, set: function(_){\n            linkExtras = _;\n        }}\n    });\n\n    chart.dispatch = dispatch;\n    chart.tooltip = tooltip;\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.furiousLegend = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , width = 400\n        , height = 20\n        , getKey = function(d) { return d.key }\n        , keyFormatter = function (d) { return d }\n        , color = nv.utils.getColor()\n        , maxKeyLength = 20 //default value for key lengths\n        , align = true\n        , padding = 28 //define how much space between legend items. - recommend 32 for furious version\n        , rightAlign = true\n        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.\n        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)\n        , expanded = false\n        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')\n        , vers = 'classic' //Options are \"classic\" and \"furious\"\n        ;\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-legend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var series = g.selectAll('.nv-series')\n                .data(function(d) {\n                    if(vers != 'furious') return d;\n\n                    return d.filter(function(n) {\n                        return expanded ? true : !n.disengaged;\n                    });\n                });\n            var seriesEnter = series.enter().append('g').attr('class', 'nv-series')\n\n            var seriesShape;\n\n            if(vers == 'classic') {\n                seriesEnter.append('circle')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('r', 5);\n\n                seriesShape = series.select('circle');\n            } else if (vers == 'furious') {\n                seriesEnter.append('rect')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('rx', 3)\n                    .attr('ry', 3);\n\n                seriesShape = series.select('rect');\n\n                seriesEnter.append('g')\n                    .attr('class', 'nv-check-box')\n                    .property('innerHTML','<path d=\"M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z\" class=\"nv-box\"></path><path d=\"M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511\" class=\"nv-check\"></path>')\n                    .attr('transform', 'translate(-10,-8)scale(0.5)');\n\n                var seriesCheckbox = series.select('.nv-check-box');\n\n                seriesCheckbox.each(function(d,i) {\n                    d3.select(this).selectAll('path')\n                        .attr('stroke', setTextColor(d,i));\n                });\n            }\n\n            seriesEnter.append('text')\n                .attr('text-anchor', 'start')\n                .attr('class','nv-legend-text')\n                .attr('dy', '.32em')\n                .attr('dx', '8');\n\n            var seriesText = series.select('text.nv-legend-text');\n\n            series\n                .on('mouseover', function(d,i) {\n                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.legendMouseout(d,i);\n                })\n                .on('click', function(d,i) {\n                    dispatch.legendClick(d,i);\n                    // make sure we re-get data in case it was modified\n                    var data = series.data();\n                    if (updateState) {\n                        if(vers =='classic') {\n                            if (radioButtonMode) {\n                                //Radio button mode: set every series to disabled,\n                                //  and enable the clicked series.\n                                data.forEach(function(series) { series.disabled = true});\n                                d.disabled = false;\n                            }\n                            else {\n                                d.disabled = !d.disabled;\n                                if (data.every(function(series) { return series.disabled})) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) { series.disabled = false});\n                                }\n                            }\n                        } else if(vers == 'furious') {\n                            if(expanded) {\n                                d.disengaged = !d.disengaged;\n                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;\n                                d.disabled = d.disengaged || d.userDisabled;\n                            } else if (!expanded) {\n                                d.disabled = !d.disabled;\n                                d.userDisabled = d.disabled;\n                                var engaged = data.filter(function(d) { return !d.disengaged; });\n                                if (engaged.every(function(series) { return series.userDisabled })) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) {\n                                        series.disabled = series.userDisabled = false;\n                                    });\n                                }\n                            }\n                        }\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled }),\n                            disengaged: data.map(function(d) { return !!d.disengaged })\n                        });\n\n                    }\n                })\n                .on('dblclick', function(d,i) {\n                    if(vers == 'furious' && expanded) return;\n                    dispatch.legendDblclick(d,i);\n                    if (updateState) {\n                        // make sure we re-get data in case it was modified\n                        var data = series.data();\n                        //the default behavior of NVD3 legends, when double clicking one,\n                        // is to set all other series' to false, and make the double clicked series enabled.\n                        data.forEach(function(series) {\n                            series.disabled = true;\n                            if(vers == 'furious') series.userDisabled = series.disabled;\n                        });\n                        d.disabled = false;\n                        if(vers == 'furious') d.userDisabled = d.disabled;\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled })\n                        });\n                    }\n                });\n\n            series.classed('nv-disabled', function(d) { return d.userDisabled });\n            series.exit().remove();\n\n            seriesText\n                .attr('fill', setTextColor)\n                .text(function (d) { return keyFormatter(getKey(d)) });\n\n            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)\n            // NEW ALIGNING CODE, TODO: clean up\n\n            var versPadding;\n            switch(vers) {\n                case 'furious' :\n                    versPadding = 23;\n                    break;\n                case 'classic' :\n                    versPadding = 20;\n            }\n\n            if (align) {\n\n                var seriesWidths = [];\n                series.each(function(d,i) {\n                    var legendText;\n                    if (keyFormatter(getKey(d)) && keyFormatter(getKey(d)).length > maxKeyLength) {\n                        var trimmedKey = keyFormatter(getKey(d)).substring(0, maxKeyLength);\n                        legendText = d3.select(this).select('text').text(trimmedKey + \"...\");\n                        d3.select(this).append(\"svg:title\").text(keyFormatter(getKey(d)));\n                    } else {\n                        legendText = d3.select(this).select('text');\n                    }\n                    var nodeTextLength;\n                    try {\n                        nodeTextLength = legendText.node().getComputedTextLength();\n                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead\n                        if(nodeTextLength <= 0) throw Error();\n                    }\n                    catch(e) {\n                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);\n                    }\n\n                    seriesWidths.push(nodeTextLength + padding);\n                });\n\n                var seriesPerRow = 0;\n                var legendWidth = 0;\n                var columnWidths = [];\n\n                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {\n                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];\n                    legendWidth += seriesWidths[seriesPerRow++];\n                }\n                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row\n\n                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {\n                    columnWidths = [];\n                    seriesPerRow--;\n\n                    for (var k = 0; k < seriesWidths.length; k++) {\n                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )\n                            columnWidths[k % seriesPerRow] = seriesWidths[k];\n                    }\n\n                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {\n                        return prev + cur;\n                    });\n                }\n\n                var xPositions = [];\n                for (var i = 0, curX = 0; i < seriesPerRow; i++) {\n                    xPositions[i] = curX;\n                    curX += columnWidths[i];\n                }\n\n                series\n                    .attr('transform', function(d, i) {\n                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                if (rightAlign) {\n                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');\n                }\n                else {\n                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');\n                }\n\n                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);\n\n            } else {\n\n                var ypos = 5,\n                    newxpos = 5,\n                    maxwidth = 0,\n                    xpos;\n                series\n                    .attr('transform', function(d, i) {\n                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;\n                        xpos = newxpos;\n\n                        if (width < margin.left + margin.right + xpos + length) {\n                            newxpos = xpos = 5;\n                            ypos += versPadding;\n                        }\n\n                        newxpos += length;\n                        if (newxpos > maxwidth) maxwidth = newxpos;\n\n                        return 'translate(' + xpos + ',' + ypos + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');\n\n                height = margin.top + margin.bottom + ypos + 15;\n            }\n\n            if(vers == 'furious') {\n                // Size rectangles after text is placed\n                seriesShape\n                    .attr('width', function(d,i) {\n                        return seriesText[0][i].getComputedTextLength() + 27;\n                    })\n                    .attr('height', 18)\n                    .attr('y', -9)\n                    .attr('x', -15)\n            }\n\n            seriesShape\n                .style('fill', setBGColor)\n                .style('stroke', function(d,i) { return d.color || color(d, i) });\n        });\n\n        function setTextColor(d,i) {\n            if(vers != 'furious') return '#000';\n            if(expanded) {\n                return d.disengaged ? color(d,i) : '#fff';\n            } else if (!expanded) {\n                return !!d.disabled ? color(d,i) : '#fff';\n            }\n        }\n\n        function setBGColor(d,i) {\n            if(expanded && vers == 'furious') {\n                return d.disengaged ? '#fff' : color(d,i);\n            } else {\n                return !!d.disabled ? '#fff' : color(d,i);\n            }\n        }\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:          {get: function(){return width;}, set: function(_){width=_;}},\n        height:         {get: function(){return height;}, set: function(_){height=_;}},\n        key:            {get: function(){return getKey;}, set: function(_){getKey=_;}},\n        keyFormatter:   {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        align:          {get: function(){return align;}, set: function(_){align=_;}},\n        rightAlign:     {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},\n        maxKeyLength:   {get: function(){return maxKeyLength;}, set: function(_){maxKeyLength=_;}},\n        padding:        {get: function(){return padding;}, set: function(_){padding=_;}},\n        updateState:    {get: function(){return updateState;}, set: function(_){updateState=_;}},\n        radioButtonMode:{get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},\n        expanded:       {get: function(){return expanded;}, set: function(_){expanded=_;}},\n        vers:           {get: function(){return vers;}, set: function(_){vers=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n//TODO: consider deprecating and using multibar with single series for this\nnv.models.historicalBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceX = []\n        , forceY = [0]\n        , padData = false\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        , interactive = true\n        ;\n\n    var renderWatch = nv.utils.renderWatch(dispatch, 0);\n\n    function chart(selection) {\n        selection.each(function(data) {\n            renderWatch.reset();\n\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [0, availableWidth]);\n\n            y.domain(yDomain || d3.extent(data[0].values.map(getY).concat(forceY) ))\n                .range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-historicalBar-' + id).data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBar-' + id);\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-bars');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var bars = wrap.select('.nv-bars').selectAll('.nv-bar')\n                .data(function(d) { return d }, function(d,i) {return getX(d,i)});\n            bars.exit().remove();\n\n            bars.enter().append('rect')\n                .attr('x', 0 )\n                .attr('y', function(d,i) {  return nv.utils.NaNtoZero(y(Math.max(0, getY(d,i)))) })\n                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.abs(y(getY(d,i)) - y(0))) })\n                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })\n                .on('mouseover', function(d,i) {\n                    if (!interactive) return;\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n\n                })\n                .on('mouseout', function(d,i) {\n                    if (!interactive) return;\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    if (!interactive) return;\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    if (!interactive) return;\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    if (!interactive) return;\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            bars\n                .attr('fill', function(d,i) { return color(d, i); })\n                .attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })\n                .watchTransition(renderWatch, 'bars')\n                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })\n                //TODO: better width calculations that don't assume always uniform data spacing;w\n                .attr('width', (availableWidth / data[0].values.length) * .9 );\n\n            bars.watchTransition(renderWatch, 'bars')\n                .attr('y', function(d,i) {\n                    var rval = getY(d,i) < 0 ?\n                        y(0) :\n                            y(0) - y(getY(d,i)) < 1 ?\n                        y(0) - 1 :\n                        y(getY(d,i));\n                    return nv.utils.NaNtoZero(rval);\n                })\n                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.max(Math.abs(y(getY(d,i)) - y(0)),1)) });\n\n        });\n\n        renderWatch.renderEnd('historicalBar immediate');\n        return chart;\n    }\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        container\n            .select(\".nv-bars .nv-bar-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container\n            .select(\".nv-bars .nv-bar.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        forceX:  {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData: {get: function(){return padData;}, set: function(_){padData=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.historicalBarChart = function(bar_model) {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var bars = bar_model || nv.models.historicalBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        ;\n\n\n    var margin = {top: 30, right: 90, bottom: 50, left: 90}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = false\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , useInteractiveGuideline = false\n        , x\n        , y\n        , state = {}\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('tooltipHide', 'stateChange', 'changeState', 'renderEnd')\n        , transitionDuration = 250\n        ;\n\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient( (rightAlignYAxis) ? 'right' : 'left');\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, 0);\n\n    function chart(selection) {\n        selection.each(function(data) {\n            renderWatch.reset();\n            renderWatch.models(bars);\n            if (showXAxis) renderWatch.models(xAxis);\n            if (showYAxis) renderWatch.models(yAxis);\n\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().duration(transitionDuration).call(chart) };\n            chart.container = this;\n\n            //set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = bars.xScale();\n            y = bars.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-historicalBarChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBarChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n            }\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n            bars\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n            barsWrap.transition().call(bars);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .transition()\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .transition()\n                    .call(yAxis);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                bars.clearHighlights();\n\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        bars.highlightPoint(pointIndex,true);\n                        var point = series.values[pointIndex];\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: chart.y()(point, pointIndex),\n                            color: color(series,series.seriesIndex),\n                            data: series.values[pointIndex]\n                        });\n                    });\n\n                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));\n                interactiveLayer.tooltip\n                    .valueFormatter(function(d,i) {\n                        return yAxis.tickFormat()(d);\n                    })\n                    .data({\n                        value: xValue,\n                        index: pointIndex,\n                        series: allData\n                    })();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                dispatch.tooltipHide();\n                bars.clearHighlights();\n            });\n\n            legend.dispatch.on('legendClick', function(d,i) {\n                d.disabled = !d.disabled;\n\n                if (!data.filter(function(d) { return !d.disabled }).length) {\n                    data.map(function(d) {\n                        d.disabled = false;\n                        wrap.selectAll('.nv-series').classed('disabled', false);\n                        return d;\n                    });\n                }\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n\n                selection.transition().call(chart);\n            });\n\n            legend.dispatch.on('legendDblclick', function(d) {\n                //Double clicking should always enable current series, and disabled all others.\n                data.forEach(function(d) {\n                    d.disabled = true;\n                });\n                d.disabled = false;\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                chart.update();\n            });\n        });\n\n        renderWatch.renderEnd('historicalBarChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    bars.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    bars.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bars.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.bars = bars;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            bars.color(color);\n        }},\n        duration:    {get: function(){return transitionDuration;}, set: function(_){\n            transitionDuration=_;\n            renderWatch.reset(transitionDuration);\n            yAxis.duration(transitionDuration);\n            xAxis.duration(transitionDuration);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (_ === true) {\n                chart.interactive(false);\n            }\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, bars);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\n\n// ohlcChart is just a historical chart with ohlc bars and some tweaks\nnv.models.ohlcBarChart = function() {\n    var chart = nv.models.historicalBarChart(nv.models.ohlcBar());\n\n    // special default tooltip since we show multiple values per x\n    chart.useInteractiveGuideline(true);\n    chart.interactiveLayer.tooltip.contentGenerator(function(data) {\n        // we assume only one series exists for this chart\n        var d = data.series[0].data;\n        // match line colors as defined in nv.d3.css\n        var color = d.open < d.close ? \"2ca02c\" : \"d62728\";\n        return '' +\n            '<h3 style=\"color: #' + color + '\">' + data.value + '</h3>' +\n            '<table>' +\n            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +\n            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +\n            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +\n            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +\n            '</table>';\n    });\n    return chart;\n};\n\n// candlestickChart is just a historical chart with candlestick bars and some tweaks\nnv.models.candlestickBarChart = function() {\n    var chart = nv.models.historicalBarChart(nv.models.candlestickBar());\n\n    // special default tooltip since we show multiple values per x\n    chart.useInteractiveGuideline(true);\n    chart.interactiveLayer.tooltip.contentGenerator(function(data) {\n        // we assume only one series exists for this chart\n        var d = data.series[0].data;\n        // match line colors as defined in nv.d3.css\n        var color = d.open < d.close ? \"2ca02c\" : \"d62728\";\n        return '' +\n            '<h3 style=\"color: #' + color + '\">' + data.value + '</h3>' +\n            '<table>' +\n            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +\n            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +\n            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +\n            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +\n            '</table>';\n    });\n    return chart;\n};\nnv.models.legend = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , width = 400\n        , height = 20\n        , getKey = function(d) { return d.key }\n        , keyFormatter = function (d) { return d }\n        , color = nv.utils.getColor()\n        , maxKeyLength = 20 //default value for key lengths\n        , align = true\n        , padding = 32 //define how much space between legend items. - recommend 32 for furious version\n        , rightAlign = true\n        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.\n        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)\n        , expanded = false\n        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')\n        , vers = 'classic' //Options are \"classic\" and \"furious\"\n        ;\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-legend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');\n            var g = wrap.select('g');\n\n            if (rightAlign)\n                wrap.attr('transform', 'translate(' + (- margin.right) + ',' + margin.top + ')');\n            else\n                wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var series = g.selectAll('.nv-series')\n                .data(function(d) {\n                    if(vers != 'furious') return d;\n\n                    return d.filter(function(n) {\n                        return expanded ? true : !n.disengaged;\n                    });\n                });\n\n            var seriesEnter = series.enter().append('g').attr('class', 'nv-series');\n            var seriesShape;\n\n            var versPadding;\n            switch(vers) {\n                case 'furious' :\n                    versPadding = 23;\n                    break;\n                case 'classic' :\n                    versPadding = 20;\n            }\n\n            if(vers == 'classic') {\n                seriesEnter.append('circle')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('r', 5);\n\n                seriesShape = series.select('.nv-legend-symbol');\n            } else if (vers == 'furious') {\n                seriesEnter.append('rect')\n                    .style('stroke-width', 2)\n                    .attr('class','nv-legend-symbol')\n                    .attr('rx', 3)\n                    .attr('ry', 3);\n                seriesShape = series.select('.nv-legend-symbol');\n\n                seriesEnter.append('g')\n                    .attr('class', 'nv-check-box')\n                    .property('innerHTML','<path d=\"M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z\" class=\"nv-box\"></path><path d=\"M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511\" class=\"nv-check\"></path>')\n                    .attr('transform', 'translate(-10,-8)scale(0.5)');\n\n                var seriesCheckbox = series.select('.nv-check-box');\n\n                seriesCheckbox.each(function(d,i) {\n                    d3.select(this).selectAll('path')\n                        .attr('stroke', setTextColor(d,i));\n                });\n            }\n\n            seriesEnter.append('text')\n                .attr('text-anchor', 'start')\n                .attr('class','nv-legend-text')\n                .attr('dy', '.32em')\n                .attr('dx', '8');\n\n            var seriesText = series.select('text.nv-legend-text');\n\n            series\n                .on('mouseover', function(d,i) {\n                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.legendMouseout(d,i);\n                })\n                .on('click', function(d,i) {\n                    dispatch.legendClick(d,i);\n                    // make sure we re-get data in case it was modified\n                    var data = series.data();\n                    if (updateState) {\n                        if(vers =='classic') {\n                            if (radioButtonMode) {\n                                //Radio button mode: set every series to disabled,\n                                //  and enable the clicked series.\n                                data.forEach(function(series) { series.disabled = true});\n                                d.disabled = false;\n                            }\n                            else {\n                                d.disabled = !d.disabled;\n                                if (data.every(function(series) { return series.disabled})) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) { series.disabled = false});\n                                }\n                            }\n                        } else if(vers == 'furious') {\n                            if(expanded) {\n                                d.disengaged = !d.disengaged;\n                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;\n                                d.disabled = d.disengaged || d.userDisabled;\n                            } else if (!expanded) {\n                                d.disabled = !d.disabled;\n                                d.userDisabled = d.disabled;\n                                var engaged = data.filter(function(d) { return !d.disengaged; });\n                                if (engaged.every(function(series) { return series.userDisabled })) {\n                                    //the default behavior of NVD3 legends is, if every single series\n                                    // is disabled, turn all series' back on.\n                                    data.forEach(function(series) {\n                                        series.disabled = series.userDisabled = false;\n                                    });\n                                }\n                            }\n                        }\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled }),\n                            disengaged: data.map(function(d) { return !!d.disengaged })\n                        });\n\n                    }\n                })\n                .on('dblclick', function(d,i) {\n                    if(vers == 'furious' && expanded) return;\n                    dispatch.legendDblclick(d,i);\n                    if (updateState) {\n                        // make sure we re-get data in case it was modified\n                        var data = series.data();\n                        //the default behavior of NVD3 legends, when double clicking one,\n                        // is to set all other series' to false, and make the double clicked series enabled.\n                        data.forEach(function(series) {\n                            series.disabled = true;\n                            if(vers == 'furious') series.userDisabled = series.disabled;\n                        });\n                        d.disabled = false;\n                        if(vers == 'furious') d.userDisabled = d.disabled;\n                        dispatch.stateChange({\n                            disabled: data.map(function(d) { return !!d.disabled })\n                        });\n                    }\n                });\n\n            series.classed('nv-disabled', function(d) { return d.userDisabled });\n            series.exit().remove();\n\n            seriesText\n                .attr('fill', setTextColor)\n                .text(function (d) { return keyFormatter(getKey(d)) });\n\n            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)\n            // NEW ALIGNING CODE, TODO: clean up\n            var legendWidth = 0;\n            if (align) {\n\n                var seriesWidths = [];\n                series.each(function(d,i) {\n                    var legendText;\n                    if (keyFormatter(getKey(d)) && keyFormatter(getKey(d)).length > maxKeyLength) {\n                        var trimmedKey = keyFormatter(getKey(d)).substring(0, maxKeyLength);\n                        legendText = d3.select(this).select('text').text(trimmedKey + \"...\");\n                        d3.select(this).append(\"svg:title\").text(keyFormatter(getKey(d)));\n                    } else {\n                        legendText = d3.select(this).select('text');\n                    }\n                    var nodeTextLength;\n                    try {\n                        nodeTextLength = legendText.node().getComputedTextLength();\n                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead\n                        if(nodeTextLength <= 0) throw Error();\n                    }\n                    catch(e) {\n                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);\n                    }\n\n                    seriesWidths.push(nodeTextLength + padding);\n                });\n\n                var seriesPerRow = 0;\n                var columnWidths = [];\n                legendWidth = 0;\n\n                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {\n                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];\n                    legendWidth += seriesWidths[seriesPerRow++];\n                }\n                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row\n\n                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {\n                    columnWidths = [];\n                    seriesPerRow--;\n\n                    for (var k = 0; k < seriesWidths.length; k++) {\n                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )\n                            columnWidths[k % seriesPerRow] = seriesWidths[k];\n                    }\n\n                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {\n                        return prev + cur;\n                    });\n                }\n\n                var xPositions = [];\n                for (var i = 0, curX = 0; i < seriesPerRow; i++) {\n                    xPositions[i] = curX;\n                    curX += columnWidths[i];\n                }\n\n                series\n                    .attr('transform', function(d, i) {\n                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                if (rightAlign) {\n                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');\n                }\n                else {\n                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');\n                }\n\n                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);\n\n            } else {\n\n                var ypos = 5,\n                    newxpos = 5,\n                    maxwidth = 0,\n                    xpos;\n                series\n                    .attr('transform', function(d, i) {\n                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;\n                        xpos = newxpos;\n\n                        if (width < margin.left + margin.right + xpos + length) {\n                            newxpos = xpos = 5;\n                            ypos += versPadding;\n                        }\n\n                        newxpos += length;\n                        if (newxpos > maxwidth) maxwidth = newxpos;\n\n                        if(legendWidth < xpos + maxwidth) {\n                            legendWidth = xpos + maxwidth;\n                        }\n                        return 'translate(' + xpos + ',' + ypos + ')';\n                    });\n\n                //position legend as far right as possible within the total width\n                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');\n\n                height = margin.top + margin.bottom + ypos + 15;\n            }\n\n            if(vers == 'furious') {\n                // Size rectangles after text is placed\n                seriesShape\n                    .attr('width', function(d,i) {\n                        return seriesText[0][i].getComputedTextLength() + 27;\n                    })\n                    .attr('height', 18)\n                    .attr('y', -9)\n                    .attr('x', -15);\n\n                // The background for the expanded legend (UI)\n                gEnter.insert('rect',':first-child')\n                    .attr('class', 'nv-legend-bg')\n                    .attr('fill', '#eee')\n                    // .attr('stroke', '#444')\n                    .attr('opacity',0);\n\n                var seriesBG = g.select('.nv-legend-bg');\n\n                seriesBG\n                .transition().duration(300)\n                    .attr('x', -versPadding )\n                    .attr('width', legendWidth + versPadding - 12)\n                    .attr('height', height + 10)\n                    .attr('y', -margin.top - 10)\n                    .attr('opacity', expanded ? 1 : 0);\n\n\n            }\n\n            seriesShape\n                .style('fill', setBGColor)\n                .style('fill-opacity', setBGOpacity)\n                .style('stroke', setBGColor);\n        });\n\n        function setTextColor(d,i) {\n            if(vers != 'furious') return '#000';\n            if(expanded) {\n                return d.disengaged ? '#000' : '#fff';\n            } else if (!expanded) {\n                if(!d.color) d.color = color(d,i);\n                return !!d.disabled ? d.color : '#fff';\n            }\n        }\n\n        function setBGColor(d,i) {\n            if(expanded && vers == 'furious') {\n                return d.disengaged ? '#eee' : d.color || color(d,i);\n            } else {\n                return d.color || color(d,i);\n            }\n        }\n\n\n        function setBGOpacity(d,i) {\n            if(expanded && vers == 'furious') {\n                return 1;\n            } else {\n                return !!d.disabled ? 0 : 1;\n            }\n        }\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:          {get: function(){return width;}, set: function(_){width=_;}},\n        height:         {get: function(){return height;}, set: function(_){height=_;}},\n        key:            {get: function(){return getKey;}, set: function(_){getKey=_;}},\n        keyFormatter:   {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},\n        align:          {get: function(){return align;}, set: function(_){align=_;}},\n        maxKeyLength:   {get: function(){return maxKeyLength;}, set: function(_){maxKeyLength=_;}},\n        rightAlign:     {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},\n        padding:        {get: function(){return padding;}, set: function(_){padding=_;}},\n        updateState:    {get: function(){return updateState;}, set: function(_){updateState=_;}},\n        radioButtonMode:{get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},\n        expanded:       {get: function(){return expanded;}, set: function(_){expanded=_;}},\n        vers:           {get: function(){return vers;}, set: function(_){vers=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.line = function() {\n    \"use strict\";\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var  scatter = nv.models.scatter()\n        ;\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , container = null\n        , strokeWidth = 1.5\n        , color = nv.utils.defaultColor() // a function that returns a color\n        , getX = function(d) { return d.x } // accessor to get the x value from a data point\n        , getY = function(d) { return d.y } // accessor to get the y value from a data point\n        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined\n        , isArea = function(d) { return d.area } // decides if a line is an area or just a line\n        , clipEdge = false // if true, masks lines within x and y scale\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , interpolate = \"linear\" // controls the line interpolation\n        , duration = 250\n        , dispatch = d3.dispatch('elementClick', 'elementMouseover', 'elementMouseout', 'renderEnd')\n        ;\n\n    scatter\n        .pointSize(16) // default size\n        .pointDomain([16,256]) //set to speed up calculation, needs to be unset if there is a custom size accessor\n    ;\n\n    //============================================================\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0 //used to store previous scales\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        ;\n\n    //============================================================\n\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-line').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-line');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            scatter\n                .width(availableWidth)\n                .height(availableHeight);\n\n            var scatterWrap = wrap.select('.nv-scatterWrap');\n            scatterWrap.call(scatter);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + scatter.id())\n                .append('rect');\n\n            wrap.select('#nv-edge-clip-' + scatter.id() + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', (availableHeight > 0) ? availableHeight : 0);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n            scatterWrap\n                .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('stroke-width', function(d) { return d.strokeWidth || strokeWidth })\n                .style('fill-opacity', 1e-6);\n\n            groups.exit().remove();\n\n            groups\n                .attr('class', function(d,i) {\n                    return (d.classed || '') + ' nv-group nv-series-' + i;\n                })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i)});\n            groups.watchTransition(renderWatch, 'line: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', function(d) { return d.fillOpacity || .5});\n\n            var areaPaths = groups.selectAll('path.nv-area')\n                .data(function(d) { return isArea(d) ? [d] : [] }); // this is done differently than lines because I need to check if series is an area\n            areaPaths.enter().append('path')\n                .attr('class', 'nv-area')\n                .attr('d', function(d) {\n                    return d3.svg.area()\n                        .interpolate(interpolate)\n                        .defined(defined)\n                        .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n                        .y0(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n                        .y1(function(d,i) { return y0( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n                        .apply(this, [d.values])\n                });\n            groups.exit().selectAll('path.nv-area')\n                .remove();\n\n            areaPaths.watchTransition(renderWatch, 'line: areaPaths')\n                .attr('d', function(d) {\n                    return d3.svg.area()\n                        .interpolate(interpolate)\n                        .defined(defined)\n                        .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n                        .y0(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n                        .y1(function(d,i) { return y( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })\n                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this\n                        .apply(this, [d.values])\n                });\n\n            var linePaths = groups.selectAll('path.nv-line')\n                .data(function(d) { return [d.values] });\n\n            linePaths.enter().append('path')\n                .attr('class', 'nv-line')\n                .attr('d',\n                    d3.svg.line()\n                    .interpolate(interpolate)\n                    .defined(defined)\n                    .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })\n                    .y(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })\n            );\n\n            linePaths.watchTransition(renderWatch, 'line: linePaths')\n                .attr('d',\n                    d3.svg.line()\n                    .interpolate(interpolate)\n                    .defined(defined)\n                    .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })\n                    .y(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })\n            );\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n        });\n        renderWatch.renderEnd('line immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    // Pass through events\n    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        defined: {get: function(){return defined;}, set: function(_){defined=_;}},\n        interpolate:      {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            scatter.duration(duration);\n        }},\n        isArea: {get: function(){return isArea;}, set: function(_){\n            isArea = d3.functor(_);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            scatter.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            scatter.y(_);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            scatter.color(color);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.lineChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        , focus = nv.models.focus(nv.models.line())\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , color = nv.utils.defaultColor()\n        , width = null\n        , height = null\n        , showLegend = true\n        , legendPosition = 'top'\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , useInteractiveGuideline = false\n        , x\n        , y\n        , focusEnable = false\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState', 'renderEnd')\n        , duration = 250\n        ;\n\n    // set options on sub-objects for this chart\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient(rightAlignYAxis ? 'right' : 'left');\n\n    lines.clipEdge(true).duration(0);\n\n    tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    interactiveLayer.tooltip.valueFormatter(function(d, i) {\n        return yAxis.tickFormat()(d, i);\n    }).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled; })\n            };\n        };\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        };\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(lines);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n            chart.update = function() {\n                if( duration === 0 ) {\n                    container.call( chart );\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled; });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length; }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            /* Update `main' graph on brush update. */\n            focus.dispatch.on(\"onBrush\", function(extent) {\n                onBrush(extent);\n            });\n\n            // Setup Scales\n            x = lines.xScale();\n            y = lines.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-lineChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-background').append('rect');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y nv-axis');\n            focusEnter.append('g').attr('class', 'nv-linesWrap');\n            focusEnter.append('g').attr('class', 'nv-interactive');\n\n            var contextEnter = gEnter.append('g').attr('class', 'nv-focusWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (legendPosition === 'bottom') {\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + availableHeight +')');\n                } else if (legendPosition === 'top') {\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                    }\n\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + (-margin.top) +')');\n                }\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            g.select('.nv-focus .nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            lines\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var linesWrap = g.select('.nv-linesWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n\n            // Setup Main (Focus) Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks(nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n            }\n\n            //============================================================\n            // Update Axes\n            //============================================================\n            function updateXAxis() {\n              if(showXAxis) {\n                g.select('.nv-focus .nv-x.nv-axis')\n                  .transition()\n                  .duration(duration)\n                  .call(xAxis)\n                ;\n              }\n            }\n\n            function updateYAxis() {\n              if(showYAxis) {\n                g.select('.nv-focus .nv-y.nv-axis')\n                  .transition()\n                  .duration(duration)\n                  .call(yAxis)\n                ;\n              }\n            }\n\n            g.select('.nv-focus .nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + availableHeight + ')');\n\n            //============================================================\n            // Update Focus\n            //============================================================\n            if(!focusEnable) {\n                linesWrap.call(lines);\n                updateXAxis();\n                updateYAxis();\n            } else {\n                focus.width(availableWidth);\n                g.select('.nv-focusWrap')\n                    .attr('transform', 'translate(0,' + ( availableHeight + margin.bottom + focus.margin().top) + ')')\n                    .datum(data.filter(function(d) { return !d.disabled; }))\n                    .call(focus);\n                var extent = focus.brush.empty() ? focus.xDomain() : focus.brush.extent();\n                if(extent !== null){\n                    onBrush(extent);\n                }\n            }\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                lines.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [];\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled && !series.disableTooltip;\n                    })\n                    .forEach(function(series,i) {\n                        var extent = focusEnable ? (focus.brush.empty() ? focus.xScale().domain() : focus.brush.extent()) : x.domain();\n                        var currentValues = series.values.filter(function(d,i) {\n                            // Checks if the x point is between the extents, handling case where extent[0] is greater than extent[1]\n                            // (e.g. x domain is manually set to reverse the x-axis)\n                            if(extent[0] <= extent[1]) {\n                                return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                            } else {\n                                return lines.x()(d,i) >= extent[1] && lines.x()(d,i) <= extent[0];\n                            }\n                        });\n\n                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, lines.x());\n                        var point = currentValues[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue !== null) {\n                            lines.highlightPoint(i, pointIndex, true);\n                        }\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: pointYValue,\n                            color: color(series,series.seriesIndex),\n                            data: point\n                        });\n                    });\n                //Highlight the tooltip entry based on which point the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);\n                    var threshold = 0.03 * domainExtent;\n                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value;}),yValue,threshold);\n                    if (indexToHighlight !== null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                var defaultValueFormatter = function(d,i) {\n                    return d == null ? \"N/A\" : yAxis.tickFormat()(d);\n                };\n\n                interactiveLayer.tooltip\n                    .valueFormatter(interactiveLayer.tooltip.valueFormatter() || defaultValueFormatter)\n                    .data({\n                        value: chart.x()( singlePoint,pointIndex ),\n                        index: pointIndex,\n                        series: allData\n                    })();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on('elementClick', function(e) {\n                var pointXLocation, allData = [];\n\n                data.filter(function(series, i) {\n                    series.seriesIndex = i;\n                    return !series.disabled;\n                }).forEach(function(series) {\n                    var pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                    var point = series.values[pointIndex];\n                    if (typeof point === 'undefined') return;\n                    if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n                    var yPos = chart.yScale()(chart.y()(point,pointIndex));\n                    allData.push({\n                        point: point,\n                        pointIndex: pointIndex,\n                        pos: [pointXLocation, yPos],\n                        seriesIndex: series.seriesIndex,\n                        series: series\n                    });\n                });\n\n                lines.dispatch.elementClick(allData);\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                lines.clearHighlights();\n            });\n\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight / 3;\n                return 'M' + (0.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n\n            function onBrush(extent) {\n                // Update Main (Focus)\n                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n                    .datum(\n                    data.filter(function(d) { return !d.disabled; })\n                        .map(function(d,i) {\n                            return {\n                                key: d.key,\n                                area: d.area,\n                                classed: d.classed,\n                                values: d.values.filter(function(d,i) {\n                                    return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                                }),\n                                disableTooltip: d.disableTooltip\n                            };\n                        })\n                );\n                focusLinesWrap.transition().duration(duration).call(lines);\n\n                // Update Main (Focus) Axes\n                updateXAxis();\n                updateYAxis();\n            }\n        });\n\n        renderWatch.renderEnd('lineChart immediate');\n        return chart;\n    }\n\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        if(!evt.series.disableTooltip){\n            tooltip.data(evt).hidden(false);\n        }\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.lines = lines;\n    chart.legend = legend;\n    chart.focus = focus;\n    chart.xAxis = xAxis;\n    chart.x2Axis = focus.xAxis\n    chart.yAxis = yAxis;\n    chart.y2Axis = focus.yAxis\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n    chart.state = state;\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        // Focus options, mostly passed onto focus model.\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:     {get: function(){return focus.height();}, set: function(_){focus.height(_);}},\n        focusShowAxisX:    {get: function(){return focus.showXAxis();}, set: function(_){focus.showXAxis(_);}},\n        focusShowAxisY:    {get: function(){return focus.showYAxis();}, set: function(_){focus.showYAxis(_);}},\n        brushExtent: {get: function(){return focus.brushExtent();}, set: function(_){focus.brushExtent(_);}},\n\n        // options that require extra logic in the setter\n        focusMargin: {get: function(){return focus.margin}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            focus.margin.right  = _.right  !== undefined ? _.right  : focus.margin.right;\n            focus.margin.bottom = _.bottom !== undefined ? _.bottom : focus.margin.bottom;\n            focus.margin.left   = _.left   !== undefined ? _.left   : focus.margin.left;\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            lines.duration(duration);\n            focus.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            lines.color(color);\n            focus.color(color);\n        }},\n        interpolate: {get: function(){return lines.interpolate();}, set: function(_){\n            lines.interpolate(_);\n            focus.interpolate(_);\n        }},\n        xTickFormat: {get: function(){return xAxis.tickFormat();}, set: function(_){\n            xAxis.tickFormat(_);\n            focus.xTickFormat(_);\n        }},\n        yTickFormat: {get: function(){return yAxis.tickFormat();}, set: function(_){\n            yAxis.tickFormat(_);\n            focus.yTickFormat(_);\n        }},\n        x: {get: function(){return lines.x();}, set: function(_){\n            lines.x(_);\n            focus.x(_);\n        }},\n        y: {get: function(){return lines.y();}, set: function(_){\n            lines.y(_);\n            focus.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (useInteractiveGuideline) {\n                lines.interactive(false);\n                lines.useVoronoi(false);\n            }\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.lineWithFocusChart = function() {\n  return nv.models.lineChart()\n    .margin({ bottom: 30 })\n    .focusEnable( true );\n};\nnv.models.linePlusBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var lines = nv.models.line()\n        , lines2 = nv.models.line()\n        , bars = nv.models.historicalBar()\n        , bars2 = nv.models.historicalBar()\n        , xAxis = nv.models.axis()\n        , x2Axis = nv.models.axis()\n        , y1Axis = nv.models.axis()\n        , y2Axis = nv.models.axis()\n        , y3Axis = nv.models.axis()\n        , y4Axis = nv.models.axis()\n        , legend = nv.models.legend()\n        , brush = d3.svg.brush()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 30, bottom: 30, left: 60}\n        , marginTop = null\n        , margin2 = {top: 0, right: 30, bottom: 20, left: 60}\n        , width = null\n        , height = null\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , color = nv.utils.defaultColor()\n        , showLegend = true\n        , focusEnable = true\n        , focusShowAxisY = false\n        , focusShowAxisX = true\n        , focusHeight = 50\n        , extent\n        , brushExtent = null\n        , x\n        , x2\n        , y1\n        , y2\n        , y3\n        , y4\n        , noData = null\n        , dispatch = d3.dispatch('brush', 'stateChange', 'changeState')\n        , transitionDuration = 0\n        , state = nv.utils.state()\n        , defaultState = null\n        , legendLeftAxisHint = ' (left axis)'\n        , legendRightAxisHint = ' (right axis)'\n        , switchYAxisOrder = false\n        ;\n\n    lines.clipEdge(true);\n    lines2.interactive(false);\n    // We don't want any points emitted for the focus chart's scatter graph.\n    lines2.pointActive(function(d) { return false });\n    xAxis.orient('bottom').tickPadding(5);\n    y1Axis.orient('left');\n    y2Axis.orient('right');\n    x2Axis.orient('bottom').tickPadding(5);\n    y3Axis.orient('left');\n    y4Axis.orient('right');\n\n    tooltip.headerEnabled(true).headerFormatter(function(d, i) {\n        return xAxis.tickFormat()(d, i);\n    });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var getBarsAxis = function() {\n        return switchYAxisOrder\n            ? { main: y2Axis, focus: y4Axis }\n            : { main: y1Axis, focus: y3Axis }\n    }\n\n    var getLinesAxis = function() {\n        return switchYAxisOrder\n            ? { main: y1Axis, focus: y3Axis }\n            : { main: y2Axis, focus: y4Axis }\n    }\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var allDisabled = function(data) {\n      return data.every(function(series) {\n        return series.disabled;\n      });\n    }\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight1 = nv.utils.availableHeight(height, container, margin)\n                    - (focusEnable ? focusHeight : 0),\n                availableHeight2 = focusHeight - margin2.top - margin2.bottom;\n\n            chart.update = function() { container.transition().duration(transitionDuration).call(chart); };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            var dataBars = data.filter(function(d) { return !d.disabled && d.bar });\n            var dataLines = data.filter(function(d) { return !d.bar }); // removed the !d.disabled clause here to fix Issue #240\n\n            if (dataBars.length && !switchYAxisOrder) {\n                x = bars.xScale();\n            } else {\n                x = lines.xScale();\n            }\n\n            x2 = x2Axis.scale();\n\n            // select the scales and series based on the position of the yAxis\n            y1 = switchYAxisOrder ? lines.yScale() : bars.yScale();\n            y2 = switchYAxisOrder ? bars.yScale() : lines.yScale();\n            y3 = switchYAxisOrder ? lines2.yScale() : bars2.yScale();\n            y4 = switchYAxisOrder ? bars2.yScale() : lines2.yScale();\n\n            var series1 = data\n                .filter(function(d) { return !d.disabled && (switchYAxisOrder ? !d.bar : d.bar) })\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i) }\n                    })\n                });\n\n            var series2 = data\n                .filter(function(d) { return !d.disabled && (switchYAxisOrder ? d.bar : !d.bar) })\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i) }\n                    })\n                });\n\n            x.range([0, availableWidth]);\n\n            x2  .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x } ))\n                .range([0, availableWidth]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-linePlusBar').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            // this is the main chart\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            focusEnter.append('g').attr('class', 'nv-barsWrap');\n            focusEnter.append('g').attr('class', 'nv-linesWrap');\n\n            // context chart is where you can focus in\n            var contextEnter = gEnter.append('g').attr('class', 'nv-context');\n            contextEnter.append('g').attr('class', 'nv-x nv-axis');\n            contextEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            contextEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            contextEnter.append('g').attr('class', 'nv-barsWrap');\n            contextEnter.append('g').attr('class', 'nv-linesWrap');\n            contextEnter.append('g').attr('class', 'nv-brushBackground');\n            contextEnter.append('g').attr('class', 'nv-x nv-brush');\n\n            //============================================================\n            // Legend\n            //------------------------------------------------------------\n\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;\n                var legendXPosition = legend.align() ? legendWidth : 0;\n\n                legend.width(legendWidth);\n\n                g.select('.nv-legendWrap')\n                    .datum(data.map(function(series) {\n                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n                        if(switchYAxisOrder) {\n                            series.key = series.originalKey + (series.bar ? legendRightAxisHint : legendLeftAxisHint);\n                        } else {\n                            series.key = series.originalKey + (series.bar ? legendLeftAxisHint : legendRightAxisHint);\n                        }\n                        return series;\n                    }))\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    // FIXME: shouldn't this be \"- (focusEnabled ? focusHeight : 0)\"?\n                    availableHeight1 = nv.utils.availableHeight(height, container, margin) - focusHeight;\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            //============================================================\n            // Context chart (focus chart) components\n            //------------------------------------------------------------\n\n            // hide or show the focus context chart\n            g.select('.nv-context').style('display', focusEnable ? 'initial' : 'none');\n\n            bars2\n                .width(availableWidth)\n                .height(availableHeight2)\n                .color(data.map(function (d, i) {\n                    return d.color || color(d, i);\n                }).filter(function (d, i) {\n                    return !data[i].disabled && data[i].bar\n                }));\n            lines2\n                .width(availableWidth)\n                .height(availableHeight2)\n                .color(data.map(function (d, i) {\n                    return d.color || color(d, i);\n                }).filter(function (d, i) {\n                    return !data[i].disabled && !data[i].bar\n                }));\n\n            var bars2Wrap = g.select('.nv-context .nv-barsWrap')\n                .datum(dataBars.length ? dataBars : [\n                    {values: []}\n                ]);\n            var lines2Wrap = g.select('.nv-context .nv-linesWrap')\n                .datum(allDisabled(dataLines) ?\n                       [{values: []}] :\n                       dataLines.filter(function(dataLine) {\n                         return !dataLine.disabled;\n                       }));\n\n            g.select('.nv-context')\n                .attr('transform', 'translate(0,' + ( availableHeight1 + margin.bottom + margin2.top) + ')');\n\n            bars2Wrap.transition().call(bars2);\n            lines2Wrap.transition().call(lines2);\n\n            // context (focus chart) axis controls\n            if (focusShowAxisX) {\n                x2Axis\n                    ._ticks( nv.utils.calcTicksX(availableWidth / 100, data))\n                    .tickSize(-availableHeight2, 0);\n                g.select('.nv-context .nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y3.range()[0] + ')');\n                g.select('.nv-context .nv-x.nv-axis').transition()\n                    .call(x2Axis);\n            }\n\n            if (focusShowAxisY) {\n                y3Axis\n                    .scale(y3)\n                    ._ticks( availableHeight2 / 36 )\n                    .tickSize( -availableWidth, 0);\n                y4Axis\n                    .scale(y4)\n                    ._ticks( availableHeight2 / 36 )\n                    .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none\n\n                g.select('.nv-context .nv-y3.nv-axis')\n                    .style('opacity', dataBars.length ? 1 : 0)\n                    .attr('transform', 'translate(0,' + x2.range()[0] + ')');\n                g.select('.nv-context .nv-y2.nv-axis')\n                    .style('opacity', dataLines.length ? 1 : 0)\n                    .attr('transform', 'translate(' + x2.range()[1] + ',0)');\n\n                g.select('.nv-context .nv-y1.nv-axis').transition()\n                    .call(y3Axis);\n                g.select('.nv-context .nv-y2.nv-axis').transition()\n                    .call(y4Axis);\n            }\n\n            // Setup Brush\n            brush.x(x2).on('brush', onBrush);\n\n            if (brushExtent) brush.extent(brushExtent);\n\n            var brushBG = g.select('.nv-brushBackground').selectAll('g')\n                .data([brushExtent || brush.extent()]);\n\n            var brushBGenter = brushBG.enter()\n                .append('g');\n\n            brushBGenter.append('rect')\n                .attr('class', 'left')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight2);\n\n            brushBGenter.append('rect')\n                .attr('class', 'right')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('height', availableHeight2);\n\n            var gBrush = g.select('.nv-x.nv-brush')\n                .call(brush);\n            gBrush.selectAll('rect')\n                //.attr('y', -5)\n                .attr('height', availableHeight2);\n            gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            // Taken from crossfilter (http://square.github.com/crossfilter/)\n            function resizePath(d) {\n                var e = +(d == 'e'),\n                    x = e ? 1 : -1,\n                    y = availableHeight2 / 3;\n                return 'M' + (.5 * x) + ',' + y\n                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n                    + 'V' + (2 * y - 6)\n                    + 'A6,6 0 0 ' + e + ' ' + (.5 * x) + ',' + (2 * y)\n                    + 'Z'\n                    + 'M' + (2.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8)\n                    + 'M' + (4.5 * x) + ',' + (y + 8)\n                    + 'V' + (2 * y - 8);\n            }\n\n\n            function updateBrushBG() {\n                if (!brush.empty()) brush.extent(brushExtent);\n                brushBG\n                    .data([brush.empty() ? x2.domain() : brushExtent])\n                    .each(function(d,i) {\n                        var leftWidth = x2(d[0]) - x2.range()[0],\n                            rightWidth = x2.range()[1] - x2(d[1]);\n                        d3.select(this).select('.left')\n                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);\n\n                        d3.select(this).select('.right')\n                            .attr('x', x2(d[1]))\n                            .attr('width', rightWidth < 0 ? 0 : rightWidth);\n                    });\n            }\n\n            function onBrush() {\n                brushExtent = brush.empty() ? null : brush.extent();\n                extent = brush.empty() ? x2.domain() : brush.extent();\n                dispatch.brush({extent: extent, brush: brush});\n                updateBrushBG();\n\n                // Prepare Main (Focus) Bars and Lines\n                bars\n                    .width(availableWidth)\n                    .height(availableHeight1)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled && data[i].bar }));\n\n                lines\n                    .width(availableWidth)\n                    .height(availableHeight1)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }));\n\n                var focusBarsWrap = g.select('.nv-focus .nv-barsWrap')\n                    .datum(!dataBars.length ? [{values:[]}] :\n                        dataBars\n                            .map(function(d,i) {\n                                return {\n                                    key: d.key,\n                                    values: d.values.filter(function(d,i) {\n                                        return bars.x()(d,i) >= extent[0] && bars.x()(d,i) <= extent[1];\n                                    })\n                                }\n                            })\n                );\n\n                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')\n                    .datum(allDisabled(dataLines) ? [{values:[]}] :\n                           dataLines\n                           .filter(function(dataLine) { return !dataLine.disabled; })\n                           .map(function(d,i) {\n                                return {\n                                    area: d.area,\n                                    fillOpacity: d.fillOpacity,\n                                    strokeWidth: d.strokeWidth,\n                                    key: d.key,\n                                    values: d.values.filter(function(d,i) {\n                                        return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];\n                                    })\n                                }\n                            })\n                );\n\n                // Update Main (Focus) X Axis\n                if (dataBars.length && !switchYAxisOrder) {\n                    x = bars.xScale();\n                } else {\n                    x = lines.xScale();\n                }\n\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight1, 0);\n\n                xAxis.domain([Math.ceil(extent[0]), Math.floor(extent[1])]);\n\n                g.select('.nv-x.nv-axis').transition().duration(transitionDuration)\n                    .call(xAxis);\n\n                // Update Main (Focus) Bars and Lines\n                focusBarsWrap.transition().duration(transitionDuration).call(bars);\n                focusLinesWrap.transition().duration(transitionDuration).call(lines);\n\n                // Setup and Update Main (Focus) Y Axes\n                g.select('.nv-focus .nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y1.range()[0] + ')');\n\n                y1Axis\n                    .scale(y1)\n                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) )\n                    .tickSize(-availableWidth, 0);\n                y2Axis\n                    .scale(y2)\n                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) );\n\n                // Show the y2 rules only if y1 has none\n                if(!switchYAxisOrder) {\n                    y2Axis.tickSize(dataBars.length ? 0 : -availableWidth, 0);\n                } else {\n                    y2Axis.tickSize(dataLines.length ? 0 : -availableWidth, 0);\n                }\n\n                // Calculate opacity of the axis\n                var barsOpacity = dataBars.length ? 1 : 0;\n                var linesOpacity = dataLines.length && !allDisabled(dataLines) ? 1 : 0;\n\n                var y1Opacity = switchYAxisOrder ? linesOpacity : barsOpacity;\n                var y2Opacity = switchYAxisOrder ? barsOpacity : linesOpacity;\n\n                g.select('.nv-focus .nv-y1.nv-axis')\n                    .style('opacity', y1Opacity);\n                g.select('.nv-focus .nv-y2.nv-axis')\n                    .style('opacity', y2Opacity)\n                    .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\n                g.select('.nv-focus .nv-y1.nv-axis').transition().duration(transitionDuration)\n                    .call(y1Axis);\n                g.select('.nv-focus .nv-y2.nv-axis').transition().duration(transitionDuration)\n                    .call(y2Axis);\n            }\n\n            onBrush();\n\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    lines.dispatch.on('elementMouseover.tooltip', function(evt) {\n        tooltip\n            .duration(100)\n            .valueFormatter(function(d, i) {\n                return getLinesAxis().main.tickFormat()(d, i);\n            })\n            .data(evt)\n            .hidden(false);\n    });\n\n    lines.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n\n    bars.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.value = chart.x()(evt.data);\n        evt['series'] = {\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip\n            .duration(0)\n            .valueFormatter(function(d, i) {\n                return getBarsAxis().main.tickFormat()(d, i);\n            })\n            .data(evt)\n            .hidden(false);\n    });\n\n    bars.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    bars.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.legend = legend;\n    chart.lines = lines;\n    chart.lines2 = lines2;\n    chart.bars = bars;\n    chart.bars2 = bars2;\n    chart.xAxis = xAxis;\n    chart.x2Axis = x2Axis;\n    chart.y1Axis = y1Axis;\n    chart.y2Axis = y2Axis;\n    chart.y3Axis = y3Axis;\n    chart.y4Axis = y4Axis;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        brushExtent:    {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:    {get: function(){return focusHeight;}, set: function(_){focusHeight=_;}},\n        focusShowAxisX:    {get: function(){return focusShowAxisX;}, set: function(_){focusShowAxisX=_;}},\n        focusShowAxisY:    {get: function(){return focusShowAxisY;}, set: function(_){focusShowAxisY=_;}},\n        legendLeftAxisHint:    {get: function(){return legendLeftAxisHint;}, set: function(_){legendLeftAxisHint=_;}},\n        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        focusMargin: {get: function(){return margin2;}, set: function(_){\n            margin2.top    = _.top    !== undefined ? _.top    : margin2.top;\n            margin2.right  = _.right  !== undefined ? _.right  : margin2.right;\n            margin2.bottom = _.bottom !== undefined ? _.bottom : margin2.bottom;\n            margin2.left   = _.left   !== undefined ? _.left   : margin2.left;\n        }},\n        duration: {get: function(){return transitionDuration;}, set: function(_){\n            transitionDuration = _;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            lines.x(_);\n            lines2.x(_);\n            bars.x(_);\n            bars2.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            lines.y(_);\n            lines2.y(_);\n            bars.y(_);\n            bars2.y(_);\n        }},\n        switchYAxisOrder:    {get: function(){return switchYAxisOrder;}, set: function(_){\n            // Switch the tick format for the yAxis\n            if(switchYAxisOrder !== _) {\n                var y1 = y1Axis;\n                y1Axis = y2Axis;\n                y2Axis = y1;\n\n                var y3 = y3Axis;\n                y3Axis = y4Axis;\n                y4Axis = y3;\n            }\n            switchYAxisOrder=_;\n\n            y1Axis.orient('left');\n            y2Axis.orient('right');\n            y3Axis.orient('left');\n            y4Axis.orient('right');\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, lines);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , clipEdge = true\n        , stacked = false\n        , stackOffset = 'zero' // options include 'silhouette', 'wiggle', 'expand', 'zero', or a custom function\n        , color = nv.utils.defaultColor()\n        , hideable = false\n        , barColor = null // adding the ability to set the color for each rather than the whole group\n        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n        , duration = 500\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , groupSpacing = 0.1\n        , fillOpacity = 0.75\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0 //used to store previous scales\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        ;\n\n    var last_datalength = 0;\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n            var nonStackableCount = 0;\n            // This function defines the requirements for render complete\n            var endFn = function(d, i) {\n                if (d.series === data.length - 1 && i === data[0].values.length - 1)\n                    return true;\n                return false;\n            };\n\n            if(hideable && data.length) hideable = [{\n                values: data[0].values.map(function(d) {\n                        return {\n                            x: d.x,\n                            y: 0,\n                            series: d.series,\n                            size: 0.01\n                        };}\n                )}];\n\n            if (stacked) {\n                var parsed = d3.layout.stack()\n                    .offset(stackOffset)\n                    .values(function(d){ return d.values })\n                    .y(getY)\n                (!data.length && hideable ? hideable : data);\n\n                parsed.forEach(function(series, i){\n                    // if series is non-stackable, use un-parsed data\n                    if (series.nonStackable) {\n                        data[i].nonStackableSeries = nonStackableCount++;\n                        parsed[i] = data[i];\n                    } else {\n                        // don't stack this seires on top of the nonStackable seriees\n                        if (i > 0 && parsed[i - 1].nonStackable){\n                            parsed[i].values.map(function(d,j){\n                                d.y0 -= parsed[i - 1].values[j].y;\n                                d.y1 = d.y0 + d.y;\n                            });\n                        }\n                    }\n                });\n                data = parsed;\n            }\n            //add series index and key to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                    point.key = series.key;\n                });\n            });\n\n            // HACK for negative value stacking\n            if (stacked && data.length > 0) {\n                data[0].values.map(function(d,i) {\n                    var posBase = 0, negBase = 0;\n                    data.map(function(d, idx) {\n                        if (!data[idx].nonStackable) {\n                            var f = d.values[i]\n                            f.size = Math.abs(f.y);\n                            if (f.y<0)  {\n                                f.y1 = negBase;\n                                negBase = negBase - f.size;\n                            } else\n                            {\n                                f.y1 = f.size + posBase;\n                                posBase = posBase + f.size;\n                            }\n                        }\n\n                    });\n                });\n            }\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d, idx) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1, idx:idx }\n                    })\n                });\n\n            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableWidth], groupSpacing);\n\n            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) {\n                var domain = d.y;\n                // increase the domain range if this series is stackable\n                if (stacked && !data[d.idx].nonStackable) {\n                    if (d.y > 0){\n                        domain = d.y1\n                    } else {\n                        domain = d.y1 + d.y\n                    }\n                }\n                return domain;\n            }).concat(forceY)))\n            .range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multibar').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect');\n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d,i) { return i });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n\n            var exitTransition = renderWatch\n                .transition(groups.exit().selectAll('rect.nv-bar'), 'multibarExit', Math.min(100, duration))\n                .attr('y', function(d, i, j) {\n                    var yVal = y0(0) || 0;\n                    if (stacked) {\n                        if (data[d.series] && !data[d.series].nonStackable) {\n                            yVal = y0(d.y0);\n                        }\n                    }\n                    return yVal;\n                })\n                .attr('height', 0)\n                .remove();\n            if (exitTransition.delay)\n                exitTransition.delay(function(d,i) {\n                    var delay = i * (duration / (last_datalength + 1)) - i;\n                    return delay;\n                });\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i) });\n            groups\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', fillOpacity);\n\n            var bars = groups.selectAll('rect.nv-bar')\n                .data(function(d) { return (hideable && !data.length) ? hideable.values : d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('rect')\n                    .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n                    .attr('x', function(d,i,j) {\n                        return stacked && !data[j].nonStackable ? 0 : (j * x.rangeBand() / data.length )\n                    })\n                    .attr('y', function(d,i,j) { return y0(stacked && !data[j].nonStackable ? d.y0 : 0) || 0 })\n                    .attr('height', 0)\n                    .attr('width', function(d,i,j) { return x.rangeBand() / (stacked && !data[j].nonStackable ? 1 : data.length) })\n                    .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n                ;\n            bars\n                .style('fill', function(d,i,j){ return color(d, j, i);  })\n                .style('stroke', function(d,i,j){ return color(d, j, i); })\n                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })\n\n            if (barColor) {\n                if (!disabled) disabled = data.map(function() { return true });\n                bars\n                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n            }\n\n            var barSelection =\n                bars.watchTransition(renderWatch, 'multibar', Math.min(250, duration))\n                    .delay(function(d,i) {\n                        return i * duration / data[0].values.length;\n                    });\n            if (stacked){\n                barSelection\n                    .attr('y', function(d,i,j) {\n                        var yVal = 0;\n                        // if stackable, stack it on top of the previous series\n                        if (!data[j].nonStackable) {\n                            yVal = y(d.y1);\n                        } else {\n                            if (getY(d,i) < 0){\n                                yVal = y(0);\n                            } else {\n                                if (y(0) - y(getY(d,i)) < -1){\n                                    yVal = y(0) - 1;\n                                } else {\n                                    yVal = y(getY(d, i)) || 0;\n                                }\n                            }\n                        }\n                        return yVal;\n                    })\n                    .attr('height', function(d,i,j) {\n                        if (!data[j].nonStackable) {\n                            return Math.max(Math.abs(y(d.y+d.y0) - y(d.y0)), 0);\n                        } else {\n                            return Math.max(Math.abs(y(getY(d,i)) - y(0)), 0) || 0;\n                        }\n                    })\n                    .attr('x', function(d,i,j) {\n                        var width = 0;\n                        if (data[j].nonStackable) {\n                            width = d.series * x.rangeBand() / data.length;\n                            if (data.length !== nonStackableCount){\n                                width = data[j].nonStackableSeries * x.rangeBand()/(nonStackableCount*2);\n                            }\n                        }\n                        return width;\n                    })\n                    .attr('width', function(d,i,j){\n                        if (!data[j].nonStackable) {\n                            return x.rangeBand();\n                        } else {\n                            // if all series are nonStacable, take the full width\n                            var width = (x.rangeBand() / nonStackableCount);\n                            // otherwise, nonStackable graph will be only taking the half-width\n                            // of the x rangeBand\n                            if (data.length !== nonStackableCount) {\n                                width = x.rangeBand()/(nonStackableCount*2);\n                            }\n                            return width;\n                        }\n                    });\n            }\n            else {\n                barSelection\n                    .attr('x', function(d,i) {\n                        return d.series * x.rangeBand() / data.length;\n                    })\n                    .attr('width', x.rangeBand() / data.length)\n                    .attr('y', function(d,i) {\n                        return getY(d,i) < 0 ?\n                            y(0) :\n                                y(0) - y(getY(d,i)) < 1 ?\n                            y(0) - 1 :\n                            y(getY(d,i)) || 0;\n                    })\n                    .attr('height', function(d,i) {\n                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0;\n                    });\n            }\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n            // keep track of the last data value length for transition calculations\n            if (data[0] && data[0].values) {\n                last_datalength = data[0].values.length;\n            }\n\n        });\n\n        renderWatch.renderEnd('multibar immediate');\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},\n        stackOffset: {get: function(){return stackOffset;}, set: function(_){stackOffset=_;}},\n        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        disabled:    {get: function(){return disabled;}, set: function(_){disabled=_;}},\n        id:          {get: function(){return id;}, set: function(_){id=_;}},\n        hideable:    {get: function(){return hideable;}, set: function(_){hideable=_;}},\n        groupSpacing:{get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},\n        fillOpacity: {get: function(){return fillOpacity;}, set: function(_){fillOpacity=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        barColor:  {get: function(){return barColor;}, set: function(_){\n            barColor = _ ? nv.utils.getColor(_) : null;\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.multiBarChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var multibar = nv.models.multiBar()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , interactiveLayer = nv.interactiveGuideline()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , controlLabels = {}\n        , showLegend = true\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , reduceXTicks = true // if false a tick will show for every data point\n        , staggerLabels = false\n        , wrapLabels = false\n        , rotateLabels = 0\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , controlWidth = function() { return showControls ? 180 : 0 }\n        , duration = 250\n        , useInteractiveGuideline = false\n        ;\n\n    state.stacked = false // DEPRECATED Maintained for backward compatibility\n\n    multibar.stacked(false);\n    xAxis\n        .orient('bottom')\n        .tickPadding(7)\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .valueFormatter(function(d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .valueFormatter(function (d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function (d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    var stacked = false;\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                stacked: stacked\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.stacked !== undefined)\n                stacked = state.stacked;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(multibar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition()\n                        .duration(duration)\n                        .call(chart);\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = multibar.xScale();\n            y = multibar.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multiBarWithLegend').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarWithLegend').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth - controlWidth());\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },\n                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }\n                ];\n\n                controls.width(controlWidth()).color(['#444', '#444', '#444']);\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n                    .call(controls);\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Main Chart Component(s)\n            multibar\n                .disabled(data.map(function(series) { return series.disabled }))\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.call(multibar);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize(-availableHeight, 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')');\n                g.select('.nv-x.nv-axis')\n                    .call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis > g').selectAll('g');\n\n                xTicks\n                    .selectAll('line, text')\n                    .style('opacity', 1)\n\n                if (staggerLabels) {\n                    var getTranslate = function(x,y) {\n                        return \"translate(\" + x + \",\" + y + \")\";\n                    };\n\n                    var staggerUp = 5, staggerDown = 17;  //pixels to stagger by\n                    // Issue #140\n                    xTicks\n                        .selectAll(\"text\")\n                        .attr('transform', function(d,i,j) {\n                            return  getTranslate(0, (j % 2 == 0 ? staggerUp : staggerDown));\n                        });\n\n                    var totalInBetweenTicks = d3.selectAll(\".nv-x.nv-axis .nv-wrap g g text\")[0].length;\n                    g.selectAll(\".nv-x.nv-axis .nv-axisMaxMin text\")\n                        .attr(\"transform\", function(d,i) {\n                            return getTranslate(0, (i === 0 || totalInBetweenTicks % 2 !== 0) ? staggerDown : staggerUp);\n                        });\n                }\n\n                if (wrapLabels) {\n                    g.selectAll('.tick text')\n                        .call(nv.utils.wrapTicks, chart.xAxis.rangeBand())\n                }\n\n                if (reduceXTicks)\n                    xTicks\n                        .filter(function(d,i) {\n                            return i % Math.ceil(data[0].values.length / (availableWidth / 100)) !== 0;\n                        })\n                        .selectAll('text, line')\n                        .style('opacity', 0);\n\n                if(rotateLabels)\n                    xTicks\n                        .selectAll('.tick text')\n                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')\n                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');\n\n                g.select('.nv-x.nv-axis').selectAll('g.nv-axisMaxMin text')\n                    .style('opacity', 1);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                switch (d.key) {\n                    case 'Grouped':\n                    case controlLabels.grouped:\n                        multibar.stacked(false);\n                        break;\n                    case 'Stacked':\n                    case controlLabels.stacked:\n                        multibar.stacked(true);\n                        break;\n                }\n\n                state.stacked = multibar.stacked();\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                if (typeof e.stacked !== 'undefined') {\n                    multibar.stacked(e.stacked);\n                    state.stacked = e.stacked;\n                    stacked = e.stacked;\n                }\n                chart.update();\n            });\n\n            if (useInteractiveGuideline) {\n                interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                    if (e.pointXValue == undefined) return;\n\n                    var singlePoint, pointIndex, pointXLocation, xValue, allData = [];\n                    data\n                        .filter(function(series, i) {\n                            series.seriesIndex = i;\n                            return !series.disabled;\n                        })\n                        .forEach(function(series,i) {\n                            pointIndex = x.domain().indexOf(e.pointXValue)\n\n                            var point = series.values[pointIndex];\n                            if (point === undefined) return;\n\n                            xValue = point.x;\n                            if (singlePoint === undefined) singlePoint = point;\n                            if (pointXLocation === undefined) pointXLocation = e.mouseX\n                            allData.push({\n                                key: series.key,\n                                value: chart.y()(point, pointIndex),\n                                color: color(series,series.seriesIndex),\n                                data: series.values[pointIndex]\n                            });\n                        });\n\n                    interactiveLayer.tooltip\n                        .data({\n                            value: xValue,\n                            index: pointIndex,\n                            series: allData\n                        })();\n\n                    interactiveLayer.renderGuideLine(pointXLocation);\n                });\n\n                interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                    interactiveLayer.tooltip.hidden(true);\n                });\n            }\n            else {\n                multibar.dispatch.on('elementMouseover.tooltip', function(evt) {\n                    evt.value = chart.x()(evt.data);\n                    evt['series'] = {\n                        key: evt.data.key,\n                        value: chart.y()(evt.data),\n                        color: evt.color\n                    };\n                    tooltip.data(evt).hidden(false);\n                });\n\n                multibar.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n\n                multibar.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n            }\n        });\n\n        renderWatch.renderEnd('multibarchart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.multibar = multibar;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.state = state;\n    chart.tooltip = tooltip;\n    chart.interactiveLayer = interactiveLayer;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        reduceXTicks:    {get: function(){return reduceXTicks;}, set: function(_){reduceXTicks=_;}},\n        rotateLabels:    {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},\n        staggerLabels:    {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},\n        wrapLabels:   {get: function(){return wrapLabels;}, set: function(_){wrapLabels=!!_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            multibar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n        }},\n        barColor:  {get: function(){return multibar.barColor;}, set: function(_){\n            multibar.barColor(_);\n            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, multibar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBarHorizontal = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.ordinal()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getYerr = function(d) { return d.yErr }\n        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove\n        , color = nv.utils.defaultColor()\n        , barColor = null // adding the ability to set the color for each rather than the whole group\n        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled\n        , stacked = false\n        , showValues = false\n        , showBarLabels = false\n        , valuePadding = 60\n        , groupSpacing = 0.1\n        , fillOpacity = 0.75\n        , valueFormat = d3.format(',.2f')\n        , delay = 1200\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , duration = 250\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0; //used to store previous scales\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            if (stacked)\n                data = d3.layout.stack()\n                    .offset('zero')\n                    .values(function(d){ return d.values })\n                    .y(getY)\n                (data);\n\n            //add series index and key to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                    point.key = series.key;\n                });\n            });\n\n            // HACK for negative value stacking\n            if (stacked)\n                data[0].values.map(function(d,i) {\n                    var posBase = 0, negBase = 0;\n                    data.map(function(d) {\n                        var f = d.values[i]\n                        f.size = Math.abs(f.y);\n                        if (f.y<0)  {\n                            f.y1 = negBase - f.size;\n                            negBase = negBase - f.size;\n                        } else\n                        {\n                            f.y1 = posBase;\n                            posBase = posBase + f.size;\n                        }\n                    });\n                });\n\n            // Setup Scales\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate\n                data.map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1 }\n                    })\n                });\n\n            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))\n                .rangeBands(xRange || [0, availableHeight], groupSpacing);\n\n            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return stacked ? (d.y > 0 ? d.y1 + d.y : d.y1 ) : d.y }).concat(forceY)))\n\n            if (showValues && !stacked)\n                y.range(yRange || [(y.domain()[0] < 0 ? valuePadding : 0), availableWidth - (y.domain()[1] > 0 ? valuePadding : 0) ]);\n            else\n                y.range(yRange || [0, availableWidth]);\n\n            x0 = x0 || x;\n            y0 = y0 || d3.scale.linear().domain(y.domain()).range([y(0),y(0)]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-multibarHorizontal').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibarHorizontal');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-groups');\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d,i) { return i });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit().watchTransition(renderWatch, 'multibarhorizontal: exit groups')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6)\n                .remove();\n            groups\n                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })\n                .classed('hover', function(d) { return d.hover })\n                .style('fill', function(d,i){ return color(d, i) })\n                .style('stroke', function(d,i){ return color(d, i) });\n            groups.watchTransition(renderWatch, 'multibarhorizontal: groups')\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', fillOpacity);\n\n            var bars = groups.selectAll('g.nv-bar')\n                .data(function(d) { return d.values });\n            bars.exit().remove();\n\n            var barsEnter = bars.enter().append('g')\n                .attr('transform', function(d,i,j) {\n                    return 'translate(' + y0(stacked ? d.y0 : 0) + ',' + (stacked ? 0 : (j * x.rangeBand() / data.length ) + x(getX(d,i))) + ')'\n                });\n\n            barsEnter.append('rect')\n                .attr('width', 0)\n                .attr('height', x.rangeBand() / (stacked ? 1 : data.length) )\n\n            bars\n                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here\n                    d3.select(this).classed('hover', true);\n                    dispatch.elementMouseover({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    dispatch.elementMouseout({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('mousemove', function(d,i) {\n                    dispatch.elementMousemove({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                })\n                .on('click', function(d,i) {\n                    var element = this;\n                    dispatch.elementClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\"),\n                        event: d3.event,\n                        element: element\n                    });\n                    d3.event.stopPropagation();\n                })\n                .on('dblclick', function(d,i) {\n                    dispatch.elementDblClick({\n                        data: d,\n                        index: i,\n                        color: d3.select(this).style(\"fill\")\n                    });\n                    d3.event.stopPropagation();\n                });\n\n            if (getYerr(data[0],0)) {\n                barsEnter.append('polyline');\n\n                bars.select('polyline')\n                    .attr('fill', 'none')\n                    .attr('points', function(d,i) {\n                        var xerr = getYerr(d,i)\n                            , mid = 0.8 * x.rangeBand() / ((stacked ? 1 : data.length) * 2);\n                        xerr = xerr.length ? xerr : [-Math.abs(xerr), Math.abs(xerr)];\n                        xerr = xerr.map(function(e) { return y(e) - y(0); });\n                        var a = [[xerr[0],-mid], [xerr[0],mid], [xerr[0],0], [xerr[1],0], [xerr[1],-mid], [xerr[1],mid]];\n                        return a.map(function (path) { return path.join(',') }).join(' ');\n                    })\n                    .attr('transform', function(d,i) {\n                        var mid = x.rangeBand() / ((stacked ? 1 : data.length) * 2);\n                        return 'translate(' + (getY(d,i) < 0 ? 0 : y(getY(d,i)) - y(0)) + ', ' + mid + ')'\n                    });\n            }\n\n            barsEnter.append('text');\n\n            if (showValues && !stacked) {\n                bars.select('text')\n                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'end' : 'start' })\n                    .attr('y', x.rangeBand() / (data.length * 2))\n                    .attr('dy', '.32em')\n                    .text(function(d,i) {\n                        var t = valueFormat(getY(d,i))\n                            , yerr = getYerr(d,i);\n                        if (yerr === undefined)\n                            return t;\n                        if (!yerr.length)\n                            return t + '±' + valueFormat(Math.abs(yerr));\n                        return t + '+' + valueFormat(Math.abs(yerr[1])) + '-' + valueFormat(Math.abs(yerr[0]));\n                    });\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .select('text')\n                    .attr('x', function(d,i) { return getY(d,i) < 0 ? -4 : y(getY(d,i)) - y(0) + 4 })\n            } else {\n                bars.selectAll('text').text('');\n            }\n\n            if (showBarLabels && !stacked) {\n                barsEnter.append('text').classed('nv-bar-label',true);\n                bars.select('text.nv-bar-label')\n                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'start' : 'end' })\n                    .attr('y', x.rangeBand() / (data.length * 2))\n                    .attr('dy', '.32em')\n                    .text(function(d,i) { return getX(d,i) });\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .select('text.nv-bar-label')\n                    .attr('x', function(d,i) { return getY(d,i) < 0 ? y(0) - y(getY(d,i)) + 4 : -4 });\n            }\n            else {\n                bars.selectAll('text.nv-bar-label').text('');\n            }\n\n            bars\n                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})\n\n            if (barColor) {\n                if (!disabled) disabled = data.map(function() { return true });\n                bars\n                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })\n                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });\n            }\n\n            if (stacked)\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .attr('transform', function(d,i) {\n                        return 'translate(' + y(d.y1) + ',' + x(getX(d,i)) + ')'\n                    })\n                    .select('rect')\n                    .attr('width', function(d,i) {\n                        return Math.abs(y(getY(d,i) + d.y0) - y(d.y0)) || 0\n                    })\n                    .attr('height', x.rangeBand() );\n            else\n                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')\n                    .attr('transform', function(d,i) {\n                        //TODO: stacked must be all positive or all negative, not both?\n                        return 'translate(' +\n                            (getY(d,i) < 0 ? y(getY(d,i)) : y(0))\n                            + ',' +\n                            (d.series * x.rangeBand() / data.length\n                                +\n                                x(getX(d,i)) )\n                            + ')'\n                    })\n                    .select('rect')\n                    .attr('height', x.rangeBand() / data.length )\n                    .attr('width', function(d,i) {\n                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0\n                    });\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('multibarHorizontal immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:   {get: function(){return width;}, set: function(_){width=_;}},\n        height:  {get: function(){return height;}, set: function(_){height=_;}},\n        x:       {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:       {get: function(){return getY;}, set: function(_){getY=_;}},\n        yErr:       {get: function(){return getYerr;}, set: function(_){getYerr=_;}},\n        xScale:  {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:  {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},\n        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},\n        // this shows the group name, seems pointless?\n        //showBarLabels:    {get: function(){return showBarLabels;}, set: function(_){showBarLabels=_;}},\n        disabled:     {get: function(){return disabled;}, set: function(_){disabled=_;}},\n        id:           {get: function(){return id;}, set: function(_){id=_;}},\n        valueFormat:  {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        valuePadding: {get: function(){return valuePadding;}, set: function(_){valuePadding=_;}},\n        groupSpacing: {get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},\n        fillOpacity:  {get: function(){return fillOpacity;}, set: function(_){fillOpacity=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        barColor:  {get: function(){return barColor;}, set: function(_){\n            barColor = _ ? nv.utils.getColor(_) : null;\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.multiBarHorizontalChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var multibar = nv.models.multiBarHorizontal()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend().height(30)\n        , controls = nv.models.legend().height(30)\n        , tooltip = nv.models.tooltip()\n        ;\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , controlLabels = {}\n        , showLegend = true\n        , showXAxis = true\n        , showYAxis = true\n        , stacked = false\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        , controlWidth = function() { return showControls ? 180 : 0 }\n        , duration = 250\n        ;\n\n    state.stacked = false; // DEPRECATED Maintained for backward compatibility\n\n    multibar.stacked(stacked);\n\n    xAxis\n        .orient('left')\n        .tickPadding(5)\n        .showMaxMin(false)\n        .tickFormat(function(d) { return d })\n    ;\n    yAxis\n        .orient('bottom')\n        .tickFormat(d3.format(',.1f'))\n    ;\n\n    tooltip\n        .duration(0)\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        })\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        });\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                stacked: stacked\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.stacked !== undefined)\n                stacked = state.stacked;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(multibar);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().duration(duration).call(chart) };\n            chart.container = this;\n\n            stacked = multibar.stacked();\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = multibar.xScale();\n            y = multibar.yScale().clamp(true);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-multiBarHorizontalChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarHorizontalChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis')\n                .append('g').attr('class', 'nv-zeroLine')\n                .append('line');\n            gEnter.append('g').attr('class', 'nv-barsWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                legend.width(availableWidth - controlWidth());\n\n                g.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.nv-legendWrap')\n                    .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },\n                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }\n                ];\n\n                controls.width(controlWidth()).color(['#444', '#444', '#444']);\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .attr('transform', 'translate(0,' + (-margin.top) +')')\n                    .call(controls);\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            multibar\n                .disabled(data.map(function(series) { return series.disabled }))\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled }));\n\n            var barsWrap = g.select('.nv-barsWrap')\n                .datum(data.filter(function(d) { return !d.disabled }));\n\n            barsWrap.transition().call(multibar);\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/24, data) )\n                    .tickSize(-availableWidth, 0);\n\n                g.select('.nv-x.nv-axis').call(xAxis);\n\n                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');\n\n                xTicks\n                    .selectAll('line, text');\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .attr('transform', 'translate(0,' + availableHeight + ')');\n                g.select('.nv-y.nv-axis').call(yAxis);\n            }\n\n            // Zero line\n            g.select(\".nv-zeroLine line\")\n                .attr(\"x1\", y(0))\n                .attr(\"x2\", y(0))\n                .attr(\"y1\", 0)\n                .attr(\"y2\", -availableHeight)\n            ;\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                switch (d.key) {\n                    case 'Grouped':\n                    case controlLabels.grouped:\n                        multibar.stacked(false);\n                        break;\n                    case 'Stacked':\n                    case controlLabels.stacked:\n                        multibar.stacked(true);\n                        break;\n                }\n\n                state.stacked = multibar.stacked();\n                dispatch.stateChange(state);\n                stacked = multibar.stacked();\n\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.stacked !== 'undefined') {\n                    multibar.stacked(e.stacked);\n                    state.stacked = e.stacked;\n                    stacked = e.stacked;\n                }\n\n                chart.update();\n            });\n        });\n        renderWatch.renderEnd('multibar horizontal chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    multibar.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.value = chart.x()(evt.data);\n        evt['series'] = {\n            key: evt.data.key,\n            value: chart.y()(evt.data),\n            color: evt.color\n        };\n        tooltip.data(evt).hidden(false);\n    });\n\n    multibar.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    multibar.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.multibar = multibar;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.state = state;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            multibar.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n        }},\n        barColor:  {get: function(){return multibar.barColor;}, set: function(_){\n            multibar.barColor(_);\n            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, multibar);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\nnv.models.multiChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 30, right: 20, bottom: 50, left: 60},\n        marginTop = null,\n        color = nv.utils.defaultColor(),\n        width = null,\n        height = null,\n        showLegend = true,\n        noData = null,\n        yDomain1,\n        yDomain2,\n        getX = function(d) { return d.x },\n        getY = function(d) { return d.y},\n        interpolate = 'linear',\n        useVoronoi = true,\n        interactiveLayer = nv.interactiveGuideline(),\n        useInteractiveGuideline = false,\n        legendRightAxisHint = ' (right axis)',\n        duration = 250\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x = d3.scale.linear(),\n        yScale1 = d3.scale.linear(),\n        yScale2 = d3.scale.linear(),\n\n        lines1 = nv.models.line().yScale(yScale1).duration(duration),\n        lines2 = nv.models.line().yScale(yScale2).duration(duration),\n\n        scatters1 = nv.models.scatter().yScale(yScale1).duration(duration),\n        scatters2 = nv.models.scatter().yScale(yScale2).duration(duration),\n\n        bars1 = nv.models.multiBar().stacked(false).yScale(yScale1).duration(duration),\n        bars2 = nv.models.multiBar().stacked(false).yScale(yScale2).duration(duration),\n\n        stack1 = nv.models.stackedArea().yScale(yScale1).duration(duration),\n        stack2 = nv.models.stackedArea().yScale(yScale2).duration(duration),\n\n        xAxis = nv.models.axis().scale(x).orient('bottom').tickPadding(5).duration(duration),\n        yAxis1 = nv.models.axis().scale(yScale1).orient('left').duration(duration),\n        yAxis2 = nv.models.axis().scale(yScale2).orient('right').duration(duration),\n\n        legend = nv.models.legend().height(30),\n        tooltip = nv.models.tooltip(),\n        dispatch = d3.dispatch();\n\n    var charts = [lines1, lines2, scatters1, scatters2, bars1, bars2, stack1, stack2];\n\n    function chart(selection) {\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n\n            chart.update = function() { container.transition().call(chart); };\n            chart.container = this;\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            var dataLines1 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 1});\n            var dataLines2 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 2});\n            var dataScatters1 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 1});\n            var dataScatters2 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 2});\n            var dataBars1 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 1});\n            var dataBars2 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 2});\n            var dataStack1 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 1});\n            var dataStack2 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 2});\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var series1 = data.filter(function(d) {return !d.disabled && d.yAxis == 1})\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d), y: getY(d) }\n                    })\n                });\n\n            var series2 = data.filter(function(d) {return !d.disabled && d.yAxis == 2})\n                .map(function(d) {\n                    return d.values.map(function(d,i) {\n                        return { x: getX(d), y: getY(d) }\n                    })\n                });\n\n            x   .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x }))\n                .range([0, availableWidth]);\n\n            var wrap = container.selectAll('g.wrap.multiChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'wrap nvd3 multiChart').append('g');\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y1 nv-axis');\n            gEnter.append('g').attr('class', 'nv-y2 nv-axis');\n            gEnter.append('g').attr('class', 'stack1Wrap');\n            gEnter.append('g').attr('class', 'stack2Wrap');\n            gEnter.append('g').attr('class', 'bars1Wrap');\n            gEnter.append('g').attr('class', 'bars2Wrap');\n            gEnter.append('g').attr('class', 'scatters1Wrap');\n            gEnter.append('g').attr('class', 'scatters2Wrap');\n            gEnter.append('g').attr('class', 'lines1Wrap');\n            gEnter.append('g').attr('class', 'lines2Wrap');\n            gEnter.append('g').attr('class', 'legendWrap');\n            gEnter.append('g').attr('class', 'nv-interactive');\n\n            var g = wrap.select('g');\n\n            var color_array = data.map(function(d,i) {\n                return data[i].color || color(d, i);\n            });\n\n            // Legend\n            if (!showLegend) {\n                g.select('.legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;\n                var legendXPosition = legend.align() ? legendWidth : 0;\n\n                legend.width(legendWidth);\n                legend.color(color_array);\n\n                g.select('.legendWrap')\n                    .datum(data.map(function(series) {\n                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;\n                        series.key = series.originalKey + (series.yAxis == 1 ? '' : legendRightAxisHint);\n                        return series;\n                    }))\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                g.select('.legendWrap')\n                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');\n            }\n\n            lines1\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'line'}));\n            lines2\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'line'}));\n            scatters1\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'scatter'}));\n            scatters2\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'scatter'}));\n            bars1\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'bar'}));\n            bars2\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'bar'}));\n            stack1\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'area'}));\n            stack2\n                .width(availableWidth)\n                .height(availableHeight)\n                .interpolate(interpolate)\n                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'area'}));\n\n            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            var lines1Wrap = g.select('.lines1Wrap')\n                .datum(dataLines1.filter(function(d){return !d.disabled}));\n            var scatters1Wrap = g.select('.scatters1Wrap')\n                .datum(dataScatters1.filter(function(d){return !d.disabled}));\n            var bars1Wrap = g.select('.bars1Wrap')\n                .datum(dataBars1.filter(function(d){return !d.disabled}));\n            var stack1Wrap = g.select('.stack1Wrap')\n                .datum(dataStack1.filter(function(d){return !d.disabled}));\n            var lines2Wrap = g.select('.lines2Wrap')\n                .datum(dataLines2.filter(function(d){return !d.disabled}));\n            var scatters2Wrap = g.select('.scatters2Wrap')\n                .datum(dataScatters2.filter(function(d){return !d.disabled}));\n            var bars2Wrap = g.select('.bars2Wrap')\n                .datum(dataBars2.filter(function(d){return !d.disabled}));\n            var stack2Wrap = g.select('.stack2Wrap')\n                .datum(dataStack2.filter(function(d){return !d.disabled}));\n\n            var extraValue1 = dataStack1.length ? dataStack1.map(function(a){return a.values}).reduce(function(a,b){\n                return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n            }).concat([{x:0, y:0}]) : [];\n            var extraValue2 = dataStack2.length ? dataStack2.map(function(a){return a.values}).reduce(function(a,b){\n                return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})\n            }).concat([{x:0, y:0}]) : [];\n\n            yScale1 .domain(yDomain1 || d3.extent(d3.merge(series1).concat(extraValue1), function(d) { return d.y } ))\n                .range([0, availableHeight]);\n\n            yScale2 .domain(yDomain2 || d3.extent(d3.merge(series2).concat(extraValue2), function(d) { return d.y } ))\n                .range([0, availableHeight]);\n\n            lines1.yDomain(yScale1.domain());\n            scatters1.yDomain(yScale1.domain());\n            bars1.yDomain(yScale1.domain());\n            stack1.yDomain(yScale1.domain());\n\n            lines2.yDomain(yScale2.domain());\n            scatters2.yDomain(yScale2.domain());\n            bars2.yDomain(yScale2.domain());\n            stack2.yDomain(yScale2.domain());\n\n            if(dataStack1.length){d3.transition(stack1Wrap).call(stack1);}\n            if(dataStack2.length){d3.transition(stack2Wrap).call(stack2);}\n\n            if(dataBars1.length){d3.transition(bars1Wrap).call(bars1);}\n            if(dataBars2.length){d3.transition(bars2Wrap).call(bars2);}\n\n            if(dataLines1.length){d3.transition(lines1Wrap).call(lines1);}\n            if(dataLines2.length){d3.transition(lines2Wrap).call(lines2);}\n\n            if(dataScatters1.length){d3.transition(scatters1Wrap).call(scatters1);}\n            if(dataScatters2.length){d3.transition(scatters2Wrap).call(scatters2);}\n\n            xAxis\n                ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                .tickSize(-availableHeight, 0);\n\n            g.select('.nv-x.nv-axis')\n                .attr('transform', 'translate(0,' + availableHeight + ')');\n            d3.transition(g.select('.nv-x.nv-axis'))\n                .call(xAxis);\n\n            yAxis1\n                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                .tickSize( -availableWidth, 0);\n\n\n            d3.transition(g.select('.nv-y1.nv-axis'))\n                .call(yAxis1);\n\n            yAxis2\n                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                .tickSize( -availableWidth, 0);\n\n            d3.transition(g.select('.nv-y2.nv-axis'))\n                .call(yAxis2);\n\n            g.select('.nv-y1.nv-axis')\n                .classed('nv-disabled', series1.length ? false : true)\n                .attr('transform', 'translate(' + x.range()[0] + ',0)');\n\n            g.select('.nv-y2.nv-axis')\n                .classed('nv-disabled', series2.length ? false : true)\n                .attr('transform', 'translate(' + x.range()[1] + ',0)');\n\n            legend.dispatch.on('stateChange', function(newState) {\n                chart.update();\n            });\n\n            if(useInteractiveGuideline){\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left:margin.left, top:margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching\n            //------------------------------------------------------------\n\n            function mouseover_line(evt) {\n                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;\n                evt.value = evt.point.x;\n                evt.series = {\n                    value: evt.point.y,\n                    color: evt.point.color,\n                    key: evt.series.key\n                };\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_scatter(evt) {\n                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;\n                evt.value = evt.point.x;\n                evt.series = {\n                    value: evt.point.y,\n                    color: evt.point.color,\n                    key: evt.series.key\n                };\n                tooltip\n                    .duration(100)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_stack(evt) {\n                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;\n                evt.point['x'] = stack1.x()(evt.point);\n                evt.point['y'] = stack1.y()(evt.point);\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n            function mouseover_bar(evt) {\n                var yaxis = data[evt.data.series].yAxis === 2 ? yAxis2 : yAxis1;\n\n                evt.value = bars1.x()(evt.data);\n                evt['series'] = {\n                    value: bars1.y()(evt.data),\n                    color: evt.color,\n                    key: evt.data.key\n                };\n                tooltip\n                    .duration(0)\n                    .headerFormatter(function(d, i) {\n                    \treturn xAxis.tickFormat()(d, i);\n                    })\n                    .valueFormatter(function(d, i) {\n                        return yaxis.tickFormat()(d, i);\n                    })\n                    .data(evt)\n                    .hidden(false);\n            }\n\n\n\n            function clearHighlights() {\n              for(var i=0, il=charts.length; i < il; i++){\n                var chart = charts[i];\n                try {\n                  chart.clearHighlights();\n                } catch(e){}\n              }\n            }\n\n            function highlightPoint(serieIndex, pointIndex, b){\n              for(var i=0, il=charts.length; i < il; i++){\n                var chart = charts[i];\n                try {\n                  chart.highlightPoint(serieIndex, pointIndex, b);\n                } catch(e){}\n              }\n            }\n\n            if(useInteractiveGuideline){\n                interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                    clearHighlights();\n                    var singlePoint, pointIndex, pointXLocation, allData = [];\n                    data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        var extent = x.domain();\n                        var currentValues = series.values.filter(function(d,i) {\n                            return chart.x()(d,i) >= extent[0] && chart.x()(d,i) <= extent[1];\n                        });\n\n                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, chart.x());\n                        var point = currentValues[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue !== null) {\n                            highlightPoint(i, pointIndex, true);\n                        }\n                        if (point === undefined) return;\n                        if (singlePoint === undefined) singlePoint = point;\n                        if (pointXLocation === undefined) pointXLocation = x(chart.x()(point,pointIndex));\n                        allData.push({\n                            key: series.key,\n                            value: pointYValue,\n                            color: color(series,series.seriesIndex),\n                            data: point,\n                            yAxis: series.yAxis == 2 ? yAxis2 : yAxis1\n                        });\n                    });\n\n                    var defaultValueFormatter = function(d,i) {\n                        var yAxis = allData[i].yAxis;\n                        return d == null ? \"N/A\" : yAxis.tickFormat()(d);\n                    };\n\n                    interactiveLayer.tooltip\n                        .headerFormatter(function(d, i) {\n                            return xAxis.tickFormat()(d, i);\n                        })\n                        .valueFormatter(interactiveLayer.tooltip.valueFormatter() || defaultValueFormatter)\n                        .data({\n                            value: chart.x()( singlePoint,pointIndex ),\n                            index: pointIndex,\n                            series: allData\n                        })();\n\n                    interactiveLayer.renderGuideLine(pointXLocation);\n                });\n\n                interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                    clearHighlights();\n                });\n            } else {\n                lines1.dispatch.on('elementMouseover.tooltip', mouseover_line);\n                lines2.dispatch.on('elementMouseover.tooltip', mouseover_line);\n                lines1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                lines2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                scatters1.dispatch.on('elementMouseover.tooltip', mouseover_scatter);\n                scatters2.dispatch.on('elementMouseover.tooltip', mouseover_scatter);\n                scatters1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                scatters2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                stack1.dispatch.on('elementMouseover.tooltip', mouseover_stack);\n                stack2.dispatch.on('elementMouseover.tooltip', mouseover_stack);\n                stack1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n                stack2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true)\n                });\n\n                bars1.dispatch.on('elementMouseover.tooltip', mouseover_bar);\n                bars2.dispatch.on('elementMouseover.tooltip', mouseover_bar);\n\n                bars1.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n                bars2.dispatch.on('elementMouseout.tooltip', function(evt) {\n                    tooltip.hidden(true);\n                });\n                bars1.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n                bars2.dispatch.on('elementMousemove.tooltip', function(evt) {\n                    tooltip();\n                });\n            }\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Global getters and setters\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.legend = legend;\n    chart.lines1 = lines1;\n    chart.lines2 = lines2;\n    chart.scatters1 = scatters1;\n    chart.scatters2 = scatters2;\n    chart.bars1 = bars1;\n    chart.bars2 = bars2;\n    chart.stack1 = stack1;\n    chart.stack2 = stack2;\n    chart.xAxis = xAxis;\n    chart.yAxis1 = yAxis1;\n    chart.yAxis2 = yAxis2;\n    chart.tooltip = tooltip;\n    chart.interactiveLayer = interactiveLayer;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        yDomain1:      {get: function(){return yDomain1;}, set: function(_){yDomain1=_;}},\n        yDomain2:    {get: function(){return yDomain2;}, set: function(_){yDomain2=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        x: {get: function(){return getX;}, set: function(_){\n            getX = _;\n            lines1.x(_);\n            lines2.x(_);\n            scatters1.x(_);\n            scatters2.x(_);\n            bars1.x(_);\n            bars2.x(_);\n            stack1.x(_);\n            stack2.x(_);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY = _;\n            lines1.y(_);\n            lines2.y(_);\n            scatters1.y(_);\n            scatters2.y(_);\n            stack1.y(_);\n            stack2.y(_);\n            bars1.y(_);\n            bars2.y(_);\n        }},\n        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){\n            useVoronoi=_;\n            lines1.useVoronoi(_);\n            lines2.useVoronoi(_);\n            stack1.useVoronoi(_);\n            stack2.useVoronoi(_);\n        }},\n\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = _;\n            if (useInteractiveGuideline) {\n                lines1.interactive(false);\n                lines1.useVoronoi(false);\n                lines2.interactive(false);\n                lines2.useVoronoi(false);\n                stack1.interactive(false);\n                stack1.useVoronoi(false);\n                stack2.interactive(false);\n                stack2.useVoronoi(false);\n                scatters1.interactive(false);\n                scatters2.interactive(false);\n            }\n        }},\n\n        duration: {get: function(){return duration;}, set: function(_) {\n            duration = _;\n            [lines1, lines2, stack1, stack2, scatters1, scatters2, xAxis, yAxis1, yAxis2].forEach(function(model){\n              model.duration(duration);\n            });\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.ohlcBar = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = null\n        , height = null\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , getOpen = function(d) { return d.open }\n        , getClose = function(d) { return d.close }\n        , getHigh = function(d) { return d.high }\n        , getLow = function(d) { return d.low }\n        , forceX = []\n        , forceY = []\n        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , clipEdge = true\n        , color = nv.utils.defaultColor()\n        , interactive = false\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            // ohlc bar width.\n            var w = (availableWidth / data[0].values.length) * .9;\n\n            // Setup Scales\n            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));\n\n            if (padData)\n                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [5 + w/2, availableWidth - w/2 - 5]);\n\n            y.domain(yDomain || [\n                    d3.min(data[0].values.map(getLow).concat(forceY)),\n                    d3.max(data[0].values.map(getHigh).concat(forceY))\n                ]\n            ).range(yRange || [availableHeight, 0]);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            // Setup containers and skeleton of chart\n            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-ohlcBar').data([data[0].values]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-ohlcBar');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-ticks');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            container\n                .on('click', function(d,i) {\n                    dispatch.chartClick({\n                        data: d,\n                        index: i,\n                        pos: d3.event,\n                        id: id\n                    });\n                });\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-chart-clip-path-' + id)\n                .append('rect');\n\n            wrap.select('#nv-chart-clip-path-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');\n\n            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')\n                .data(function(d) { return d });\n            ticks.exit().remove();\n\n            ticks.enter().append('path')\n                .attr('class', function(d,i,j) { return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i })\n                .attr('d', function(d,i) {\n                    return 'm0,0l0,'\n                        + (y(getOpen(d,i))\n                            - y(getHigh(d,i)))\n                        + 'l'\n                        + (-w/2)\n                        + ',0l'\n                        + (w/2)\n                        + ',0l0,'\n                        + (y(getLow(d,i)) - y(getOpen(d,i)))\n                        + 'l0,'\n                        + (y(getClose(d,i))\n                            - y(getLow(d,i)))\n                        + 'l'\n                        + (w/2)\n                        + ',0l'\n                        + (-w/2)\n                        + ',0z';\n                })\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n                .attr('fill', function(d,i) { return color[0]; })\n                .attr('stroke', function(d,i) { return color[0]; })\n                .attr('x', 0 )\n                .attr('y', function(d,i) {  return y(Math.max(0, getY(d,i))) })\n                .attr('height', function(d,i) { return Math.abs(y(getY(d,i)) - y(0)) });\n\n            // the bar colors are controlled by CSS currently\n            ticks.attr('class', function(d,i,j) {\n                return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i;\n            });\n\n            d3.transition(ticks)\n                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })\n                .attr('d', function(d,i) {\n                    var w = (availableWidth / data[0].values.length) * .9;\n                    return 'm0,0l0,'\n                        + (y(getOpen(d,i))\n                            - y(getHigh(d,i)))\n                        + 'l'\n                        + (-w/2)\n                        + ',0l'\n                        + (w/2)\n                        + ',0l0,'\n                        + (y(getLow(d,i))\n                            - y(getOpen(d,i)))\n                        + 'l0,'\n                        + (y(getClose(d,i))\n                            - y(getLow(d,i)))\n                        + 'l'\n                        + (w/2)\n                        + ',0l'\n                        + (-w/2)\n                        + ',0z';\n                });\n        });\n\n        return chart;\n    }\n\n\n    //Create methods to allow outside functions to highlight a specific bar.\n    chart.highlightPoint = function(pointIndex, isHoverOver) {\n        chart.clearHighlights();\n        container.select(\".nv-ohlcBar .nv-tick-0-\" + pointIndex)\n            .classed(\"hover\", isHoverOver)\n        ;\n    };\n\n    chart.clearHighlights = function() {\n        container.select(\".nv-ohlcBar .nv-tick.hover\")\n            .classed(\"hover\", false)\n        ;\n    };\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:    {get: function(){return width;}, set: function(_){width=_;}},\n        height:   {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:   {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:   {get: function(){return y;}, set: function(_){y=_;}},\n        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        id:       {get: function(){return id;}, set: function(_){id=_;}},\n        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},\n\n        x:     {get: function(){return getX;}, set: function(_){getX=_;}},\n        y:     {get: function(){return getY;}, set: function(_){getY=_;}},\n        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},\n        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},\n        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},\n        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n// Code adapted from Jason Davies' \"Parallel Coordinates\"\n// http://bl.ocks.org/jasondavies/1341281\nnv.models.parallelCoordinates = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 30, right: 0, bottom: 10, left: 0}\n        , width = null\n        , height = null\n        , availableWidth = null\n        , availableHeight = null\n        , x = d3.scale.ordinal()\n        , y = {}\n        , undefinedValuesLabel = \"undefined values\"\n        , dimensionData = []\n        , enabledDimensions = []\n        , dimensionNames = []\n        , displayBrush = true\n        , color = nv.utils.defaultColor()\n        , filters = []\n        , active = []\n        , dragging = []\n        , axisWithUndefinedValues = []\n        , lineTension = 1\n        , foreground\n        , background\n        , dimensions\n        , line = d3.svg.line()\n        , axis = d3.svg.axis()\n        , dispatch = d3.dispatch('brushstart', 'brush', 'brushEnd', 'dimensionsOrder', \"stateChange\", 'elementClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd', 'activeChanged')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var container = d3.select(this);\n            availableWidth = nv.utils.availableWidth(width, container, margin);\n            availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n           //Convert old data to new format (name, values)\n            if (data[0].values === undefined) {\n                var newData = [];\n                data.forEach(function (d) {\n                        var val = {};\n                        var key = Object.keys(d);\n                        key.forEach(function (k) { if (k !== \"name\") val[k] = d[k] });\n                        newData.push({ key: d.name, values: val });\n                });\n                data = newData;\n            }\n\n            var dataValues = data.map(function (d) {return d.values});\n            if (active.length === 0) {\n                active = data;\n            }; //set all active before first brush call\n            \n            dimensionNames = dimensionData.sort(function (a, b) { return a.currentPosition - b.currentPosition; }).map(function (d) { return d.key });\n            enabledDimensions = dimensionData.filter(function (d) { return !d.disabled; });\n            \n            // Setup Scales\n            x.rangePoints([0, availableWidth], 1).domain(enabledDimensions.map(function (d) { return d.key; }));\n\n            //Set as true if all values on an axis are missing.\n            // Extract the list of dimensions and create a scale for each.\n            var oldDomainMaxValue = {};\n            var displayMissingValuesline = false;\n            var currentTicks = [];\n            \n            dimensionNames.forEach(function(d) {\n                var extent = d3.extent(dataValues, function (p) { return +p[d]; });\n                var min = extent[0];\n                var max = extent[1];\n                var onlyUndefinedValues = false;\n                //If there is no values to display on an axis, set the extent to 0\n                if (isNaN(min) || isNaN(max)) {\n                    onlyUndefinedValues = true;\n                    min = 0;\n                    max = 0;\n                }\n                //Scale axis if there is only one value\n                if (min === max) {\n                    min = min - 1;\n                    max = max + 1;\n                }\n                var f = filters.filter(function (k) { return k.dimension == d; });\n                if (f.length !== 0) {\n                    //If there is only NaN values, keep the existing domain.\n                    if (onlyUndefinedValues) {\n                        min = y[d].domain()[0];\n                        max = y[d].domain()[1];\n                    }\n                        //If the brush extent is > max (< min), keep the extent value.\n                    else if (!f[0].hasOnlyNaN && displayBrush) {\n                        min = min > f[0].extent[0] ? f[0].extent[0] : min;\n                        max = max < f[0].extent[1] ? f[0].extent[1] : max;\n                    }\n                        //If there is NaN values brushed be sure the brush extent is on the domain.\n                    else if (f[0].hasNaN) {\n                        max = max < f[0].extent[1] ? f[0].extent[1] : max;\n                        oldDomainMaxValue[d] = y[d].domain()[1];\n                        displayMissingValuesline = true;\n                    }\n                }\n                //Use 90% of (availableHeight - 12) for the axis range, 12 reprensenting the space necessary to display \"undefined values\" text.\n                //The remaining 10% are used to display the missingValue line.\n                y[d] = d3.scale.linear()\n                    .domain([min, max])\n                    .range([(availableHeight - 12) * 0.9, 0]);\n\n                axisWithUndefinedValues = [];\n                y[d].brush = d3.svg.brush().y(y[d]).on('brushstart', brushstart).on('brush', brush).on('brushend', brushend);\n            });\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinates').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinates');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates background');\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates foreground');\n            gEnter.append('g').attr('class', 'nv-parallelCoordinates missingValuesline');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            line.interpolate('cardinal').tension(lineTension);\n            axis.orient('left');\n            var axisDrag = d3.behavior.drag()\n                        .on('dragstart', dragStart)\n                        .on('drag', dragMove)\n                        .on('dragend', dragEnd);\n\n            //Add missing value line at the bottom of the chart\n            var missingValuesline, missingValueslineText;\n            var step = x.range()[1] - x.range()[0];\n            step = isNaN(step) ? x.range()[0] : step;\n            if (!isNaN(step)) {\n                var lineData = [0 + step / 2, availableHeight - 12, availableWidth - step / 2, availableHeight - 12];\n                missingValuesline = wrap.select('.missingValuesline').selectAll('line').data([lineData]);\n                missingValuesline.enter().append('line');\n                missingValuesline.exit().remove();\n                missingValuesline.attr(\"x1\", function(d) { return d[0]; })\n                        .attr(\"y1\", function(d) { return d[1]; })\n                        .attr(\"x2\", function(d) { return d[2]; })\n                        .attr(\"y2\", function(d) { return d[3]; });\n    \n                //Add the text \"undefined values\" under the missing value line\n                missingValueslineText = wrap.select('.missingValuesline').selectAll('text').data([undefinedValuesLabel]);\n                missingValueslineText.append('text').data([undefinedValuesLabel]);\n                missingValueslineText.enter().append('text');\n                missingValueslineText.exit().remove();\n                missingValueslineText.attr(\"y\", availableHeight)\n                        //To have the text right align with the missingValues line, substract 92 representing the text size.\n                        .attr(\"x\", availableWidth - 92 - step / 2)\n                        .text(function(d) { return d; });\n            }\n            // Add grey background lines for context.\n            background = wrap.select('.background').selectAll('path').data(data);\n            background.enter().append('path');\n            background.exit().remove();\n            background.attr('d', path);\n\n            // Add blue foreground lines for focus.\n            foreground = wrap.select('.foreground').selectAll('path').data(data);\n            foreground.enter().append('path')\n            foreground.exit().remove();\n            foreground.attr('d', path)\n                .style(\"stroke-width\", function (d, i) {\n                if (isNaN(d.strokeWidth)) { d.strokeWidth = 1;} return d.strokeWidth;})\n                .attr('stroke', function (d, i) { return d.color || color(d, i); });\n            foreground.on(\"mouseover\", function (d, i) {\n                d3.select(this).classed('hover', true).style(\"stroke-width\", d.strokeWidth + 2 + \"px\").style(\"stroke-opacity\", 1);\n                dispatch.elementMouseover({\n                    label: d.name,\n                    color: d.color || color(d, i),\n                    values: d.values,\n                    dimensions: enabledDimensions\n                });\n\n            });\n            foreground.on(\"mouseout\", function (d, i) {\n                d3.select(this).classed('hover', false).style(\"stroke-width\", d.strokeWidth + \"px\").style(\"stroke-opacity\", 0.7);\n                dispatch.elementMouseout({\n                    label: d.name,\n                    index: i\n                });\n            });\n            foreground.on('mousemove', function (d, i) {\n                dispatch.elementMousemove();\n            });\n            foreground.on('click', function (d) {\n                dispatch.elementClick({\n                    id: d.id\n                });\n            });\n            // Add a group element for each dimension.\n            dimensions = g.selectAll('.dimension').data(enabledDimensions);\n            var dimensionsEnter = dimensions.enter().append('g').attr('class', 'nv-parallelCoordinates dimension');\n\n            dimensions.attr('transform', function(d) { return 'translate(' + x(d.key) + ',0)'; });\n            dimensionsEnter.append('g').attr('class', 'nv-axis');\n\n            // Add an axis and title.\n            dimensionsEnter.append('text')\n                .attr('class', 'nv-label')\n                .style(\"cursor\", \"move\")\n                .attr('dy', '-1em')\n                .attr('text-anchor', 'middle')\n                .on(\"mouseover\", function(d, i) {\n                    dispatch.elementMouseover({\n                        label: d.tooltip || d.key,\n                        color: d.color \n                    });\n                })\n                .on(\"mouseout\", function(d, i) {\n                    dispatch.elementMouseout({\n                        label: d.tooltip\n                    });\n                })\n                .on('mousemove', function (d, i) {\n                    dispatch.elementMousemove();\n                })\n                .call(axisDrag);\n\n            dimensionsEnter.append('g').attr('class', 'nv-brushBackground');\n            dimensions.exit().remove();\n            dimensions.select('.nv-label').text(function (d) { return d.key });\n\n            // Add and store a brush for each axis.\n            restoreBrush(displayBrush);\n\n            var actives = dimensionNames.filter(function (p) { return !y[p].brush.empty(); }),\n                    extents = actives.map(function (p) { return y[p].brush.extent(); });\n            var formerActive = active.slice(0);\n\n            //Restore active values\n            active = [];\n            foreground.style(\"display\", function (d) {\n                var isActive = actives.every(function (p, i) {\n                    if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) {\n                        return true;\n                    }\n                    return (extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1]) && !isNaN(parseFloat(d.values[p]));\n                });\n                if (isActive)\n                    active.push(d);\n                return !isActive ? \"none\" : null;\n\n            });\n\n            if (filters.length > 0 || !nv.utils.arrayEquals(active, formerActive)) {\n               dispatch.activeChanged(active);\n            }\n\n            // Returns the path for a given data point.\n            function path(d) {\n                return line(enabledDimensions.map(function (p) {\n                    //If value if missing, put the value on the missing value line\n                    if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key])) || displayMissingValuesline) {\n                        var domain = y[p.key].domain();\n                        var range = y[p.key].range();\n                        var min = domain[0] - (domain[1] - domain[0]) / 9;\n\n                        //If it's not already the case, allow brush to select undefined values\n                        if (axisWithUndefinedValues.indexOf(p.key) < 0) {\n\n                            var newscale = d3.scale.linear().domain([min, domain[1]]).range([availableHeight - 12, range[1]]);\n                            y[p.key].brush.y(newscale);\n                            axisWithUndefinedValues.push(p.key);\n                        }\n                        if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key]))) {\n                            return [x(p.key), y[p.key](min)];\n                        }\n                    }\n\n                    //If parallelCoordinate contain missing values show the missing values line otherwise, hide it.\n                    if (missingValuesline !== undefined) {\n                        if (axisWithUndefinedValues.length > 0 || displayMissingValuesline) {\n                            missingValuesline.style(\"display\", \"inline\");\n                            missingValueslineText.style(\"display\", \"inline\");\n                        } else {\n                            missingValuesline.style(\"display\", \"none\");\n                            missingValueslineText.style(\"display\", \"none\");\n                        }\n                    }\n                    return [x(p.key), y[p.key](d.values[p.key])];\n                }));\n            }\n\n            function restoreBrush(visible) {\n                filters.forEach(function (f) {\n                    //If filter brushed NaN values, keep the brush on the bottom of the axis.\n                    var brushDomain = y[f.dimension].brush.y().domain();\n                    if (f.hasOnlyNaN) {\n                        f.extent[1] = (y[f.dimension].domain()[1] - brushDomain[0]) * (f.extent[1] - f.extent[0]) / (oldDomainMaxValue[f.dimension] - f.extent[0]) + brushDomain[0];\n                    }\n                    if (f.hasNaN) {\n                        f.extent[0] = brushDomain[0];\n                    }\n                    if (visible)\n                        y[f.dimension].brush.extent(f.extent);\n                });\n                \n                dimensions.select('.nv-brushBackground')\n                    .each(function (d) {\n                        d3.select(this).call(y[d.key].brush);\n\n                    })\n                    .selectAll('rect')\n                    .attr('x', -8)\n                    .attr('width', 16);\n                \n                updateTicks();\n            }\n            \n            // Handles a brush event, toggling the display of foreground lines.\n            function brushstart() {\n                //If brush aren't visible, show it before brushing again.\n                if (displayBrush === false) {\n                    displayBrush = true;\n                    restoreBrush(true);\n                }\n            }\n            \n            // Handles a brush event, toggling the display of foreground lines.\n            function brush() {\n                actives = dimensionNames.filter(function (p) { return !y[p].brush.empty(); });\n                extents = actives.map(function(p) { return y[p].brush.extent(); });\n\n                filters = []; //erase current filters\n                actives.forEach(function(d,i) {\n                    filters[i] = {\n                        dimension: d,\n                        extent: extents[i],\n                        hasNaN: false,\n                        hasOnlyNaN: false\n                    }\n                });\n\n                active = []; //erase current active list\n                foreground.style('display', function(d) {\n                    var isActive = actives.every(function(p, i) {\n                        if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) return true;\n                        return (extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1]) && !isNaN(parseFloat(d.values[p]));\n                    });\n                    if (isActive) active.push(d);\n                    return isActive ? null : 'none';\n                });\n                \n                updateTicks();\n                \n                dispatch.brush({\n                    filters: filters,\n                    active: active\n                });\n            }\n            function brushend() {\n                var hasActiveBrush = actives.length > 0 ? true : false;\n                filters.forEach(function (f) {\n                    if (f.extent[0] === y[f.dimension].brush.y().domain()[0] && axisWithUndefinedValues.indexOf(f.dimension) >= 0)\n                        f.hasNaN = true;\n                    if (f.extent[1] < y[f.dimension].domain()[0])\n                        f.hasOnlyNaN = true;\n                });\n                dispatch.brushEnd(active, hasActiveBrush);\n            }           \n            function updateTicks() {\n                dimensions.select('.nv-axis')\n                    .each(function (d, i) {\n                        var f = filters.filter(function (k) { return k.dimension == d.key; });\n                        currentTicks[d.key] = y[d.key].domain();\n                        \n                        //If brush are available, display brush extent\n                        if (f.length != 0 && displayBrush)\n                        {\n                            currentTicks[d.key] = [];\n                            if (f[0].extent[1] > y[d.key].domain()[0]) \n                                currentTicks[d.key] = [f[0].extent[1]];\n                            if (f[0].extent[0] >= y[d.key].domain()[0])\n                                currentTicks[d.key].push(f[0].extent[0]);    \n                        }\n                            \n                        d3.select(this).call(axis.scale(y[d.key]).tickFormat(d.format).tickValues(currentTicks[d.key]));\n                });\n            }\n            function dragStart(d) {\n                dragging[d.key] = this.parentNode.__origin__ = x(d.key);\n                background.attr(\"visibility\", \"hidden\");\n            }\n            function dragMove(d) {\n                dragging[d.key] = Math.min(availableWidth, Math.max(0, this.parentNode.__origin__ += d3.event.x));\n                foreground.attr(\"d\", path);\n                enabledDimensions.sort(function (a, b) { return dimensionPosition(a.key) - dimensionPosition(b.key); });\n                enabledDimensions.forEach(function (d, i) { return d.currentPosition = i; });\n                x.domain(enabledDimensions.map(function (d) { return d.key; }));\n                dimensions.attr(\"transform\", function(d) { return \"translate(\" + dimensionPosition(d.key) + \")\"; });\n            }\n            function dragEnd(d, i) {\n                delete this.parentNode.__origin__;\n                delete dragging[d.key];\n                d3.select(this.parentNode).attr(\"transform\", \"translate(\" + x(d.key) + \")\");\n                foreground\n                  .attr(\"d\", path);\n                background\n                  .attr(\"d\", path)\n                  .attr(\"visibility\", null);\n\n                dispatch.dimensionsOrder(enabledDimensions);\n            }\n            function dimensionPosition(d) {\n                var v = dragging[d];\n                return v == null ? x(d) : v;\n            }\n        });\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:         {get: function(){return width;},           set: function(_){width= _;}},\n        height:        {get: function(){return height;},          set: function(_){height= _;}},\n        dimensionData: { get: function () { return dimensionData; }, set: function (_) { dimensionData = _; } },\n        displayBrush: { get: function () { return displayBrush; }, set: function (_) { displayBrush = _; } },\n        filters: { get: function () { return filters; }, set: function (_) { filters = _; } },\n        active: { get: function () { return active; }, set: function (_) { active = _; } },\n        lineTension:   {get: function(){return lineTension;},     set: function(_){lineTension = _;}},\n        undefinedValuesLabel : {get: function(){return undefinedValuesLabel;}, set: function(_){undefinedValuesLabel=_;}},\n        \n        // deprecated options\n        dimensions: {get: function () { return dimensionData.map(function (d){return d.key}); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensions', 'use dimensionData instead');\n            if (dimensionData.length === 0) {\n                _.forEach(function (k) { dimensionData.push({ key: k }) })\n            } else {\n                _.forEach(function (k, i) { dimensionData[i].key= k })\n            }\n        }},\n        dimensionNames: {get: function () { return dimensionData.map(function (d){return d.key}); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensionNames', 'use dimensionData instead');\n            dimensionNames = [];\n            if (dimensionData.length === 0) {\n                _.forEach(function (k) { dimensionData.push({ key: k }) })\n            } else {\n                _.forEach(function (k, i) { dimensionData[i].key = k })\n            }\n \n        }},\n        dimensionFormats: {get: function () { return dimensionData.map(function (d) { return d.format }); }, set: function (_) {\n            // deprecated after 1.8.1\n            nv.deprecated('dimensionFormats', 'use dimensionData instead');\n            if (dimensionData.length === 0) {\n                _.forEach(function (f) { dimensionData.push({ format: f }) })\n            } else {\n                _.forEach(function (f, i) { dimensionData[i].format = f })\n            }\n\n        }},\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    =  _.top    !== undefined ? _.top    : margin.top;\n            margin.right  =  _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom =  _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   =  _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.parallelCoordinatesChart = function () {\n        \"use strict\";\n        //============================================================\n        // Public Variables with Default Settings\n        //------------------------------------------------------------\n\n        var parallelCoordinates = nv.models.parallelCoordinates()\n        var legend = nv.models.legend()\n        var tooltip = nv.models.tooltip();\n        var dimensionTooltip = nv.models.tooltip();\n\n        var margin = { top: 0, right: 0, bottom: 0, left: 0 }\n        , marginTop = null\n        , width = null\n        , height = null\n        , showLegend = true\n        , color = nv.utils.defaultColor()\n        , state = nv.utils.state()\n        , dimensionData = []\n        , displayBrush = true\n        , defaultState = null\n        , noData = null\n        , nanValue = \"undefined\"\n        , dispatch = d3.dispatch('dimensionsOrder', 'brushEnd', 'stateChange', 'changeState', 'renderEnd')\n        , controlWidth = function () { return showControls ? 180 : 0 }\n        ;\n\n\t    //============================================================\n\n\t\t//============================================================\n        // Private Variables\n        //------------------------------------------------------------\n\n        var renderWatch = nv.utils.renderWatch(dispatch);\n\n        var stateGetter = function(data) {\n            return function() {\n                return {\n                    active: data.map(function(d) { return !d.disabled })\n                };\n            }\n        };\n\n        var stateSetter = function(data) {\n            return function(state) {\n                if(state.active !== undefined) {\n                    data.forEach(function(series, i) {\n                        series.disabled = !state.active[i];\n                    });\n                }\n            }\n        };\n\n        tooltip.contentGenerator(function(data) {\n            var str = '<table><thead><tr><td class=\"legend-color-guide\"><div style=\"background-color:' + data.color + '\"></div></td><td><strong>' + data.key + '</strong></td></tr></thead>';\n            if(data.series.length !== 0)\n            {\n                str = str + '<tbody><tr><td height =\"10px\"></td></tr>';\n                data.series.forEach(function(d){\n                    str = str + '<tr><td class=\"legend-color-guide\"><div style=\"background-color:' + d.color + '\"></div></td><td class=\"key\">' + d.key + '</td><td class=\"value\">' + d.value + '</td></tr>';\n                });\n                str = str + '</tbody>';\n            }\n            str = str + '</table>';\n            return str;\n        });\n\n        //============================================================\n        // Chart function\n        //------------------------------------------------------------\n\n        function chart(selection) {\n            renderWatch.reset();\n            renderWatch.models(parallelCoordinates);\n\n            selection.each(function(data) {\n                var container = d3.select(this);\n                nv.utils.initSVG(container);\n\n                var that = this;\n\n                var availableWidth = nv.utils.availableWidth(width, container, margin),\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n\n                chart.update = function() { container.call(chart); };\n                chart.container = this;\n\n                state.setter(stateSetter(dimensionData), chart.update)\n                    .getter(stateGetter(dimensionData))\n                    .update();\n\n                //set state.disabled\n                state.disabled = dimensionData.map(function (d) { return !!d.disabled });\n\n                //Keep dimensions position in memory\n                dimensionData = dimensionData.map(function (d) {d.disabled = !!d.disabled; return d});\n                dimensionData.forEach(function (d, i) {\n                    d.originalPosition = isNaN(d.originalPosition) ? i : d.originalPosition;\n                    d.currentPosition = isNaN(d.currentPosition) ? i : d.currentPosition;\n                });\n\n               if (!defaultState) {\n                    var key;\n                    defaultState = {};\n                    for(key in state) {\n                        if(state[key] instanceof Array)\n                            defaultState[key] = state[key].slice(0);\n                        else\n                            defaultState[key] = state[key];\n                    }\n                }\n\n                // Display No Data message if there's nothing to show.\n                if(!data || !data.length) {\n                    nv.utils.noData(chart, container);\n                    return chart;\n                } else {\n                    container.selectAll('.nv-noData').remove();\n                }\n\n                //------------------------------------------------------------\n                // Setup containers and skeleton of chart\n\n                var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinatesChart').data([data]);\n                var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinatesChart').append('g');\n\n                var g = wrap.select('g');\n\n                gEnter.append('g').attr('class', 'nv-parallelCoordinatesWrap');\n                gEnter.append('g').attr('class', 'nv-legendWrap');\n\n                g.select(\"rect\")\n                    .attr(\"width\", availableWidth)\n                    .attr(\"height\", (availableHeight > 0) ? availableHeight : 0);\n\n                // Legend\n                if (!showLegend) {\n                    g.select('.nv-legendWrap').selectAll('*').remove();\n                } else {\n                    legend.width(availableWidth)\n                        .color(function (d) { return \"rgb(188,190,192)\"; });\n\n                    g.select('.nv-legendWrap')\n                        .datum(dimensionData.sort(function (a, b) { return a.originalPosition - b.originalPosition; }))\n                        .call(legend);\n\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin);\n                    }\n                    wrap.select('.nv-legendWrap')\n                       .attr('transform', 'translate( 0 ,' + (-margin.top) + ')');\n                }\n                wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n                // Main Chart Component(s)\n                parallelCoordinates\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .dimensionData(dimensionData)\n                    .displayBrush(displayBrush);\n\n\t\t        var parallelCoordinatesWrap = g.select('.nv-parallelCoordinatesWrap ')\n                  .datum(data);\n\n\t\t        parallelCoordinatesWrap.transition().call(parallelCoordinates);\n\n\t\t\t\t//============================================================\n                // Event Handling/Dispatching (in chart's scope)\n                //------------------------------------------------------------\n                //Display reset brush button\n\t\t        parallelCoordinates.dispatch.on('brushEnd', function (active, hasActiveBrush) {\n\t\t            if (hasActiveBrush) {\n\t\t                displayBrush = true;\n\t\t                dispatch.brushEnd(active);\n\t\t            } else {\n\n\t\t                displayBrush = false;\n\t\t            }\n\t\t        });\n\n\t\t        legend.dispatch.on('stateChange', function(newState) {\n\t\t            for(var key in newState) {\n\t\t                state[key] = newState[key];\n\t\t            }\n\t\t            dispatch.stateChange(state);\n\t\t            chart.update();\n\t\t        });\n\n                //Update dimensions order and display reset sorting button\n\t\t        parallelCoordinates.dispatch.on('dimensionsOrder', function (e) {\n\t\t            dimensionData.sort(function (a, b) { return a.currentPosition - b.currentPosition; });\n\t\t            var isSorted = false;\n\t\t            dimensionData.forEach(function (d, i) {\n\t\t                d.currentPosition = i;\n\t\t                if (d.currentPosition !== d.originalPosition)\n\t\t                    isSorted = true;\n\t\t            });\n\t\t            dispatch.dimensionsOrder(dimensionData, isSorted);\n\t\t        });\n\n\t\t\t\t// Update chart from a state object passed to event handler\n                dispatch.on('changeState', function (e) {\n\n                    if (typeof e.disabled !== 'undefined') {\n                        dimensionData.forEach(function (series, i) {\n                            series.disabled = e.disabled[i];\n                        });\n                        state.disabled = e.disabled;\n                    }\n                    chart.update();\n                });\n            });\n\n            renderWatch.renderEnd('parraleleCoordinateChart immediate');\n            return chart;\n        }\n\n\t\t//============================================================\n        // Event Handling/Dispatching (out of chart's scope)\n        //------------------------------------------------------------\n\n        parallelCoordinates.dispatch.on('elementMouseover.tooltip', function (evt) {\n            var tp = {\n                key: evt.label,\n                color: evt.color,\n                series: []\n             }\n            if(evt.values){\n                Object.keys(evt.values).forEach(function (d) {\n                    var dim = evt.dimensions.filter(function (dd) {return dd.key === d;})[0];\n                    if(dim){\n                        var v;\n                        if (isNaN(evt.values[d]) || isNaN(parseFloat(evt.values[d]))) {\n                            v = nanValue;\n                        } else {\n                            v = dim.format(evt.values[d]);\n                        }\n                        tp.series.push({ idx: dim.currentPosition, key: d, value: v, color: dim.color });\n                    }\n                });\n                tp.series.sort(function(a,b) {return a.idx - b.idx});\n             }\n            tooltip.data(tp).hidden(false);\n        });\n\n        parallelCoordinates.dispatch.on('elementMouseout.tooltip', function(evt) {\n            tooltip.hidden(true)\n        });\n\n        parallelCoordinates.dispatch.on('elementMousemove.tooltip', function () {\n            tooltip();\n        });\n\t\t //============================================================\n        // Expose Public Variables\n        //------------------------------------------------------------\n\n\t\t// expose chart's sub-components\n        chart.dispatch = dispatch;\n        chart.parallelCoordinates = parallelCoordinates;\n        chart.legend = legend;\n        chart.tooltip = tooltip;\n        chart.options = nv.utils.optionsFunc.bind(chart);\n\n        chart._options = Object.create({}, {\n            // simple options, just get/set the necessary values\n            width: { get: function () { return width; }, set: function (_) { width = _; } },\n            height: { get: function () { return height; }, set: function (_) { height = _; } },\n            showLegend: { get: function () { return showLegend; }, set: function (_) { showLegend = _; } },\n            defaultState: { get: function () { return defaultState; }, set: function (_) { defaultState = _; } },\n            dimensionData: { get: function () { return dimensionData; }, set: function (_) { dimensionData = _; } },\n            displayBrush: { get: function () { return displayBrush; }, set: function (_) { displayBrush = _; } },\n            noData: { get: function () { return noData; }, set: function (_) { noData = _; } },\n            nanValue: { get: function () { return nanValue; }, set: function (_) { nanValue = _; } },\n\n            // options that require extra logic in the setter\n            margin: {\n                get: function () { return margin; },\n                set: function (_) {\n                    if (_.top !== undefined) {\n                        margin.top = _.top;\n                        marginTop = _.top;\n                    }\n                    margin.right = _.right !== undefined ? _.right : margin.right;\n                    margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n                    margin.left = _.left !== undefined ? _.left : margin.left;\n                }\n            },\n            color: {get: function(){return color;}, set: function(_){\n                    color = nv.utils.getColor(_);\n                    legend.color(color);\n                    parallelCoordinates.color(color);\n                }}\n        });\n\n        nv.utils.inheritOptions(chart, parallelCoordinates);\n        nv.utils.initOptions(chart);\n\n        return chart;\n    };\nnv.models.pie = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 500\n        , height = 500\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , color = nv.utils.defaultColor()\n        , valueFormat = d3.format(',.2f')\n        , showLabels = true\n        , labelsOutside = false\n        , labelType = \"key\"\n        , labelThreshold = .02 //if slice percentage is under this, don't show label\n        , donut = false\n        , title = false\n        , growOnHover = true\n        , titleOffset = 0\n        , labelSunbeamLayout = false\n        , startAngle = false\n        , padAngle = false\n        , endAngle = false\n        , cornerRadius = 0\n        , donutRatio = 0.5\n        , duration = 250\n        , arcsRadius = []\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')\n        ;\n\n    var arcs = [];\n    var arcsOver = [];\n\n    //============================================================\n    // chart function\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right\n                , availableHeight = height - margin.top - margin.bottom\n                , radius = Math.min(availableWidth, availableHeight) / 2\n                , arcsRadiusOuter = []\n                , arcsRadiusInner = []\n                ;\n\n            container = d3.select(this)\n            if (arcsRadius.length === 0) {\n                var outer = radius - radius / 5;\n                var inner = donutRatio * radius;\n                for (var i = 0; i < data[0].length; i++) {\n                    arcsRadiusOuter.push(outer);\n                    arcsRadiusInner.push(inner);\n                }\n            } else {\n                if(growOnHover){\n                    arcsRadiusOuter = arcsRadius.map(function (d) { return (d.outer - d.outer / 5) * radius; });\n                    arcsRadiusInner = arcsRadius.map(function (d) { return (d.inner - d.inner / 5) * radius; });\n                    donutRatio = d3.min(arcsRadius.map(function (d) { return (d.inner - d.inner / 5); }));\n                } else {\n                    arcsRadiusOuter = arcsRadius.map(function (d) { return d.outer * radius; });\n                    arcsRadiusInner = arcsRadius.map(function (d) { return d.inner * radius; });\n                    donutRatio = d3.min(arcsRadius.map(function (d) { return d.inner; }));\n                }\n            }\n            nv.utils.initSVG(container);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('.nv-wrap.nv-pie').data(data);\n            var wrapEnter = wrap.enter().append('g').attr('class','nvd3 nv-wrap nv-pie nv-chart-' + id);\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n            var g_pie = gEnter.append('g').attr('class', 'nv-pie');\n            gEnter.append('g').attr('class', 'nv-pieLabels');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            g.select('.nv-pie').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n            g.select('.nv-pieLabels').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');\n\n            //\n            container.on('click', function(d,i) {\n                dispatch.chartClick({\n                    data: d,\n                    index: i,\n                    pos: d3.event,\n                    id: id\n                });\n            });\n\n            arcs = [];\n            arcsOver = [];\n            for (var i = 0; i < data[0].length; i++) {\n\n                var arc = d3.svg.arc().outerRadius(arcsRadiusOuter[i]);\n                var arcOver = d3.svg.arc().outerRadius(arcsRadiusOuter[i] + 5);\n\n                if (startAngle !== false) {\n                    arc.startAngle(startAngle);\n                    arcOver.startAngle(startAngle);\n                }\n                if (endAngle !== false) {\n                    arc.endAngle(endAngle);\n                    arcOver.endAngle(endAngle);\n                }\n                if (donut) {\n                    arc.innerRadius(arcsRadiusInner[i]);\n                    arcOver.innerRadius(arcsRadiusInner[i]);\n                }\n\n                if (arc.cornerRadius && cornerRadius) {\n                    arc.cornerRadius(cornerRadius);\n                    arcOver.cornerRadius(cornerRadius);\n                }\n\n                arcs.push(arc);\n                arcsOver.push(arcOver);\n            }\n\n            // Setup the Pie chart and choose the data element\n            var pie = d3.layout.pie()\n                .sort(null)\n                .value(function(d) { return d.disabled ? 0 : getY(d) });\n\n            // padAngle added in d3 3.5\n            if (pie.padAngle && padAngle) {\n                pie.padAngle(padAngle);\n            }\n\n            // if title is specified and donut, put it in the middle\n            if (donut && title) {\n                g_pie.append(\"text\").attr('class', 'nv-pie-title');\n\n                wrap.select('.nv-pie-title')\n                    .style(\"text-anchor\", \"middle\")\n                    .text(function (d) {\n                        return title;\n                    })\n                    .style(\"font-size\", (Math.min(availableWidth, availableHeight)) * donutRatio * 2 / (title.length + 2) + \"px\")\n                    .attr(\"dy\", \"0.35em\") // trick to vertically center text\n                    .attr('transform', function(d, i) {\n                        return 'translate(0, '+ titleOffset + ')';\n                    });\n            }\n\n            var slices = wrap.select('.nv-pie').selectAll('.nv-slice').data(pie);\n            var pieLabels = wrap.select('.nv-pieLabels').selectAll('.nv-label').data(pie);\n\n            slices.exit().remove();\n            pieLabels.exit().remove();\n\n            var ae = slices.enter().append('g');\n            ae.attr('class', 'nv-slice');\n            ae.on('mouseover', function(d, i) {\n                d3.select(this).classed('hover', true);\n                if (growOnHover) {\n                    d3.select(this).select(\"path\").transition()\n                        .duration(70)\n                        .attr(\"d\", arcsOver[i]);\n                }\n                dispatch.elementMouseover({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\"),\n                    percent: (d.endAngle - d.startAngle) / (2 * Math.PI)\n                });\n            });\n            ae.on('mouseout', function(d, i) {\n                d3.select(this).classed('hover', false);\n                if (growOnHover) {\n                    d3.select(this).select(\"path\").transition()\n                        .duration(50)\n                        .attr(\"d\", arcs[i]);\n                }\n                dispatch.elementMouseout({data: d.data, index: i});\n            });\n            ae.on('mousemove', function(d, i) {\n                dispatch.elementMousemove({data: d.data, index: i});\n            });\n            ae.on('click', function(d, i) {\n                var element = this;\n                dispatch.elementClick({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\"),\n                    event: d3.event,\n                    element: element\n                });\n            });\n            ae.on('dblclick', function(d, i) {\n                dispatch.elementDblClick({\n                    data: d.data,\n                    index: i,\n                    color: d3.select(this).style(\"fill\")\n                });\n            });\n\n            slices.attr('fill', function(d,i) { return color(d.data, i); });\n            slices.attr('stroke', function(d,i) { return color(d.data, i); });\n\n            var paths = ae.append('path').each(function(d) {\n                this._current = d;\n            });\n\n            slices.select('path')\n                .transition()\n                .duration(duration)\n                .attr('d', function (d, i) { return arcs[i](d); })\n                .attrTween('d', arcTween);\n\n            if (showLabels) {\n                // This does the normal label\n                var labelsArc = [];\n                for (var i = 0; i < data[0].length; i++) {\n                    labelsArc.push(arcs[i]);\n\n                    if (labelsOutside) {\n                        if (donut) {\n                            labelsArc[i] = d3.svg.arc().outerRadius(arcs[i].outerRadius());\n                            if (startAngle !== false) labelsArc[i].startAngle(startAngle);\n                            if (endAngle !== false) labelsArc[i].endAngle(endAngle);\n                        }\n                    } else if (!donut) {\n                            labelsArc[i].innerRadius(0);\n                    }\n                }\n\n                pieLabels.enter().append(\"g\").classed(\"nv-label\",true).each(function(d,i) {\n                    var group = d3.select(this);\n\n                    group.attr('transform', function (d, i) {\n                        if (labelSunbeamLayout) {\n                            d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate\n                            d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate\n                            var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n                            if ((d.startAngle + d.endAngle) / 2 < Math.PI) {\n                                rotateAngle -= 90;\n                            } else {\n                                rotateAngle += 90;\n                            }\n                            return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';\n                        } else {\n                            d.outerRadius = radius + 10; // Set Outer Coordinate\n                            d.innerRadius = radius + 15; // Set Inner Coordinate\n                            return 'translate(' + labelsArc[i].centroid(d) + ')'\n                        }\n                    });\n\n                    group.append('rect')\n                        .style('stroke', '#fff')\n                        .style('fill', '#fff')\n                        .attr(\"rx\", 3)\n                        .attr(\"ry\", 3);\n\n                    group.append('text')\n                        .style('text-anchor', labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle') //center the text on it's origin or begin/end if orthogonal aligned\n                        .style('fill', '#000')\n                });\n\n                var labelLocationHash = {};\n                var avgHeight = 14;\n                var avgWidth = 140;\n                var createHashKey = function(coordinates) {\n                    return Math.floor(coordinates[0]/avgWidth) * avgWidth + ',' + Math.floor(coordinates[1]/avgHeight) * avgHeight;\n                };\n                var getSlicePercentage = function(d) {\n                    return (d.endAngle - d.startAngle) / (2 * Math.PI);\n                };\n\n                pieLabels.watchTransition(renderWatch, 'pie labels').attr('transform', function (d, i) {\n                    if (labelSunbeamLayout) {\n                        d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate\n                        d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate\n                        var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);\n                        if ((d.startAngle + d.endAngle) / 2 < Math.PI) {\n                            rotateAngle -= 90;\n                        } else {\n                            rotateAngle += 90;\n                        }\n                        return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';\n                    } else {\n                        d.outerRadius = radius + 10; // Set Outer Coordinate\n                        d.innerRadius = radius + 15; // Set Inner Coordinate\n\n                        /*\n                        Overlapping pie labels are not good. What this attempts to do is, prevent overlapping.\n                        Each label location is hashed, and if a hash collision occurs, we assume an overlap.\n                        Adjust the label's y-position to remove the overlap.\n                        */\n                        var center = labelsArc[i].centroid(d);\n                        var percent = getSlicePercentage(d);\n                        if (d.value && percent >= labelThreshold) {\n                            var hashKey = createHashKey(center);\n                            if (labelLocationHash[hashKey]) {\n                                center[1] -= avgHeight;\n                            }\n                            labelLocationHash[createHashKey(center)] = true;\n                        }\n                        return 'translate(' + center + ')'\n                    }\n                });\n\n                pieLabels.select(\".nv-label text\")\n                    .style('text-anchor', function(d,i) {\n                        //center the text on it's origin or begin/end if orthogonal aligned\n                        return labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle';\n                    })\n                    .text(function(d, i) {\n                        var percent = getSlicePercentage(d);\n                        var label = '';\n                        if (!d.value || percent < labelThreshold) return '';\n\n                        if(typeof labelType === 'function') {\n                            label = labelType(d, i, {\n                                'key': getX(d.data),\n                                'value': getY(d.data),\n                                'percent': valueFormat(percent)\n                            });\n                        } else {\n                            switch (labelType) {\n                                case 'key':\n                                    label = getX(d.data);\n                                    break;\n                                case 'value':\n                                    label = valueFormat(getY(d.data));\n                                    break;\n                                case 'percent':\n                                    label = d3.format('%')(percent);\n                                    break;\n                            }\n                        }\n                        return label;\n                    })\n                ;\n            }\n\n\n            // Computes the angle of an arc, converting from radians to degrees.\n            function angle(d) {\n                var a = (d.startAngle + d.endAngle) * 90 / Math.PI - 90;\n                return a > 90 ? a - 180 : a;\n            }\n\n            function arcTween(a, idx) {\n                a.endAngle = isNaN(a.endAngle) ? 0 : a.endAngle;\n                a.startAngle = isNaN(a.startAngle) ? 0 : a.startAngle;\n                if (!donut) a.innerRadius = 0;\n                var i = d3.interpolate(this._current, a);\n                this._current = i(0);\n                return function (t) {\n                    return arcs[idx](i(t));\n                };\n            }\n        });\n\n        renderWatch.renderEnd('pie immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        arcsRadius: { get: function () { return arcsRadius; }, set: function (_) { arcsRadius = _; } },\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=_;}},\n        title:      {get: function(){return title;}, set: function(_){title=_;}},\n        titleOffset:    {get: function(){return titleOffset;}, set: function(_){titleOffset=_;}},\n        labelThreshold: {get: function(){return labelThreshold;}, set: function(_){labelThreshold=_;}},\n        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},\n        x:          {get: function(){return getX;}, set: function(_){getX=_;}},\n        id:         {get: function(){return id;}, set: function(_){id=_;}},\n        endAngle:   {get: function(){return endAngle;}, set: function(_){endAngle=_;}},\n        startAngle: {get: function(){return startAngle;}, set: function(_){startAngle=_;}},\n        padAngle:   {get: function(){return padAngle;}, set: function(_){padAngle=_;}},\n        cornerRadius: {get: function(){return cornerRadius;}, set: function(_){cornerRadius=_;}},\n        donutRatio:   {get: function(){return donutRatio;}, set: function(_){donutRatio=_;}},\n        labelsOutside: {get: function(){return labelsOutside;}, set: function(_){labelsOutside=_;}},\n        labelSunbeamLayout: {get: function(){return labelSunbeamLayout;}, set: function(_){labelSunbeamLayout=_;}},\n        donut:              {get: function(){return donut;}, set: function(_){donut=_;}},\n        growOnHover:        {get: function(){return growOnHover;}, set: function(_){growOnHover=_;}},\n\n        // depreciated after 1.7.1\n        pieLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){\n            labelsOutside=_;\n            nv.deprecated('pieLabelsOutside', 'use labelsOutside instead');\n        }},\n        // depreciated after 1.7.1\n        donutLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){\n            labelsOutside=_;\n            nv.deprecated('donutLabelsOutside', 'use labelsOutside instead');\n        }},\n        // deprecated after 1.7.1\n        labelFormat: {get: function(){ return valueFormat;}, set: function(_) {\n            valueFormat=_;\n            nv.deprecated('labelFormat','use valueFormat instead');\n        }},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;\n            margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;\n            margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;\n            margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        y: {get: function(){return getY;}, set: function(_){\n            getY=d3.functor(_);\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color=nv.utils.getColor(_);\n        }},\n        labelType:          {get: function(){return labelType;}, set: function(_){\n            labelType= _ || 'key';\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.pieChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var pie = nv.models.pie();\n    var legend = nv.models.legend();\n    var tooltip = nv.models.tooltip();\n\n    var margin = {top: 30, right: 20, bottom: 20, left: 20}\n        , marginTop = null\n        , width = null\n        , height = null\n        , showTooltipPercent = false\n        , showLegend = true\n        , legendPosition = \"top\"\n        , color = nv.utils.defaultColor()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , duration = 250\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        ;\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d, i) {\n            return pie.valueFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined) {\n                data.forEach(function (series, i) {\n                    series.disabled = !state.active[i];\n                });\n            }\n        }\n    };\n\n    //============================================================\n    // Chart function\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(pie);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var that = this;\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.transition().call(chart); };\n            chart.container = this;\n\n            state.setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            //set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-pieChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-pieChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-pieWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                if (legendPosition === \"top\") {\n                    legend.width( availableWidth ).key(pie.x());\n\n                    wrap.select('.nv-legendWrap')\n                        .datum(data)\n                        .call(legend);\n\n                    if (!marginTop && legend.height() !== margin.top) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin);\n                    }\n\n                    wrap.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + (-margin.top) +')');\n                } else if (legendPosition === \"right\") {\n                    var legendWidth = nv.models.legend().width();\n                    if (availableWidth / 2 < legendWidth) {\n                        legendWidth = (availableWidth / 2)\n                    }\n                    legend.height(availableHeight).key(pie.x());\n                    legend.width(legendWidth);\n                    availableWidth -= legend.width();\n\n                    wrap.select('.nv-legendWrap')\n                        .datum(data)\n                        .call(legend)\n                        .attr('transform', 'translate(' + (availableWidth) +',0)');\n                }\n            }\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            pie.width(availableWidth).height(availableHeight);\n            var pieWrap = g.select('.nv-pieWrap').datum([data]);\n            d3.transition(pieWrap).call(pie);\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState) {\n                    state[key] = newState[key];\n                }\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n        });\n\n        renderWatch.renderEnd('pieChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    pie.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt['series'] = {\n            key: chart.x()(evt.data),\n            value: chart.y()(evt.data),\n            color: evt.color,\n            percent: evt.percent\n        };\n        if (!showTooltipPercent) {\n            delete evt.percent;\n            delete evt.series.percent;\n        }\n        tooltip.data(evt).hidden(false);\n    });\n\n    pie.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    pie.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.legend = legend;\n    chart.dispatch = dispatch;\n    chart.pie = pie;\n    chart.tooltip = tooltip;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // use Object get/set functionality to map between vars and chart functions\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:              {get: function(){return width;},                set: function(_){width=_;}},\n        height:             {get: function(){return height;},               set: function(_){height=_;}},\n        noData:             {get: function(){return noData;},               set: function(_){noData=_;}},\n        showTooltipPercent: {get: function(){return showTooltipPercent;},   set: function(_){showTooltipPercent=_;}},\n        showLegend:         {get: function(){return showLegend;},           set: function(_){showLegend=_;}},\n        legendPosition:     {get: function(){return legendPosition;},       set: function(_){legendPosition=_;}},\n        defaultState:       {get: function(){return defaultState;},         set: function(_){defaultState=_;}},\n\n        // options that require extra logic in the setter\n        color: {get: function(){return color;}, set: function(_){\n            color = _;\n            legend.color(color);\n            pie.color(color);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            pie.duration(duration);\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }}\n    });\n    nv.utils.inheritOptions(chart, pie);\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.sankey = function() {\n    'use strict';\n\n    // Sources:\n    // - https://bost.ocks.org/mike/sankey/\n    // - https://github.com/soxofaan/d3-plugin-captain-sankey\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sankey = {},\n        nodeWidth = 24,\n        nodePadding = 8,\n        size = [1, 1],\n        nodes = [],\n        links = [],\n        sinksRight = true;\n\n    var layout = function(iterations) {\n        computeNodeLinks();\n        computeNodeValues();\n        computeNodeBreadths();\n        computeNodeDepths(iterations);\n    };\n\n    var relayout = function() {\n        computeLinkDepths();\n    };\n\n    // SVG path data generator, to be used as 'd' attribute on 'path' element selection.\n    var link = function() {\n        var curvature = .5;\n\n        function link(d) {\n\n            var x0 = d.source.x + d.source.dx,\n                x1 = d.target.x,\n                xi = d3.interpolateNumber(x0, x1),\n                x2 = xi(curvature),\n                x3 = xi(1 - curvature),\n                y0 = d.source.y + d.sy + d.dy / 2,\n                y1 = d.target.y + d.ty + d.dy / 2;\n            var linkPath = 'M' + x0 + ',' + y0\n                + 'C' + x2 + ',' + y0\n                + ' ' + x3 + ',' + y1\n                + ' ' + x1 + ',' + y1;\n            return linkPath;\n        }\n\n        link.curvature = function(_) {\n            if (!arguments.length) return curvature;\n            curvature = +_;\n            return link;\n        };\n\n        return link;\n    };\n\n    // Y-position of the middle of a node.\n    var center = function(node) {\n        return node.y + node.dy / 2;\n    };\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    // Populate the sourceLinks and targetLinks for each node.\n    // Also, if the source and target are not objects, assume they are indices.\n    function computeNodeLinks() {\n        nodes.forEach(function(node) {\n            // Links that have this node as source.\n            node.sourceLinks = [];\n            // Links that have this node as target.\n            node.targetLinks = [];\n        });\n        links.forEach(function(link) {\n            var source = link.source,\n                target = link.target;\n            if (typeof source === 'number') source = link.source = nodes[link.source];\n            if (typeof target === 'number') target = link.target = nodes[link.target];\n            source.sourceLinks.push(link);\n            target.targetLinks.push(link);\n        });\n    }\n\n    // Compute the value (size) of each node by summing the associated links.\n    function computeNodeValues() {\n        nodes.forEach(function(node) {\n            node.value = Math.max(\n                d3.sum(node.sourceLinks, value),\n                d3.sum(node.targetLinks, value)\n            );\n        });\n    }\n\n    // Iteratively assign the breadth (x-position) for each node.\n    // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n    // nodes with no incoming links are assigned breadth zero, while\n    // nodes with no outgoing links are assigned the maximum breadth.\n    function computeNodeBreadths() {\n        //\n        var remainingNodes = nodes,\n            nextNodes,\n            x = 0;\n\n        // Work from left to right.\n        // Keep updating the breath (x-position) of nodes that are target of recently updated nodes.\n        //\n        while (remainingNodes.length && x < nodes.length) {\n            nextNodes = [];\n            remainingNodes.forEach(function(node) {\n                node.x = x;\n                node.dx = nodeWidth;\n                node.sourceLinks.forEach(function(link) {\n                    if (nextNodes.indexOf(link.target) < 0) {\n                        nextNodes.push(link.target);\n                    }\n                });\n            });\n            remainingNodes = nextNodes;\n            ++x;\n            //\n        }\n\n        // Optionally move pure sinks always to the right.\n        if (sinksRight) {\n            moveSinksRight(x);\n        }\n\n        scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));\n    }\n\n    function moveSourcesRight() {\n        nodes.forEach(function(node) {\n            if (!node.targetLinks.length) {\n                node.x = d3.min(node.sourceLinks, function(d) { return d.target.x; }) - 1;\n            }\n        });\n    }\n\n    function moveSinksRight(x) {\n        nodes.forEach(function(node) {\n            if (!node.sourceLinks.length) {\n                node.x = x - 1;\n            }\n        });\n    }\n\n    function scaleNodeBreadths(kx) {\n        nodes.forEach(function(node) {\n            node.x *= kx;\n        });\n    }\n\n    // Compute the depth (y-position) for each node.\n    function computeNodeDepths(iterations) {\n        // Group nodes by breath.\n        var nodesByBreadth = d3.nest()\n            .key(function(d) { return d.x; })\n            .sortKeys(d3.ascending)\n            .entries(nodes)\n            .map(function(d) { return d.values; });\n\n        //\n        initializeNodeDepth();\n        resolveCollisions();\n        computeLinkDepths();\n        for (var alpha = 1; iterations > 0; --iterations) {\n            relaxRightToLeft(alpha *= .99);\n            resolveCollisions();\n            computeLinkDepths();\n            relaxLeftToRight(alpha);\n            resolveCollisions();\n            computeLinkDepths();\n        }\n\n        function initializeNodeDepth() {\n            // Calculate vertical scaling factor.\n            var ky = d3.min(nodesByBreadth, function(nodes) {\n                return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);\n            });\n\n            nodesByBreadth.forEach(function(nodes) {\n                nodes.forEach(function(node, i) {\n                    node.y = i;\n                    node.dy = node.value * ky;\n                });\n            });\n\n            links.forEach(function(link) {\n                link.dy = link.value * ky;\n            });\n        }\n\n        function relaxLeftToRight(alpha) {\n            nodesByBreadth.forEach(function(nodes, breadth) {\n                nodes.forEach(function(node) {\n                    if (node.targetLinks.length) {\n                        // Value-weighted average of the y-position of source node centers linked to this node.\n                        var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n                        node.y += (y - center(node)) * alpha;\n                    }\n                });\n            });\n\n            function weightedSource(link) {\n                return (link.source.y + link.sy + link.dy / 2) * link.value;\n            }\n        }\n\n        function relaxRightToLeft(alpha) {\n            nodesByBreadth.slice().reverse().forEach(function(nodes) {\n                nodes.forEach(function(node) {\n                    if (node.sourceLinks.length) {\n                        // Value-weighted average of the y-positions of target nodes linked to this node.\n                        var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n                        node.y += (y - center(node)) * alpha;\n                    }\n                });\n            });\n\n            function weightedTarget(link) {\n                return (link.target.y + link.ty + link.dy / 2) * link.value;\n            }\n        }\n\n        function resolveCollisions() {\n            nodesByBreadth.forEach(function(nodes) {\n                var node,\n                    dy,\n                    y0 = 0,\n                    n = nodes.length,\n                    i;\n\n                // Push any overlapping nodes down.\n                nodes.sort(ascendingDepth);\n                for (i = 0; i < n; ++i) {\n                    node = nodes[i];\n                    dy = y0 - node.y;\n                    if (dy > 0) node.y += dy;\n                    y0 = node.y + node.dy + nodePadding;\n                }\n\n                // If the bottommost node goes outside the bounds, push it back up.\n                dy = y0 - nodePadding - size[1];\n                if (dy > 0) {\n                    y0 = node.y -= dy;\n\n                    // Push any overlapping nodes back up.\n                    for (i = n - 2; i >= 0; --i) {\n                        node = nodes[i];\n                        dy = node.y + node.dy + nodePadding - y0;\n                        if (dy > 0) node.y -= dy;\n                        y0 = node.y;\n                    }\n                }\n            });\n        }\n\n        function ascendingDepth(a, b) {\n            return a.y - b.y;\n        }\n    }\n\n    // Compute y-offset of the source endpoint (sy) and target endpoints (ty) of links,\n    // relative to the source/target node's y-position.\n    function computeLinkDepths() {\n        nodes.forEach(function(node) {\n            node.sourceLinks.sort(ascendingTargetDepth);\n            node.targetLinks.sort(ascendingSourceDepth);\n        });\n        nodes.forEach(function(node) {\n            var sy = 0, ty = 0;\n            node.sourceLinks.forEach(function(link) {\n                link.sy = sy;\n                sy += link.dy;\n            });\n            node.targetLinks.forEach(function(link) {\n                link.ty = ty;\n                ty += link.dy;\n            });\n        });\n\n        function ascendingSourceDepth(a, b) {\n            return a.source.y - b.source.y;\n        }\n\n        function ascendingTargetDepth(a, b) {\n            return a.target.y - b.target.y;\n        }\n    }\n\n    // Value property accessor.\n    function value(x) {\n        return x.value;\n    }\n\n    sankey.options = nv.utils.optionsFunc.bind(sankey);\n    sankey._options = Object.create({}, {\n        nodeWidth:    {get: function(){return nodeWidth;},   set: function(_){nodeWidth=+_;}},\n        nodePadding:  {get: function(){return nodePadding;}, set: function(_){nodePadding=_;}},\n        nodes:        {get: function(){return nodes;},       set: function(_){nodes=_;}},\n        links:        {get: function(){return links ;},      set: function(_){links=_;}},\n        size:         {get: function(){return size;},        set: function(_){size=_;}},\n        sinksRight:   {get: function(){return sinksRight;},  set: function(_){sinksRight=_;}},\n\n        layout:       {get: function(){layout(32);},         set: function(_){layout(_);}},\n        relayout:     {get: function(){relayout();},         set: function(_){}},\n        center:       {get: function(){return center();},    set: function(_){\n            if(typeof _ === 'function'){\n                center=_;\n            }\n        }},\n        link:         {get: function(){return link();},      set: function(_){\n            if(typeof _ === 'function'){\n                link=_;\n            }\n            return link();\n        }}\n    });\n\n    nv.utils.initOptions(sankey);\n\n    return sankey;\n};\nnv.models.sankeyChart = function() {\n    \"use strict\";\n\n    // Sources:\n    // - https://bost.ocks.org/mike/sankey/\n    // - https://github.com/soxofaan/d3-plugin-captain-sankey\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 5, right: 0, bottom: 5, left: 0}\n        , sankey = nv.models.sankey()\n        , width = 600\n        , height = 400\n        , nodeWidth = 36\n        , nodePadding =  40\n        , units = 'units'\n        , center = undefined\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var formatNumber = d3.format(',.0f');    // zero decimal places\n    var format = function(d) {\n        return formatNumber(d) + ' ' + units;\n    };\n    var color = d3.scale.category20();\n    var linkTitle = function(d){\n        return d.source.name + ' → ' + d.target.name + '\\n' + format(d.value);\n    };\n    var nodeFillColor = function(d){\n        return d.color = color(d.name.replace(/ .*/, ''));\n    };\n    var nodeStrokeColor = function(d){\n        return d3.rgb(d.color).darker(2);\n    };\n    var nodeTitle = function(d){\n        return d.name + '\\n' + format(d.value);\n    };\n\n    var showError = function(element, message) {\n        element.append('text')\n            .attr('x', 0)\n            .attr('y', 0)\n            .attr('class', 'nvd3-sankey-chart-error')\n            .attr('text-anchor', 'middle')\n            .text(message);\n    };\n\n    function chart(selection) {\n        selection.each(function(data) {\n\n            var testData = {\n                nodes:\n                    [\n                        {'node': 1, 'name': 'Test 1'},\n                        {'node': 2, 'name': 'Test 2'},\n                        {'node': 3, 'name': 'Test 3'},\n                        {'node': 4, 'name': 'Test 4'},\n                        {'node': 5, 'name': 'Test 5'},\n                        {'node': 6, 'name': 'Test 6'}\n                    ],\n                links:\n                    [\n                        {'source': 0, 'target': 1, 'value': 2295},\n                        {'source': 0, 'target': 5, 'value': 1199},\n                        {'source': 1, 'target': 2, 'value': 1119},\n                        {'source': 1, 'target': 5, 'value': 1176},\n                        {'source': 2, 'target': 3, 'value': 487},\n                        {'source': 2, 'target': 5, 'value': 632},\n                        {'source': 3, 'target': 4, 'value': 301},\n                        {'source': 3, 'target': 5, 'value': 186}\n                    ]\n            };\n\n            // Error handling\n            var isDataValid = false;\n            var dataAvailable = false;\n\n            // check if data is valid\n            if(\n                (typeof data['nodes'] === 'object' && data['nodes'].length) >= 0 &&\n                (typeof data['links'] === 'object' && data['links'].length) >= 0\n            ){\n                isDataValid = true;\n            }\n\n            // check if data is available\n            if(\n                data['nodes'] && data['nodes'].length > 0 &&\n                data['links'] && data['links'].length > 0\n            ) {\n                dataAvailable = true;\n            }\n\n            // show error\n            if(!isDataValid) {\n                console.error('NVD3 Sankey chart error:', 'invalid data format for', data);\n                console.info('Valid data format is: ', testData, JSON.stringify(testData));\n                showError(selection, 'Error loading chart, data is invalid');\n                return false;\n            }\n\n            // TODO use nv.utils.noData\n            if(!dataAvailable) {\n                showError(selection, 'No data available');\n                return false;\n            }\n\n            // No errors, continue\n\n            // append the svg canvas to the page\n            var svg = selection.append('svg')\n                .attr('width', width)\n                .attr('height', height)\n                .append('g')\n                .attr('class', 'nvd3 nv-wrap nv-sankeyChart');\n\n            // Set the sankey diagram properties\n            sankey\n                .nodeWidth(nodeWidth)\n                .nodePadding(nodePadding)\n                .size([width, height]);\n\n            var path = sankey.link();\n\n            sankey\n                .nodes(data.nodes)\n                .links(data.links)\n                .layout(32)\n                .center(center);\n\n            // add in the links\n            var link = svg.append('g').selectAll('.link')\n                .data(data.links)\n                .enter().append('path')\n                .attr('class', 'link')\n                .attr('d', path)\n                .style('stroke-width', function(d) { return Math.max(1, d.dy); })\n            .sort(function(a,b) { return b.dy - a.dy; });\n\n            // add the link titles\n            link.append('title')\n                .text(linkTitle);\n\n            // add in the nodes\n            var node = svg.append('g').selectAll('.node')\n                .data(data.nodes)\n                .enter().append('g')\n                .attr('class', 'node')\n                .attr('transform', function(d) { return 'translate(' + d.x + ',' + d.y + ')'; })\n                .call(\n                    d3.behavior\n                        .drag()\n                        .origin(function(d) { return d; })\n                        .on('dragstart', function() {\n                            this.parentNode.appendChild(this);\n                        })\n                        .on('drag', dragmove)\n                );\n\n            // add the rectangles for the nodes\n            node.append('rect')\n                .attr('height', function(d) { return d.dy; })\n                .attr('width', sankey.nodeWidth())\n                .style('fill', nodeFillColor)\n                .style('stroke', nodeStrokeColor)\n                .append('title')\n                .text(nodeTitle);\n\n            // add in the title for the nodes\n            node.append('text')\n                .attr('x', -6)\n                .attr('y', function(d) { return d.dy / 2; })\n                .attr('dy', '.35em')\n                .attr('text-anchor', 'end')\n                .attr('transform', null)\n                .text(function(d) { return d.name; })\n                .filter(function(d) { return d.x < width / 2; })\n                .attr('x', 6 + sankey.nodeWidth())\n                .attr('text-anchor', 'start');\n\n            // the function for moving the nodes\n            function dragmove(d) {\n                d3.select(this).attr('transform',\n                'translate(' + d.x + ',' + (\n                    d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))\n                ) + ')');\n                sankey.relayout();\n                link.attr('d', path);\n            }\n        });\n\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        units:           {get: function(){return units;},       set: function(_){units=_;}},\n        width:           {get: function(){return width;},       set: function(_){width=_;}},\n        height:          {get: function(){return height;},      set: function(_){height=_;}},\n        format:          {get: function(){return format;},      set: function(_){format=_;}},\n        linkTitle:       {get: function(){return linkTitle;},   set: function(_){linkTitle=_;}},\n        nodeWidth:       {get: function(){return nodeWidth;},   set: function(_){nodeWidth=_;}},\n        nodePadding:     {get: function(){return nodePadding;}, set: function(_){nodePadding=_;}},\n        center:          {get: function(){return center},       set: function(_){center=_}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        nodeStyle: {get: function(){return {};}, set: function(_){\n            nodeFillColor   = _.fillColor   !== undefined ? _.fillColor   : nodeFillColor;\n            nodeStrokeColor = _.strokeColor !== undefined ? _.strokeColor : nodeStrokeColor;\n            nodeTitle       = _.title       !== undefined ? _.title       : nodeTitle;\n        }}\n\n    });\n\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.scatter = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin       = {top: 0, right: 0, bottom: 0, left: 0}\n        , width        = null\n        , height       = null\n        , color        = nv.utils.defaultColor() // chooses color\n        , pointBorderColor = null\n        , id           = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't select one\n        , container    = null\n        , x            = d3.scale.linear()\n        , y            = d3.scale.linear()\n        , z            = d3.scale.linear() //linear because d3.svg.shape.size is treated as area\n        , getX         = function(d) { return d.x } // accessor to get the x value\n        , getY         = function(d) { return d.y } // accessor to get the y value\n        , getSize      = function(d) { return d.size || 1} // accessor to get the point size\n        , getShape     = function(d) { return d.shape || 'circle' } // accessor to get point shape\n        , forceX       = [] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)\n        , forceY       = [] // List of numbers to Force into the Y scale\n        , forceSize    = [] // List of numbers to Force into the Size scale\n        , interactive  = true // If true, plots a voronoi overlay for advanced point intersection\n        , pointActive  = function(d) { return !d.notActive } // any points that return false will be filtered out\n        , padData      = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart\n        , padDataOuter = .1 //outerPadding to imitate ordinal scale outer padding\n        , clipEdge     = false // if true, masks points within x and y scale\n        , clipVoronoi  = true // if true, masks each point with a circle... can turn off to slightly increase performance\n        , showVoronoi  = false // display the voronoi areas\n        , clipRadius   = function() { return 25 } // function to get the radius for voronoi point clips\n        , xDomain      = null // Override x domain (skips the calculation from data)\n        , yDomain      = null // Override y domain\n        , xRange       = null // Override x range\n        , yRange       = null // Override y range\n        , sizeDomain   = null // Override point size domain\n        , sizeRange    = null\n        , singlePoint  = false\n        , dispatch     = d3.dispatch('elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'renderEnd')\n        , useVoronoi   = true\n        , duration     = 250\n        , interactiveUpdateDelay = 300\n        , showLabels    = false\n        ;\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0, z0 // used to store previous scales\n        , width0\n        , height0\n        , timeoutID\n        , needsUpdate = false // Flag for when the points are visually updating, but the interactive layer is behind, to disable tooltips\n        , renderWatch = nv.utils.renderWatch(dispatch, duration)\n        , _sizeRange_def = [16, 256]\n        , _cache = {}\n        ;\n\n    function getCache(d) {\n        var key, val;\n        key = d[0].series + ':' + d[1];\n        val = _cache[key] = _cache[key] || {};\n        return val;\n    }\n\n    function delCache(d) {\n        var key, val;\n        key = d[0].series + ':' + d[1];\n        delete _cache[key];\n    }\n\n    function getDiffs(d) {\n        var i, key, val,\n            cache = getCache(d),\n            diffs = false;\n        for (i = 1; i < arguments.length; i += 2) {\n            key = arguments[i];\n            val = arguments[i + 1](d[0], d[1]);\n            if (cache[key] !== val || !cache.hasOwnProperty(key)) {\n                cache[key] = val;\n                diffs = true;\n            }\n        }\n        return diffs;\n    }\n\n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            container = d3.select(this);\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            nv.utils.initSVG(container);\n\n            //add series index to each data point for reference\n            data.forEach(function(series, i) {\n                series.values.forEach(function(point) {\n                    point.series = i;\n                });\n            });\n\n            // Setup Scales\n            var logScale = chart.yScale().name === d3.scale.log().name ? true : false;\n            // remap and flatten the data for use in calculating the scales' domains\n            var seriesData = (xDomain && yDomain && sizeDomain) ? [] : // if we know xDomain and yDomain and sizeDomain, no need to calculate.... if Size is constant remember to set sizeDomain to speed up performance\n                d3.merge(\n                    data.map(function(d) {\n                        return d.values.map(function(d,i) {\n                            return { x: getX(d,i), y: getY(d,i), size: getSize(d,i) }\n                        })\n                    })\n                );\n\n            x   .domain(xDomain || d3.extent(seriesData.map(function(d) { return d.x; }).concat(forceX)))\n\n            if (padData && data[0])\n                x.range(xRange || [(availableWidth * padDataOuter +  availableWidth) / (2 *data[0].values.length), availableWidth - availableWidth * (1 + padDataOuter) / (2 * data[0].values.length)  ]);\n            //x.range([availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);\n            else\n                x.range(xRange || [0, availableWidth]);\n\n             if (logScale) {\n                    var min = d3.min(seriesData.map(function(d) { if (d.y !== 0) return d.y; }));\n                    y.clamp(true)\n                        .domain(yDomain || d3.extent(seriesData.map(function(d) {\n                            if (d.y !== 0) return d.y;\n                            else return min * 0.1;\n                        }).concat(forceY)))\n                        .range(yRange || [availableHeight, 0]);\n                } else {\n                        y.domain(yDomain || d3.extent(seriesData.map(function (d) { return d.y;}).concat(forceY)))\n                        .range(yRange || [availableHeight, 0]);\n                }\n\n            z   .domain(sizeDomain || d3.extent(seriesData.map(function(d) { return d.size }).concat(forceSize)))\n                .range(sizeRange || _sizeRange_def);\n\n            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point\n            singlePoint = x.domain()[0] === x.domain()[1] || y.domain()[0] === y.domain()[1];\n\n            if (x.domain()[0] === x.domain()[1])\n                x.domain()[0] ?\n                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])\n                    : x.domain([-1,1]);\n\n            if (y.domain()[0] === y.domain()[1])\n                y.domain()[0] ?\n                    y.domain([y.domain()[0] - y.domain()[0] * 0.01, y.domain()[1] + y.domain()[1] * 0.01])\n                    : y.domain([-1,1]);\n\n            if ( isNaN(x.domain()[0])) {\n                x.domain([-1,1]);\n            }\n\n            if ( isNaN(y.domain()[0])) {\n                y.domain([-1,1]);\n            }\n\n            x0 = x0 || x;\n            y0 = y0 || y;\n            z0 = z0 || z;\n\n            var scaleDiff = x(1) !== x0(1) || y(1) !== y0(1) || z(1) !== z0(1);\n\n            width0 = width0 || width;\n            height0 = height0 || height;\n\n            var sizeDiff = width0 !== width || height0 !== height;\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-scatter').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatter nv-chart-' + id);\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.classed('nv-single-point', singlePoint);\n            gEnter.append('g').attr('class', 'nv-groups');\n            gEnter.append('g').attr('class', 'nv-point-paths');\n            wrapEnter.append('g').attr('class', 'nv-point-clips');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect')\n                .attr('transform', 'translate( -10, -10)');\n                \n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth + 20)\n                .attr('height', (availableHeight > 0) ? availableHeight + 20 : 0);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            function updateInteractiveLayer() {\n                // Always clear needs-update flag regardless of whether or not\n                // we will actually do anything (avoids needless invocations).\n                needsUpdate = false;\n\n                if (!interactive) return false;\n\n                // inject series and point index for reference into voronoi\n                if (useVoronoi === true) {\n                    var vertices = d3.merge(data.map(function(group, groupIndex) {\n                            return group.values\n                                .map(function(point, pointIndex) {\n                                    // *Adding noise to make duplicates very unlikely\n                                    // *Injecting series and point index for reference\n                                    /* *Adding a 'jitter' to the points, because there's an issue in d3.geom.voronoi.\n                                     */\n                                    var pX = getX(point,pointIndex);\n                                    var pY = getY(point,pointIndex);\n\n                                    return [nv.utils.NaNtoZero(x(pX))+ Math.random() * 1e-4,\n                                            nv.utils.NaNtoZero(y(pY))+ Math.random() * 1e-4,\n                                        groupIndex,\n                                        pointIndex, point]; //temp hack to add noise until I think of a better way so there are no duplicates\n                                })\n                                .filter(function(pointArray, pointIndex) {\n                                    return pointActive(pointArray[4], pointIndex); // Issue #237.. move filter to after map, so pointIndex is correct!\n                                })\n                        })\n                    );\n\n                    if (vertices.length == 0) return false;  // No active points, we're done\n                    if (vertices.length < 3) {\n                        // Issue #283 - Adding 2 dummy points to the voronoi b/c voronoi requires min 3 points to work\n                        vertices.push([x.range()[0] - 20, y.range()[0] - 20, null, null]);\n                        vertices.push([x.range()[1] + 20, y.range()[1] + 20, null, null]);\n                        vertices.push([x.range()[0] - 20, y.range()[0] + 20, null, null]);\n                        vertices.push([x.range()[1] + 20, y.range()[1] - 20, null, null]);\n                    }\n\n                    // keep voronoi sections from going more than 10 outside of graph\n                    // to avoid overlap with other things like legend etc\n                    var bounds = d3.geom.polygon([\n                        [-10,-10],\n                        [-10,height + 10],\n                        [width + 10,height + 10],\n                        [width + 10,-10]\n                    ]);\n\n                    var voronoi = d3.geom.voronoi(vertices).map(function(d, i) {\n                        return {\n                            'data': bounds.clip(d),\n                            'series': vertices[i][2],\n                            'point': vertices[i][3]\n                        }\n                    });\n\n                    // nuke all voronoi paths on reload and recreate them\n                    wrap.select('.nv-point-paths').selectAll('path').remove();\n                    var pointPaths = wrap.select('.nv-point-paths').selectAll('path').data(voronoi);\n                    var vPointPaths = pointPaths\n                        .enter().append(\"svg:path\")\n                        .attr(\"d\", function(d) {\n                            if (!d || !d.data || d.data.length === 0)\n                                return 'M 0 0';\n                            else\n                                return \"M\" + d.data.join(\",\") + \"Z\";\n                        })\n                        .attr(\"id\", function(d,i) {\n                            return \"nv-path-\"+i; })\n                        .attr(\"clip-path\", function(d,i) { return \"url(#nv-clip-\"+id+\"-\"+i+\")\"; })\n                        ;\n\n                    // good for debugging point hover issues\n                    if (showVoronoi) {\n                        vPointPaths.style(\"fill\", d3.rgb(230, 230, 230))\n                            .style('fill-opacity', 0.4)\n                            .style('stroke-opacity', 1)\n                            .style(\"stroke\", d3.rgb(200,200,200));\n                    }\n\n                    if (clipVoronoi) {\n                        // voronoi sections are already set to clip,\n                        // just create the circles with the IDs they expect\n                        wrap.select('.nv-point-clips').selectAll('*').remove(); // must do * since it has sub-dom\n                        var pointClips = wrap.select('.nv-point-clips').selectAll('clipPath').data(vertices);\n                        var vPointClips = pointClips\n                            .enter().append(\"svg:clipPath\")\n                            .attr(\"id\", function(d, i) { return \"nv-clip-\"+id+\"-\"+i;})\n                            .append(\"svg:circle\")\n                            .attr('cx', function(d) { return d[0]; })\n                            .attr('cy', function(d) { return d[1]; })\n                            .attr('r', clipRadius);\n                    }\n\n                    var mouseEventCallback = function(el, d, mDispatch) {\n                        if (needsUpdate) return 0;\n                        var series = data[d.series];\n                        if (series === undefined) return;\n                        var point  = series.values[d.point];\n                        point['color'] = color(series, d.series);\n\n                        // standardize attributes for tooltip.\n                        point['x'] = getX(point);\n                        point['y'] = getY(point);\n\n                        // can't just get box of event node since it's actually a voronoi polygon\n                        var box = container.node().getBoundingClientRect();\n                        var scrollTop  = window.pageYOffset || document.documentElement.scrollTop;\n                        var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n\n                        var pos = {\n                            left: x(getX(point, d.point)) + box.left + scrollLeft + margin.left + 10,\n                            top: y(getY(point, d.point)) + box.top + scrollTop + margin.top + 10\n                        };\n\n                        mDispatch({\n                            point: point,\n                            series: series,\n                            pos: pos,\n                            relativePos: [x(getX(point, d.point)) + margin.left, y(getY(point, d.point)) + margin.top],\n                            seriesIndex: d.series,\n                            pointIndex: d.point,\n                            event: d3.event,\n                            element: el\n                        });\n                    };\n\n                    pointPaths\n                        .on('click', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementClick);\n                        })\n                        .on('dblclick', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementDblClick);\n                        })\n                        .on('mouseover', function(d) {\n                            mouseEventCallback(this, d, dispatch.elementMouseover);\n                        })\n                        .on('mouseout', function(d, i) {\n                            mouseEventCallback(this, d, dispatch.elementMouseout);\n                        });\n\n                } else {\n                    // add event handlers to points instead voronoi paths\n                    wrap.select('.nv-groups').selectAll('.nv-group')\n                        .selectAll('.nv-point')\n                        //.data(dataWithPoints)\n                        //.style('pointer-events', 'auto') // recativate events, disabled by css\n                        .on('click', function(d,i) {\n                            //nv.log('test', d, i);\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n                            var element = this;\n                            dispatch.elementClick({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top], //TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                event: d3.event,\n                                element: element\n                            });\n                        })\n                        .on('dblclick', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementDblClick({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i\n                            });\n                        })\n                        .on('mouseover', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementMouseover({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                color: color(d, i)\n                            });\n                        })\n                        .on('mouseout', function(d,i) {\n                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point\n                            var series = data[d.series],\n                                point  = series.values[i];\n\n                            dispatch.elementMouseout({\n                                point: point,\n                                series: series,\n                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page\n                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],\n                                seriesIndex: d.series,\n                                pointIndex: i,\n                                color: color(d, i)\n                            });\n                        });\n                }\n            }\n\n            needsUpdate = true;\n            var groups = wrap.select('.nv-groups').selectAll('.nv-group')\n                .data(function(d) { return d }, function(d) { return d.key });\n            groups.enter().append('g')\n                .style('stroke-opacity', 1e-6)\n                .style('fill-opacity', 1e-6);\n            groups.exit()\n                .remove();\n            groups\n                .attr('class', function(d,i) {\n                    return (d.classed || '') + ' nv-group nv-series-' + i;\n                })\n                .classed('nv-noninteractive', !interactive)\n                .classed('hover', function(d) { return d.hover });\n            groups.watchTransition(renderWatch, 'scatter: groups')\n                .style('fill', function(d,i) { return color(d, i) })\n                .style('stroke', function(d,i) { return d.pointBorderColor || pointBorderColor || color(d, i) })\n                .style('stroke-opacity', 1)\n                .style('fill-opacity', .5);\n\n            // create the points, maintaining their IDs from the original data set\n            var points = groups.selectAll('path.nv-point')\n                .data(function(d) {\n                    return d.values.map(\n                        function (point, pointIndex) {\n                            return [point, pointIndex]\n                        }).filter(\n                            function(pointArray, pointIndex) {\n                                return pointActive(pointArray[0], pointIndex)\n                            })\n                    });\n            points.enter().append('path')\n                .attr('class', function (d) {\n                    return 'nv-point nv-point-' + d[1];\n                })\n                .style('fill', function (d) { return d.color })\n                .style('stroke', function (d) { return d.color })\n                .attr('transform', function(d) {\n                    return 'translate(' + nv.utils.NaNtoZero(x0(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y0(getY(d[0],d[1]))) + ')'\n                })\n                .attr('d',\n                    nv.utils.symbol()\n                    .type(function(d) { return getShape(d[0]); })\n                    .size(function(d) { return z(getSize(d[0],d[1])) })\n            );\n            points.exit().each(delCache).remove();\n            groups.exit().selectAll('path.nv-point')\n                .watchTransition(renderWatch, 'scatter exit')\n                .attr('transform', function(d) {\n                    return 'translate(' + nv.utils.NaNtoZero(x(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n                })\n                .remove();\n            // Update points position only if \"x\" or \"y\" have changed\n            points.filter(function (d) { return scaleDiff || sizeDiff || getDiffs(d, 'x', getX, 'y', getY); })\n                .watchTransition(renderWatch, 'scatter points')\n                .attr('transform', function(d) {\n                    //nv.log(d, getX(d[0],d[1]), x(getX(d[0],d[1])));\n                    return 'translate(' + nv.utils.NaNtoZero(x(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n                });\n            // Update points appearance only if \"shape\" or \"size\" have changed\n            points.filter(function (d) { return scaleDiff || sizeDiff || getDiffs(d, 'shape', getShape, 'size', getSize); })\n                .watchTransition(renderWatch, 'scatter points')\n                .attr('d',\n                    nv.utils.symbol()\n                    .type(function(d) { return getShape(d[0]); })\n                    .size(function(d) { return z(getSize(d[0],d[1])) })\n            );\n\n            // add label a label to scatter chart\n            if(showLabels)\n            {\n                var titles =  groups.selectAll('.nv-label')\n                    .data(function(d) {\n                        return d.values.map(\n                            function (point, pointIndex) {\n                                return [point, pointIndex]\n                            }).filter(\n                                function(pointArray, pointIndex) {\n                                    return pointActive(pointArray[0], pointIndex)\n                                })\n                        });\n\n                titles.enter().append('text')\n                    .style('fill', function (d,i) {\n                        return d.color })\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 1)\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x0(getX(d[0],d[1]))) + Math.sqrt(z(getSize(d[0],d[1]))/Math.PI) + 2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y0(getY(d[0],d[1]))) + ')';\n                    })\n                    .text(function(d,i){\n                        return d[0].label;});\n\n                titles.exit().remove();\n                groups.exit().selectAll('path.nv-label')\n                    .watchTransition(renderWatch, 'scatter exit')\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x(getX(d[0],d[1])))+ Math.sqrt(z(getSize(d[0],d[1]))/Math.PI)+2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')';\n                    })\n                    .remove();\n               titles.each(function(d) {\n                  d3.select(this)\n                    .classed('nv-label', true)\n                    .classed('nv-label-' + d[1], false)\n                    .classed('hover',false);\n                });\n                titles.watchTransition(renderWatch, 'scatter labels')\n                    .attr('transform', function(d) {\n                        var dx = nv.utils.NaNtoZero(x(getX(d[0],d[1])))+ Math.sqrt(z(getSize(d[0],d[1]))/Math.PI)+2;\n                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'\n                    });\n            }\n\n            // Delay updating the invisible interactive layer for smoother animation\n            if( interactiveUpdateDelay )\n            {\n                clearTimeout(timeoutID); // stop repeat calls to updateInteractiveLayer\n                timeoutID = setTimeout(updateInteractiveLayer, interactiveUpdateDelay );\n            }\n            else\n            {\n                updateInteractiveLayer();\n            }\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n            z0 = z.copy();\n\n            width0 = width;\n            height0 = height;\n\n        });\n        renderWatch.renderEnd('scatter immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // utility function calls provided by this chart\n    chart._calls = new function() {\n        this.clearHighlights = function () {\n            nv.dom.write(function() {\n                container.selectAll(\".nv-point.hover\").classed(\"hover\", false);\n            });\n            return null;\n        };\n        this.highlightPoint = function (seriesIndex, pointIndex, isHoverOver) {\n            nv.dom.write(function() {\n                container.select('.nv-groups')\n                  .selectAll(\".nv-series-\" + seriesIndex)\n                  .selectAll(\".nv-point-\" + pointIndex)\n                  .classed(\"hover\", isHoverOver);\n            });\n        };\n    };\n\n    // trigger calls from events too\n    dispatch.on('elementMouseover.point', function(d) {\n        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,true);\n    });\n\n    dispatch.on('elementMouseout.point', function(d) {\n        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,false);\n    });\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:        {get: function(){return width;}, set: function(_){width=_;}},\n        height:       {get: function(){return height;}, set: function(_){height=_;}},\n        xScale:       {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:       {get: function(){return y;}, set: function(_){y=_;}},\n        pointScale:   {get: function(){return z;}, set: function(_){z=_;}},\n        xDomain:      {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:      {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        pointDomain:  {get: function(){return sizeDomain;}, set: function(_){sizeDomain=_;}},\n        xRange:       {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:       {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        pointRange:   {get: function(){return sizeRange;}, set: function(_){sizeRange=_;}},\n        forceX:       {get: function(){return forceX;}, set: function(_){forceX=_;}},\n        forceY:       {get: function(){return forceY;}, set: function(_){forceY=_;}},\n        forcePoint:   {get: function(){return forceSize;}, set: function(_){forceSize=_;}},\n        interactive:  {get: function(){return interactive;}, set: function(_){interactive=_;}},\n        pointActive:  {get: function(){return pointActive;}, set: function(_){pointActive=_;}},\n        padDataOuter: {get: function(){return padDataOuter;}, set: function(_){padDataOuter=_;}},\n        padData:      {get: function(){return padData;}, set: function(_){padData=_;}},\n        clipEdge:     {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        clipVoronoi:  {get: function(){return clipVoronoi;}, set: function(_){clipVoronoi=_;}},\n        clipRadius:   {get: function(){return clipRadius;}, set: function(_){clipRadius=_;}},\n        showVoronoi:   {get: function(){return showVoronoi;}, set: function(_){showVoronoi=_;}},\n        id:           {get: function(){return id;}, set: function(_){id=_;}},\n        interactiveUpdateDelay: {get:function(){return interactiveUpdateDelay;}, set: function(_){interactiveUpdateDelay=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){ showLabels = _;}},\n        pointBorderColor: {get: function(){return pointBorderColor;}, set: function(_){pointBorderColor=_;}},\n\n        // simple functor options\n        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},\n        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},\n        pointSize: {get: function(){return getSize;}, set: function(_){getSize = d3.functor(_);}},\n        pointShape: {get: function(){return getShape;}, set: function(_){getShape = d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){\n            useVoronoi = _;\n            if (useVoronoi === false) {\n                clipVoronoi = false;\n            }\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.scatterChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var scatter      = nv.models.scatter()\n        , xAxis        = nv.models.axis()\n        , yAxis        = nv.models.axis()\n        , legend       = nv.models.legend()\n        , distX        = nv.models.distribution()\n        , distY        = nv.models.distribution()\n        , tooltip      = nv.models.tooltip()\n        ;\n\n    var margin       = {top: 30, right: 20, bottom: 50, left: 75}\n        , marginTop = null\n        , width        = null\n        , height       = null\n        , container    = null\n        , color        = nv.utils.defaultColor()\n        , x            = scatter.xScale()\n        , y            = scatter.yScale()\n        , showDistX    = false\n        , showDistY    = false\n        , showLegend   = true\n        , showXAxis    = true\n        , showYAxis    = true\n        , rightAlignYAxis = false\n        , state = nv.utils.state()\n        , defaultState = null\n        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')\n        , noData       = null\n        , duration = 250\n        , showLabels    = false\n        ;\n\n    scatter.xScale(x).yScale(y);\n    xAxis.orient('bottom').tickPadding(10);\n    yAxis\n        .orient((rightAlignYAxis) ? 'right' : 'left')\n        .tickPadding(10)\n    ;\n    distX.axis('x');\n    distY.axis('y');\n    tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        });\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var x0, y0\n        , renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled })\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n        if (showDistX) renderWatch.models(distX);\n        if (showDistY) renderWatch.models(distY);\n\n        selection.each(function(data) {\n            var that = this;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0)\n                    container.call(chart);\n                else\n                    container.transition().duration(duration).call(chart);\n            };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disableddisabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display noData message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container);\n                renderWatch.renderEnd('scatter immediate');\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            // background for pointer events\n            gEnter.append('rect').attr('class', 'nvd3 nv-background').style(\"pointer-events\",\"none\");\n\n            gEnter.append('g').attr('class', 'nv-x nv-axis');\n            gEnter.append('g').attr('class', 'nv-y nv-axis');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n            gEnter.append('g').attr('class', 'nv-regressionLinesWrap');\n            gEnter.append('g').attr('class', 'nv-distWrap');\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = availableWidth;\n                legend.width(legendWidth);\n\n                wrap.select('.nv-legendWrap')\n                    .datum(data)\n                    .call(legend);\n\n                if (!marginTop && legend.height() !== margin.top) {\n                    margin.top = legend.height();\n                    availableHeight = nv.utils.availableHeight(height, container, margin);\n                }\n\n                wrap.select('.nv-legendWrap')\n                    .attr('transform', 'translate(0' + ',' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            scatter\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    d.color = d.color || color(d, i);\n                    return d.color;\n                }).filter(function(d,i) { return !data[i].disabled }))\n                .showLabels(showLabels);\n\n            wrap.select('.nv-scatterWrap')\n                .datum(data.filter(function(d) { return !d.disabled }))\n                .call(scatter);\n\n\n            wrap.select('.nv-regressionLinesWrap')\n                .attr('clip-path', 'url(#nv-edge-clip-' + scatter.id() + ')');\n\n            var regWrap = wrap.select('.nv-regressionLinesWrap').selectAll('.nv-regLines')\n                .data(function (d) {\n                    return d;\n                });\n\n            regWrap.enter().append('g').attr('class', 'nv-regLines');\n\n            var regLine = regWrap.selectAll('.nv-regLine')\n                .data(function (d) {\n                    return [d]\n                });\n\n            regLine.enter()\n                .append('line').attr('class', 'nv-regLine')\n                .style('stroke-opacity', 0);\n\n            // don't add lines unless we have slope and intercept to use\n            regLine.filter(function(d) {\n                return d.intercept && d.slope;\n            })\n                .watchTransition(renderWatch, 'scatterPlusLineChart: regline')\n                .attr('x1', x.range()[0])\n                .attr('x2', x.range()[1])\n                .attr('y1', function (d, i) {\n                    return y(x.domain()[0] * d.slope + d.intercept)\n                })\n                .attr('y2', function (d, i) {\n                    return y(x.domain()[1] * d.slope + d.intercept)\n                })\n                .style('stroke', function (d, i, j) {\n                    return color(d, j)\n                })\n                .style('stroke-opacity', function (d, i) {\n                    return (d.disabled || typeof d.slope === 'undefined' || typeof d.intercept === 'undefined') ? 0 : 1\n                });\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis\n                    .scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight , 0);\n\n                g.select('.nv-x.nv-axis')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')')\n                    .call(xAxis);\n            }\n\n            if (showYAxis) {\n                yAxis\n                    .scale(y)\n                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )\n                    .tickSize( -availableWidth, 0);\n\n                g.select('.nv-y.nv-axis')\n                    .call(yAxis);\n            }\n\n            // Setup Distribution\n            if (showDistX) {\n                distX\n                    .getData(scatter.x())\n                    .scale(x)\n                    .width(availableWidth)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled }));\n                gEnter.select('.nv-distWrap').append('g')\n                    .attr('class', 'nv-distributionX');\n                g.select('.nv-distributionX')\n                    .attr('transform', 'translate(0,' + y.range()[0] + ')')\n                    .datum(data.filter(function(d) { return !d.disabled }))\n                    .call(distX);\n            }\n\n            if (showDistY) {\n                distY\n                    .getData(scatter.y())\n                    .scale(y)\n                    .width(availableHeight)\n                    .color(data.map(function(d,i) {\n                        return d.color || color(d, i);\n                    }).filter(function(d,i) { return !data[i].disabled }));\n                gEnter.select('.nv-distWrap').append('g')\n                    .attr('class', 'nv-distributionY');\n                g.select('.nv-distributionY')\n                    .attr('transform', 'translate(' + (rightAlignYAxis ? availableWidth : -distY.size() ) + ',0)')\n                    .datum(data.filter(function(d) { return !d.disabled }))\n                    .call(distY);\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n                if (typeof e.disabled !== 'undefined') {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n                    state.disabled = e.disabled;\n                }\n                chart.update();\n            });\n\n            // mouseover needs availableHeight so we just keep scatter mouse events inside the chart block\n            scatter.dispatch.on('elementMouseout.tooltip', function(evt) {\n                tooltip.hidden(true);\n                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                    .attr('y1', 0);\n                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                    .attr('x2', distY.size());\n            });\n\n            scatter.dispatch.on('elementMouseover.tooltip', function(evt) {\n                container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)\n                    .attr('y1', evt.relativePos[1] - availableHeight);\n                container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)\n                    .attr('x2', evt.relativePos[0] + distX.size());\n                tooltip.data(evt).hidden(false);\n            });\n\n            //store old scales for use in transitions on update\n            x0 = x.copy();\n            y0 = y.copy();\n\n        });\n\n        renderWatch.renderEnd('scatter with line immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    chart.legend = legend;\n    chart.xAxis = xAxis;\n    chart.yAxis = yAxis;\n    chart.distX = distX;\n    chart.distY = distY;\n    chart.tooltip = tooltip;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        container:  {get: function(){return container;}, set: function(_){container=_;}},\n        showDistX:  {get: function(){return showDistX;}, set: function(_){showDistX=_;}},\n        showDistY:  {get: function(){return showDistY;}, set: function(_){showDistY=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        showXAxis:  {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:  {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:     {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:     {get: function(){return noData;}, set: function(_){noData=_;}},\n        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( (_) ? 'right' : 'left');\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            distX.color(color);\n            distY.color(color);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.sparkline = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 2, right: 0, bottom: 2, left: 0}\n        , width = 400\n        , height = 32\n        , container = null\n        , animate = true\n        , x = d3.scale.linear()\n        , y = d3.scale.linear()\n        , getX = function(d) { return d.x }\n        , getY = function(d) { return d.y }\n        , color = nv.utils.getColor(['#000'])\n        , xDomain\n        , yDomain\n        , xRange\n        , yRange\n        , showMinMaxPoints = true\n        , showCurrentPoint = true\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    \n    function chart(selection) {\n        renderWatch.reset();\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x   .domain(xDomain || d3.extent(data, getX ))\n                .range(xRange || [0, availableWidth]);\n\n            y   .domain(yDomain || d3.extent(data, getY ))\n                .range(yRange || [availableHeight, 0]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-sparkline').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparkline');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n\n            var paths = wrap.selectAll('path')\n                .data(function(d) { return [d] });\n            paths.enter().append('path');\n            paths.exit().remove();\n            paths\n                .style('stroke', function(d,i) { return d.color || color(d, i) })\n                .attr('d', d3.svg.line()\n                    .x(function(d,i) { return x(getX(d,i)) })\n                    .y(function(d,i) { return y(getY(d,i)) })\n            );\n\n            // TODO: Add CURRENT data point (Need Min, Mac, Current / Most recent)\n            var points = wrap.selectAll('circle.nv-point')\n                .data(function(data) {\n                    var yValues = data.map(function(d, i) { return getY(d,i); });\n                    function pointIndex(index) {\n                        if (index != -1) {\n                            var result = data[index];\n                            result.pointIndex = index;\n                            return result;\n                        } else {\n                            return null;\n                        }\n                    }\n                    var maxPoint = pointIndex(yValues.lastIndexOf(y.domain()[1])),\n                        minPoint = pointIndex(yValues.indexOf(y.domain()[0])),\n                        currentPoint = pointIndex(yValues.length - 1);\n                    return [(showMinMaxPoints ? minPoint : null), (showMinMaxPoints ? maxPoint : null), (showCurrentPoint ? currentPoint : null)].filter(function (d) {return d != null;});\n                });\n            points.enter().append('circle');\n            points.exit().remove();\n            points\n                .attr('cx', function(d,i) { return x(getX(d,d.pointIndex)) })\n                .attr('cy', function(d,i) { return y(getY(d,d.pointIndex)) })\n                .attr('r', 2)\n                .attr('class', function(d,i) {\n                    return getX(d, d.pointIndex) == x.domain()[1] ? 'nv-point nv-currentValue' :\n                            getY(d, d.pointIndex) == y.domain()[0] ? 'nv-point nv-minValue' : 'nv-point nv-maxValue'\n                });\n        });\n        \n        renderWatch.renderEnd('sparkline immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:            {get: function(){return width;}, set: function(_){width=_;}},\n        height:           {get: function(){return height;}, set: function(_){height=_;}},\n        xDomain:          {get: function(){return xDomain;}, set: function(_){xDomain=_;}},\n        yDomain:          {get: function(){return yDomain;}, set: function(_){yDomain=_;}},\n        xRange:           {get: function(){return xRange;}, set: function(_){xRange=_;}},\n        yRange:           {get: function(){return yRange;}, set: function(_){yRange=_;}},\n        xScale:           {get: function(){return x;}, set: function(_){x=_;}},\n        yScale:           {get: function(){return y;}, set: function(_){y=_;}},\n        animate:          {get: function(){return animate;}, set: function(_){animate=_;}},\n        showMinMaxPoints: {get: function(){return showMinMaxPoints;}, set: function(_){showMinMaxPoints=_;}},\n        showCurrentPoint: {get: function(){return showCurrentPoint;}, set: function(_){showCurrentPoint=_;}},\n\n        //functor options\n        x: {get: function(){return getX;}, set: function(_){getX=d3.functor(_);}},\n        y: {get: function(){return getY;}, set: function(_){getY=d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }}\n    });\n\n    chart.dispatch = dispatch;\n    nv.utils.initOptions(chart);\n    return chart;\n};\n\nnv.models.sparklinePlus = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sparkline = nv.models.sparkline();\n\n    var margin = {top: 15, right: 100, bottom: 10, left: 50}\n        , width = null\n        , height = null\n        , x\n        , y\n        , index = []\n        , paused = false\n        , xTickFormat = d3.format(',r')\n        , yTickFormat = d3.format(',.2f')\n        , showLastValue = true\n        , alignValue = true\n        , rightAlignValue = false\n        , noData = null\n        , dispatch = d3.dispatch('renderEnd')\n        ;\n        \n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(sparkline);\n        selection.each(function(data) {\n            var container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() { container.call(chart); };\n            chart.container = this;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            var currentValue = sparkline.y()(data[data.length-1], data.length-1);\n\n            // Setup Scales\n            x = sparkline.xScale();\n            y = sparkline.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-sparklineplus').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparklineplus');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-sparklineWrap');\n            gEnter.append('g').attr('class', 'nv-valueWrap');\n            gEnter.append('g').attr('class', 'nv-hoverArea');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            // Main Chart Component(s)\n            var sparklineWrap = g.select('.nv-sparklineWrap');\n\n            sparkline.width(availableWidth).height(availableHeight);\n            sparklineWrap.call(sparkline);\n\n            if (showLastValue) {\n                var valueWrap = g.select('.nv-valueWrap');\n                var value = valueWrap.selectAll('.nv-currentValue')\n                    .data([currentValue]);\n\n                value.enter().append('text').attr('class', 'nv-currentValue')\n                    .attr('dx', rightAlignValue ? -8 : 8)\n                    .attr('dy', '.9em')\n                    .style('text-anchor', rightAlignValue ? 'end' : 'start');\n\n                value\n                    .attr('x', availableWidth + (rightAlignValue ? margin.right : 0))\n                    .attr('y', alignValue ? function (d) {\n                        return y(d)\n                    } : 0)\n                    .style('fill', sparkline.color()(data[data.length - 1], data.length - 1))\n                    .text(yTickFormat(currentValue));\n            }\n\n            gEnter.select('.nv-hoverArea').append('rect')\n                .on('mousemove', sparklineHover)\n                .on('click', function() { paused = !paused })\n                .on('mouseout', function() { index = []; updateValueLine(); });\n\n            g.select('.nv-hoverArea rect')\n                .attr('transform', function(d) { return 'translate(' + -margin.left + ',' + -margin.top + ')' })\n                .attr('width', availableWidth + margin.left + margin.right)\n                .attr('height', availableHeight + margin.top);\n\n            //index is currently global (within the chart), may or may not keep it that way\n            function updateValueLine() {\n                if (paused) return;\n\n                var hoverValue = g.selectAll('.nv-hoverValue').data(index);\n\n                var hoverEnter = hoverValue.enter()\n                    .append('g').attr('class', 'nv-hoverValue')\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 0);\n\n                hoverValue.exit()\n                    .transition().duration(250)\n                    .style('stroke-opacity', 0)\n                    .style('fill-opacity', 0)\n                    .remove();\n\n                hoverValue\n                    .attr('transform', function(d) { return 'translate(' + x(sparkline.x()(data[d],d)) + ',0)' })\n                    .transition().duration(250)\n                    .style('stroke-opacity', 1)\n                    .style('fill-opacity', 1);\n\n                if (!index.length) return;\n\n                hoverEnter.append('line')\n                    .attr('x1', 0)\n                    .attr('y1', -margin.top)\n                    .attr('x2', 0)\n                    .attr('y2', availableHeight);\n\n                hoverEnter.append('text').attr('class', 'nv-xValue')\n                    .attr('x', -6)\n                    .attr('y', -margin.top)\n                    .attr('text-anchor', 'end')\n                    .attr('dy', '.9em');\n\n                g.select('.nv-hoverValue .nv-xValue')\n                    .text(xTickFormat(sparkline.x()(data[index[0]], index[0])));\n\n                hoverEnter.append('text').attr('class', 'nv-yValue')\n                    .attr('x', 6)\n                    .attr('y', -margin.top)\n                    .attr('text-anchor', 'start')\n                    .attr('dy', '.9em');\n\n                g.select('.nv-hoverValue .nv-yValue')\n                    .text(yTickFormat(sparkline.y()(data[index[0]], index[0])));\n            }\n\n            function sparklineHover() {\n                if (paused) return;\n\n                var pos = d3.mouse(this)[0] - margin.left;\n\n                function getClosestIndex(data, x) {\n                    var distance = Math.abs(sparkline.x()(data[0], 0) - x);\n                    var closestIndex = 0;\n                    for (var i = 0; i < data.length; i++){\n                        if (Math.abs(sparkline.x()(data[i], i) - x) < distance) {\n                            distance = Math.abs(sparkline.x()(data[i], i) - x);\n                            closestIndex = i;\n                        }\n                    }\n                    return closestIndex;\n                }\n\n                index = [getClosestIndex(data, Math.round(x.invert(pos)))];\n                updateValueLine();\n            }\n\n        });\n        renderWatch.renderEnd('sparklinePlus immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.sparkline = sparkline;\n\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:           {get: function(){return width;}, set: function(_){width=_;}},\n        height:          {get: function(){return height;}, set: function(_){height=_;}},\n        xTickFormat:     {get: function(){return xTickFormat;}, set: function(_){xTickFormat=_;}},\n        yTickFormat:     {get: function(){return yTickFormat;}, set: function(_){yTickFormat=_;}},\n        showLastValue:   {get: function(){return showLastValue;}, set: function(_){showLastValue=_;}},\n        alignValue:      {get: function(){return alignValue;}, set: function(_){alignValue=_;}},\n        rightAlignValue: {get: function(){return rightAlignValue;}, set: function(_){rightAlignValue=_;}},\n        noData:          {get: function(){return noData;}, set: function(_){noData=_;}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, sparkline);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedArea = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 960\n        , height = 500\n        , color = nv.utils.defaultColor() // a function that computes the color\n        , id = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't selet one\n        , container = null\n        , getX = function(d) { return d.x } // accessor to get the x value from a data point\n        , getY = function(d) { return d.y } // accessor to get the y value from a data point\n        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined\n        , style = 'stack'\n        , offset = 'zero'\n        , order = 'default'\n        , interpolate = 'linear'  // controls the line interpolation\n        , clipEdge = false // if true, masks lines within x and y scale\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , scatter = nv.models.scatter()\n        , duration = 250\n        , dispatch =  d3.dispatch('areaClick', 'areaMouseover', 'areaMouseout','renderEnd', 'elementClick', 'elementMouseover', 'elementMouseout')\n        ;\n\n    scatter\n        .pointSize(2.2) // default size\n        .pointDomain([2.2, 2.2]) // all the same size by default\n    ;\n\n    /************************************\n     * offset:\n     *   'wiggle' (stream)\n     *   'zero' (stacked)\n     *   'expand' (normalize to 100%)\n     *   'silhouette' (simple centered)\n     *\n     * order:\n     *   'inside-out' (stream)\n     *   'default' (input order)\n     ************************************/\n\n    var renderWatch = nv.utils.renderWatch(dispatch, duration);\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(scatter);\n        selection.each(function(data) {\n            var availableWidth = width - margin.left - margin.right,\n                availableHeight = height - margin.top - margin.bottom;\n\n            container = d3.select(this);\n            nv.utils.initSVG(container);\n\n            // Setup Scales\n            x = scatter.xScale();\n            y = scatter.yScale();\n\n            var dataRaw = data;\n            // Injecting point index into each point because d3.layout.stack().out does not give index\n            data.forEach(function(aseries, i) {\n                aseries.seriesIndex = i;\n                aseries.values = aseries.values.map(function(d, j) {\n                    d.index = j;\n                    d.seriesIndex = i;\n                    return d;\n                });\n            });\n\n            var dataFiltered = data.filter(function(series) {\n                return !series.disabled;\n            });\n\n            data = d3.layout.stack()\n                .order(order)\n                .offset(offset)\n                .values(function(d) { return d.values })  //TODO: make values customizeable in EVERY model in this fashion\n                .x(getX)\n                .y(getY)\n                .out(function(d, y0, y) {\n                    d.display = {\n                        y: y,\n                        y0: y0\n                    };\n                })\n            (dataFiltered);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-stackedarea').data([data]);\n            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedarea');\n            var defsEnter = wrapEnter.append('defs');\n            var gEnter = wrapEnter.append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-areaWrap');\n            gEnter.append('g').attr('class', 'nv-scatterWrap');\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n            \n            // If the user has not specified forceY, make sure 0 is included in the domain\n            // Otherwise, use user-specified values for forceY\n            if (scatter.forceY().length == 0) {\n                scatter.forceY().push(0);\n            }\n            \n            scatter\n                .width(availableWidth)\n                .height(availableHeight)\n                .x(getX)\n                .y(function(d) {\n                    if (d.display !== undefined) { return d.display.y + d.display.y0; }\n                })\n                .color(data.map(function(d,i) {\n                    d.color = d.color || color(d, d.seriesIndex);\n                    return d.color;\n                }));\n\n            var scatterWrap = g.select('.nv-scatterWrap')\n                .datum(data);\n\n            scatterWrap.call(scatter);\n\n            defsEnter.append('clipPath')\n                .attr('id', 'nv-edge-clip-' + id)\n                .append('rect');\n\n            wrap.select('#nv-edge-clip-' + id + ' rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');\n\n            var area = d3.svg.area()\n                .defined(defined)\n                .x(function(d,i)  { return x(getX(d,i)) })\n                .y0(function(d) {\n                    return y(d.display.y0)\n                })\n                .y1(function(d) {\n                    return y(d.display.y + d.display.y0)\n                })\n                .interpolate(interpolate);\n\n            var zeroArea = d3.svg.area()\n                .defined(defined)\n                .x(function(d,i)  { return x(getX(d,i)) })\n                .y0(function(d) { return y(d.display.y0) })\n                .y1(function(d) { return y(d.display.y0) });\n\n            var path = g.select('.nv-areaWrap').selectAll('path.nv-area')\n                .data(function(d) { return d });\n\n            path.enter().append('path').attr('class', function(d,i) { return 'nv-area nv-area-' + i })\n                .attr('d', function(d,i){\n                    return zeroArea(d.values, d.seriesIndex);\n                })\n                .on('mouseover', function(d,i) {\n                    d3.select(this).classed('hover', true);\n                    dispatch.areaMouseover({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                })\n                .on('mouseout', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.areaMouseout({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                })\n                .on('click', function(d,i) {\n                    d3.select(this).classed('hover', false);\n                    dispatch.areaClick({\n                        point: d,\n                        series: d.key,\n                        pos: [d3.event.pageX, d3.event.pageY],\n                        seriesIndex: d.seriesIndex\n                    });\n                });\n\n            path.exit().remove();\n            path.style('fill', function(d,i){\n                    return d.color || color(d, d.seriesIndex)\n                })\n                .style('stroke', function(d,i){ return d.color || color(d, d.seriesIndex) });\n            path.watchTransition(renderWatch,'stackedArea path')\n                .attr('d', function(d,i) {\n                    return area(d.values,i)\n                });\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            scatter.dispatch.on('elementMouseover.area', function(e) {\n                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', true);\n            });\n            scatter.dispatch.on('elementMouseout.area', function(e) {\n                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', false);\n            });\n\n            //Special offset functions\n            chart.d3_stackedOffset_stackPercent = function(stackData) {\n                var n = stackData.length,    //How many series\n                    m = stackData[0].length,     //how many points per series\n                    i,\n                    j,\n                    o,\n                    y0 = [];\n\n                for (j = 0; j < m; ++j) { //Looping through all points\n                    for (i = 0, o = 0; i < dataRaw.length; i++) { //looping through all series\n                        o += getY(dataRaw[i].values[j]); //total y value of all series at a certian point in time.\n                    }\n\n                    if (o) for (i = 0; i < n; i++) { //(total y value of all series at point in time i) != 0\n                        stackData[i][j][1] /= o;\n                    } else { //(total y value of all series at point in time i) == 0\n                        for (i = 0; i < n; i++) {\n                            stackData[i][j][1] = 0;\n                        }\n                    }\n                }\n                for (j = 0; j < m; ++j) y0[j] = 0;\n                return y0;\n            };\n\n        });\n\n        renderWatch.renderEnd('stackedArea immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Global getters and setters\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n\n    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });\n    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });\n\n    chart.interpolate = function(_) {\n        if (!arguments.length) return interpolate;\n        interpolate = _;\n        return chart;\n    };\n\n    chart.duration = function(_) {\n        if (!arguments.length) return duration;\n        duration = _;\n        renderWatch.reset(duration);\n        scatter.duration(duration);\n        return chart;\n    };\n\n    chart.dispatch = dispatch;\n    chart.scatter = scatter;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        defined: {get: function(){return defined;}, set: function(_){defined=_;}},\n        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},\n        offset:      {get: function(){return offset;}, set: function(_){offset=_;}},\n        order:    {get: function(){return order;}, set: function(_){order=_;}},\n        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},\n\n        // simple functor options\n        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},\n        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n        }},\n        style: {get: function(){return style;}, set: function(_){\n            style = _;\n            switch (style) {\n                case 'stack':\n                    chart.offset('zero');\n                    chart.order('default');\n                    break;\n                case 'stream':\n                    chart.offset('wiggle');\n                    chart.order('inside-out');\n                    break;\n                case 'stream-center':\n                    chart.offset('silhouette');\n                    chart.order('inside-out');\n                    break;\n                case 'expand':\n                    chart.offset('expand');\n                    chart.order('default');\n                    break;\n                case 'stack_percent':\n                    chart.offset(chart.d3_stackedOffset_stackPercent);\n                    chart.order('default');\n                    break;\n            }\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            scatter.duration(duration);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, scatter);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedAreaChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var stacked = nv.models.stackedArea()\n        , xAxis = nv.models.axis()\n        , yAxis = nv.models.axis()\n        , legend = nv.models.legend()\n        , controls = nv.models.legend()\n        , interactiveLayer = nv.interactiveGuideline()\n        , tooltip = nv.models.tooltip()\n        , focus = nv.models.focus(nv.models.stackedArea())\n        ;\n\n    var margin = {top: 10, right: 25, bottom: 50, left: 60}\n        , marginTop = null\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showControls = true\n        , showLegend = true\n        , legendPosition = 'top'\n        , showXAxis = true\n        , showYAxis = true\n        , rightAlignYAxis = false\n        , focusEnable = false\n        , useInteractiveGuideline = false\n        , showTotalInTooltip = true\n        , totalLabel = 'TOTAL'\n        , x //can be accessed via chart.xScale()\n        , y //can be accessed via chart.yScale()\n        , state = nv.utils.state()\n        , defaultState = null\n        , noData = null\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')\n        , controlWidth = 250\n        , controlOptions = ['Stacked','Stream','Expanded']\n        , controlLabels = {}\n        , duration = 250\n        ;\n\n    state.style = stacked.style();\n    xAxis.orient('bottom').tickPadding(7);\n    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');\n\n    tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return yAxis.tickFormat()(d, i);\n        });\n\n    interactiveLayer.tooltip\n        .headerFormatter(function(d, i) {\n            return xAxis.tickFormat()(d, i);\n        })\n        .valueFormatter(function(d, i) {\n            return d == null ? \"N/A\" : yAxis.tickFormat()(d, i);\n        });\n\n    var oldYTickFormat = null,\n        oldValueFormatter = null;\n\n    controls.updateState(false);\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n    var style = stacked.style();\n\n    var stateGetter = function(data) {\n        return function(){\n            return {\n                active: data.map(function(d) { return !d.disabled }),\n                style: stacked.style()\n            };\n        }\n    };\n\n    var stateSetter = function(data) {\n        return function(state) {\n            if (state.style !== undefined)\n                style = state.style;\n            if (state.active !== undefined)\n                data.forEach(function(series,i) {\n                    series.disabled = !state.active[i];\n                });\n        }\n    };\n\n    var percentFormatter = d3.format('%');\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(stacked);\n        if (showXAxis) renderWatch.models(xAxis);\n        if (showYAxis) renderWatch.models(yAxis);\n\n        selection.each(function(data) {\n            var container = d3.select(this),\n                that = this;\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin),\n                availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n\n            chart.update = function() { container.transition().duration(duration).call(chart); };\n            chart.container = this;\n\n            state\n                .setter(stateSetter(data), chart.update)\n                .getter(stateGetter(data))\n                .update();\n\n            // DEPRECATED set state.disabled\n            state.disabled = data.map(function(d) { return !!d.disabled });\n\n            if (!defaultState) {\n                var key;\n                defaultState = {};\n                for (key in state) {\n                    if (state[key] instanceof Array)\n                        defaultState[key] = state[key].slice(0);\n                    else\n                        defaultState[key] = state[key];\n                }\n            }\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {\n                nv.utils.noData(chart, container)\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n            // Setup Scales\n            x = stacked.xScale();\n            y = stacked.yScale();\n\n            // Setup containers and skeleton of chart\n            var wrap = container.selectAll('g.nv-wrap.nv-stackedAreaChart').data([data]);\n            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedAreaChart').append('g');\n            var g = wrap.select('g');\n\n            gEnter.append('g').attr('class', 'nv-legendWrap');\n            gEnter.append('g').attr('class', 'nv-controlsWrap');\n\n            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');\n            focusEnter.append('g').attr('class', 'nv-background').append('rect');\n            focusEnter.append('g').attr('class', 'nv-x nv-axis');\n            focusEnter.append('g').attr('class', 'nv-y nv-axis');\n            focusEnter.append('g').attr('class', 'nv-stackedWrap');\n            focusEnter.append('g').attr('class', 'nv-interactive');\n\n            // g.select(\"rect\").attr(\"width\",availableWidth).attr(\"height\",availableHeight);\n\n            var contextEnter = gEnter.append('g').attr('class', 'nv-focusWrap');\n\n            // Legend\n            if (!showLegend) {\n                g.select('.nv-legendWrap').selectAll('*').remove();\n            } else {\n                var legendWidth = (showControls && legendPosition === 'top') ? availableWidth - controlWidth : availableWidth;\n\n                legend.width(legendWidth);\n                g.select('.nv-legendWrap').datum(data).call(legend);\n\n                if (legendPosition === 'bottom') {\n                \t// constant from axis.js, plus some margin for better layout\n                \tvar xAxisHeight = (showXAxis ? 12 : 0) + 10;\n                   \tmargin.bottom = Math.max(legend.height() + xAxisHeight, margin.bottom);\n                   \tavailableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                \tvar legendTop = availableHeight + xAxisHeight;\n                    g.select('.nv-legendWrap')\n                        .attr('transform', 'translate(0,' + legendTop +')');\n                } else if (legendPosition === 'top') {\n                    if (!marginTop && margin.top != legend.height()) {\n                        margin.top = legend.height();\n                        availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                    }\n\n                    g.select('.nv-legendWrap')\n                    \t.attr('transform', 'translate(' + (availableWidth-legendWidth) + ',' + (-margin.top) +')');\n                }\n            }\n\n            // Controls\n            if (!showControls) {\n                 g.select('.nv-controlsWrap').selectAll('*').remove();\n            } else {\n                var controlsData = [\n                    {\n                        key: controlLabels.stacked || 'Stacked',\n                        metaKey: 'Stacked',\n                        disabled: stacked.style() != 'stack',\n                        style: 'stack'\n                    },\n                    {\n                        key: controlLabels.stream || 'Stream',\n                        metaKey: 'Stream',\n                        disabled: stacked.style() != 'stream',\n                        style: 'stream'\n                    },\n                    {\n                        key: controlLabels.expanded || 'Expanded',\n                        metaKey: 'Expanded',\n                        disabled: stacked.style() != 'expand',\n                        style: 'expand'\n                    },\n                    {\n                        key: controlLabels.stack_percent || 'Stack %',\n                        metaKey: 'Stack_Percent',\n                        disabled: stacked.style() != 'stack_percent',\n                        style: 'stack_percent'\n                    }\n                ];\n\n                controlWidth = (controlOptions.length/3) * 260;\n                controlsData = controlsData.filter(function(d) {\n                    return controlOptions.indexOf(d.metaKey) !== -1;\n                });\n\n                controls\n                    .width( controlWidth )\n                    .color(['#444', '#444', '#444']);\n\n                g.select('.nv-controlsWrap')\n                    .datum(controlsData)\n                    .call(controls);\n\n                var requiredTop = Math.max(controls.height(), showLegend && (legendPosition === 'top') ? legend.height() : 0);\n\n                if ( margin.top != requiredTop ) {\n                    margin.top = requiredTop;\n                    availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);\n                }\n\n                g.select('.nv-controlsWrap')\n                    .attr('transform', 'translate(0,' + (-margin.top) +')');\n            }\n\n            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n            if (rightAlignYAxis) {\n                g.select(\".nv-y.nv-axis\")\n                    .attr(\"transform\", \"translate(\" + availableWidth + \",0)\");\n            }\n\n            //Set up interactive layer\n            if (useInteractiveGuideline) {\n                interactiveLayer\n                    .width(availableWidth)\n                    .height(availableHeight)\n                    .margin({left: margin.left, top: margin.top})\n                    .svgContainer(container)\n                    .xScale(x);\n                wrap.select(\".nv-interactive\").call(interactiveLayer);\n            }\n\n            g.select('.nv-focus .nv-background rect')\n                .attr('width', availableWidth)\n                .attr('height', availableHeight);\n\n            stacked\n                .width(availableWidth)\n                .height(availableHeight)\n                .color(data.map(function(d,i) {\n                    return d.color || color(d, i);\n                }).filter(function(d,i) { return !data[i].disabled; }));\n\n            var stackedWrap = g.select('.nv-focus .nv-stackedWrap')\n                .datum(data.filter(function(d) { return !d.disabled; }));\n\n            // Setup Axes\n            if (showXAxis) {\n                xAxis.scale(x)\n                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )\n                    .tickSize( -availableHeight, 0);\n            }\n\n            if (showYAxis) {\n                var ticks;\n                if (stacked.offset() === 'wiggle') {\n                    ticks = 0;\n                }\n                else {\n                    ticks = nv.utils.calcTicksY(availableHeight/36, data);\n                }\n                yAxis.scale(y)\n                    ._ticks(ticks)\n                    .tickSize(-availableWidth, 0);\n            }\n\n            //============================================================\n            // Update Axes\n            //============================================================\n            function updateXAxis() {\n                if(showXAxis) {\n                    g.select('.nv-focus .nv-x.nv-axis')\n                        .attr('transform', 'translate(0,' + availableHeight + ')')\n                        .transition()\n                        .duration(duration)\n                        .call(xAxis)\n                        ;\n                }\n            }\n\n            function updateYAxis() {\n                if(showYAxis) {\n                    if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {\n                        var currentFormat = yAxis.tickFormat();\n\n                        if ( !oldYTickFormat || currentFormat !== percentFormatter )\n                            oldYTickFormat = currentFormat;\n\n                        //Forces the yAxis to use percentage in 'expand' mode.\n                        yAxis.tickFormat(percentFormatter);\n                    }\n                    else {\n                        if (oldYTickFormat) {\n                            yAxis.tickFormat(oldYTickFormat);\n                            oldYTickFormat = null;\n                        }\n                    }\n\n                    g.select('.nv-focus .nv-y.nv-axis')\n                    .transition().duration(0)\n                    .call(yAxis);\n                }\n            }\n\n            //============================================================\n            // Update Focus\n            //============================================================\n            if(!focusEnable) {\n                stackedWrap.transition().call(stacked);\n                updateXAxis();\n                updateYAxis();\n            } else {\n                focus.width(availableWidth);\n                g.select('.nv-focusWrap')\n                    .attr('transform', 'translate(0,' + ( availableHeight + margin.bottom + focus.margin().top) + ')')\n                    .datum(data.filter(function(d) { return !d.disabled; }))\n                    .call(focus);\n                var extent = focus.brush.empty() ? focus.xDomain() : focus.brush.extent();\n                if(extent !== null){\n                    onBrush(extent);\n                }\n            }\n\n            //============================================================\n            // Event Handling/Dispatching (in chart's scope)\n            //------------------------------------------------------------\n\n            stacked.dispatch.on('areaClick.toggle', function(e) {\n                if (data.filter(function(d) { return !d.disabled }).length === 1)\n                    data.forEach(function(d) {\n                        d.disabled = false;\n                    });\n                else\n                    data.forEach(function(d,i) {\n                        d.disabled = (i != e.seriesIndex);\n                    });\n\n                state.disabled = data.map(function(d) { return !!d.disabled });\n                dispatch.stateChange(state);\n\n                chart.update();\n            });\n\n            legend.dispatch.on('stateChange', function(newState) {\n                for (var key in newState)\n                    state[key] = newState[key];\n                dispatch.stateChange(state);\n                chart.update();\n            });\n\n            controls.dispatch.on('legendClick', function(d,i) {\n                if (!d.disabled) return;\n\n                controlsData = controlsData.map(function(s) {\n                    s.disabled = true;\n                    return s;\n                });\n                d.disabled = false;\n\n                stacked.style(d.style);\n\n\n                state.style = stacked.style();\n                dispatch.stateChange(state);\n\n                chart.update();\n            });\n\n            interactiveLayer.dispatch.on('elementMousemove', function(e) {\n                stacked.clearHighlights();\n                var singlePoint, pointIndex, pointXLocation, allData = [], valueSum = 0, allNullValues = true;\n                data\n                    .filter(function(series, i) {\n                        series.seriesIndex = i;\n                        return !series.disabled;\n                    })\n                    .forEach(function(series,i) {\n                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());\n                        var point = series.values[pointIndex];\n                        var pointYValue = chart.y()(point, pointIndex);\n                        if (pointYValue != null) {\n                            stacked.highlightPoint(i, pointIndex, true);\n                        }\n                        if (typeof point === 'undefined') return;\n                        if (typeof singlePoint === 'undefined') singlePoint = point;\n                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));\n\n                        //If we are in 'expand' mode, use the stacked percent value instead of raw value.\n                        var tooltipValue = (stacked.style() == 'expand') ? point.display.y : chart.y()(point,pointIndex);\n                        allData.push({\n                            key: series.key,\n                            value: tooltipValue,\n                            color: color(series,series.seriesIndex),\n                            point: point\n                        });\n\n                        if (showTotalInTooltip && stacked.style() != 'expand' && tooltipValue != null) {\n                          valueSum += tooltipValue;\n                          allNullValues = false;\n                        };\n                    });\n\n                allData.reverse();\n\n                //Highlight the tooltip entry based on which stack the mouse is closest to.\n                if (allData.length > 2) {\n                    var yValue = chart.yScale().invert(e.mouseY);\n                    var yDistMax = Infinity, indexToHighlight = null;\n                    allData.forEach(function(series,i) {\n\n                        //To handle situation where the stacked area chart is negative, we need to use absolute values\n                        //when checking if the mouse Y value is within the stack area.\n                        yValue = Math.abs(yValue);\n                        var stackedY0 = Math.abs(series.point.display.y0);\n                        var stackedY = Math.abs(series.point.display.y);\n                        if ( yValue >= stackedY0 && yValue <= (stackedY + stackedY0))\n                        {\n                            indexToHighlight = i;\n                            return;\n                        }\n                    });\n                    if (indexToHighlight != null)\n                        allData[indexToHighlight].highlight = true;\n                }\n\n                //If we are not in 'expand' mode, add a 'Total' row to the tooltip.\n                if (showTotalInTooltip && stacked.style() != 'expand' && allData.length >= 2 && !allNullValues) {\n                    allData.push({\n                        key: totalLabel,\n                        value: valueSum,\n                        total: true\n                    });\n                }\n\n                var xValue = chart.x()(singlePoint,pointIndex);\n\n                var valueFormatter = interactiveLayer.tooltip.valueFormatter();\n                // Keeps track of the tooltip valueFormatter if the chart changes to expanded view\n                if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {\n                    if ( !oldValueFormatter ) {\n                        oldValueFormatter = valueFormatter;\n                    }\n                    //Forces the tooltip to use percentage in 'expand' mode.\n                    valueFormatter = d3.format(\".1%\");\n                }\n                else {\n                    if (oldValueFormatter) {\n                        valueFormatter = oldValueFormatter;\n                        oldValueFormatter = null;\n                    }\n                }\n\n                interactiveLayer.tooltip\n                    .valueFormatter(valueFormatter)\n                    .data(\n                    {\n                        value: xValue,\n                        series: allData\n                    }\n                )();\n\n                interactiveLayer.renderGuideLine(pointXLocation);\n\n            });\n\n            interactiveLayer.dispatch.on(\"elementMouseout\",function(e) {\n                stacked.clearHighlights();\n            });\n\n            /* Update `main' graph on brush update. */\n            focus.dispatch.on(\"onBrush\", function(extent) {\n                onBrush(extent);\n            });\n\n            // Update chart from a state object passed to event handler\n            dispatch.on('changeState', function(e) {\n\n                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {\n                    data.forEach(function(series,i) {\n                        series.disabled = e.disabled[i];\n                    });\n\n                    state.disabled = e.disabled;\n                }\n\n                if (typeof e.style !== 'undefined') {\n                    stacked.style(e.style);\n                    style = e.style;\n                }\n\n                chart.update();\n            });\n\n            //============================================================\n            // Functions\n            //------------------------------------------------------------\n\n            function onBrush(extent) {\n                // Update Main (Focus)\n                var stackedWrap = g.select('.nv-focus .nv-stackedWrap')\n                    .datum(\n                    data.filter(function(d) { return !d.disabled; })\n                        .map(function(d,i) {\n                            return {\n                                key: d.key,\n                                area: d.area,\n                                classed: d.classed,\n                                values: d.values.filter(function(d,i) {\n                                    return stacked.x()(d,i) >= extent[0] && stacked.x()(d,i) <= extent[1];\n                                }),\n                                disableTooltip: d.disableTooltip\n                            };\n                        })\n                );\n                stackedWrap.transition().duration(duration).call(stacked);\n\n                // Update Main (Focus) Axes\n                updateXAxis();\n                updateYAxis();\n            }\n\n        });\n\n        renderWatch.renderEnd('stacked Area chart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    stacked.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.point['x'] = stacked.x()(evt.point);\n        evt.point['y'] = stacked.y()(evt.point);\n        tooltip.data(evt).hidden(false);\n    });\n\n    stacked.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true)\n    });\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.stacked = stacked;\n    chart.legend = legend;\n    chart.controls = controls;\n    chart.xAxis = xAxis;\n    chart.x2Axis = focus.xAxis;\n    chart.yAxis = yAxis;\n    chart.y2Axis = focus.yAxis;\n    chart.interactiveLayer = interactiveLayer;\n    chart.tooltip = tooltip;\n    chart.focus = focus;\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},\n        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},\n        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},\n        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},\n        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},\n        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},\n        showControls:    {get: function(){return showControls;}, set: function(_){showControls=_;}},\n        controlLabels:    {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},\n        controlOptions:    {get: function(){return controlOptions;}, set: function(_){controlOptions=_;}},\n        showTotalInTooltip:      {get: function(){return showTotalInTooltip;}, set: function(_){showTotalInTooltip=_;}},\n        totalLabel:      {get: function(){return totalLabel;}, set: function(_){totalLabel=_;}},\n        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},\n        focusHeight:     {get: function(){return focus.height();}, set: function(_){focus.height(_);}},\n        brushExtent: {get: function(){return focus.brushExtent();}, set: function(_){focus.brushExtent(_);}},\n\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            if (_.top !== undefined) {\n                margin.top = _.top;\n                marginTop = _.top;\n            }\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n        }},\n        focusMargin: {get: function(){return focus.margin}, set: function(_){\n            focus.margin.top    = _.top    !== undefined ? _.top    : focus.margin.top;\n            focus.margin.right  = _.right  !== undefined ? _.right  : focus.margin.right;\n            focus.margin.bottom = _.bottom !== undefined ? _.bottom : focus.margin.bottom;\n            focus.margin.left   = _.left   !== undefined ? _.left   : focus.margin.left;\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            stacked.duration(duration);\n            xAxis.duration(duration);\n            yAxis.duration(duration);\n        }},\n        color:  {get: function(){return color;}, set: function(_){\n            color = nv.utils.getColor(_);\n            legend.color(color);\n            stacked.color(color);\n            focus.color(color);\n        }},\n        x: {get: function(){return stacked.x();}, set: function(_){\n            stacked.x(_);\n            focus.x(_);\n        }},\n        y: {get: function(){return stacked.y();}, set: function(_){\n            stacked.y(_);\n            focus.y(_);\n        }},\n        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){\n            rightAlignYAxis = _;\n            yAxis.orient( rightAlignYAxis ? 'right' : 'left');\n        }},\n        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){\n            useInteractiveGuideline = !!_;\n            chart.interactive(!_);\n            chart.useVoronoi(!_);\n            stacked.scatter.interactive(!_);\n        }}\n    });\n\n    nv.utils.inheritOptions(chart, stacked);\n    nv.utils.initOptions(chart);\n\n    return chart;\n};\n\nnv.models.stackedAreaWithFocusChart = function() {\n  return nv.models.stackedAreaChart()\n    .margin({ bottom: 30 })\n    .focusEnable( true );\n};\n// based on http://bl.ocks.org/kerryrodden/477c1bfb081b783f80ad\nnv.models.sunburst = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var margin = {top: 0, right: 0, bottom: 0, left: 0}\n        , width = 600\n        , height = 600\n        , mode = \"count\"\n        , modes = {count: function(d) { return 1; }, value: function(d) { return d.value || d.size }, size: function(d) { return d.value || d.size }}\n        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one\n        , container = null\n        , color = nv.utils.defaultColor()\n        , showLabels = false\n        , labelFormat = function(d){if(mode === 'count'){return d.name + ' #' + d.value}else{return d.name + ' ' + (d.value || d.size)}}\n        , labelThreshold = 0.02\n        , sort = function(d1, d2){return d1.name > d2.name;}\n        , key = function(d,i){return d.name;}\n        , groupColorByParent = true\n        , duration = 500\n        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMousemove', 'elementMouseover', 'elementMouseout', 'renderEnd');\n\n    //============================================================\n    // aux functions and setup\n    //------------------------------------------------------------\n\n    var x = d3.scale.linear().range([0, 2 * Math.PI]);\n    var y = d3.scale.sqrt();\n\n    var partition = d3.layout.partition().sort(sort);\n\n    var node, availableWidth, availableHeight, radius;\n    var prevPositions = {};\n\n    var arc = d3.svg.arc()\n        .startAngle(function(d) {return Math.max(0, Math.min(2 * Math.PI, x(d.x))) })\n        .endAngle(function(d) {return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))) })\n        .innerRadius(function(d) {return Math.max(0, y(d.y)) })\n        .outerRadius(function(d) {return Math.max(0, y(d.y + d.dy)) });\n\n    function rotationToAvoidUpsideDown(d) {\n        var centerAngle = computeCenterAngle(d);\n        if(centerAngle > 90){\n            return 180;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    function computeCenterAngle(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n        var centerAngle = (((startAngle + endAngle) / 2) * (180 / Math.PI)) - 90;\n        return centerAngle;\n    }\n\n    function computeNodePercentage(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n        return (endAngle - startAngle) / (2 * Math.PI);\n    }\n\n    function labelThresholdMatched(d) {\n        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));\n        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));\n\n        var size = endAngle - startAngle;\n        return size > labelThreshold;\n    }\n\n    // When zooming: interpolate the scales.\n    function arcTweenZoom(e,i) {\n        var xd = d3.interpolate(x.domain(), [node.x, node.x + node.dx]),\n        yd = d3.interpolate(y.domain(), [node.y, 1]),\n        yr = d3.interpolate(y.range(), [node.y ? 20 : 0, radius]);\n\n        if (i === 0) {\n            return function() {return arc(e);}\n        }\n        else {\n            return function (t) {\n                x.domain(xd(t));\n                y.domain(yd(t)).range(yr(t));\n                return arc(e);\n            }\n        };\n    }\n\n    function arcTweenUpdate(d) {\n        var ipo = d3.interpolate({x: d.x0, dx: d.dx0, y: d.y0, dy: d.dy0}, d);\n\n        return function (t) {\n            var b = ipo(t);\n\n            d.x0 = b.x;\n            d.dx0 = b.dx;\n            d.y0 = b.y;\n            d.dy0 = b.dy;\n\n            return arc(b);\n        };\n    }\n\n    function updatePrevPosition(node) {\n        var k = key(node);\n        if(! prevPositions[k]) prevPositions[k] = {};\n        var pP = prevPositions[k];\n        pP.dx = node.dx;\n        pP.x = node.x;\n        pP.dy = node.dy;\n        pP.y = node.y;\n    }\n\n    function storeRetrievePrevPositions(nodes) {\n        nodes.forEach(function(n){\n            var k = key(n);\n            var pP = prevPositions[k];\n            //console.log(k,n,pP);\n            if( pP ){\n                n.dx0 = pP.dx;\n                n.x0 = pP.x;\n                n.dy0 = pP.dy;\n                n.y0 = pP.y;\n            }\n            else {\n                n.dx0 = n.dx;\n                n.x0 = n.x;\n                n.dy0 = n.dy;\n                n.y0 = n.y;\n            }\n            updatePrevPosition(n);\n        });\n    }\n\n    function zoomClick(d) {\n        var labels = container.selectAll('text')\n        var path = container.selectAll('path')\n\n        // fade out all text elements\n        labels.transition().attr(\"opacity\",0);\n\n        // to allow reference to the new center node\n        node = d;\n\n        path.transition()\n            .duration(duration)\n            .attrTween(\"d\", arcTweenZoom)\n            .each('end', function(e) {\n                // partially taken from here: http://bl.ocks.org/metmajer/5480307\n                // check if the animated element's data e lies within the visible angle span given in d\n                if(e.x >= d.x && e.x < (d.x + d.dx) ){\n                    if(e.depth >= d.depth){\n                        // get a selection of the associated text element\n                        var parentNode = d3.select(this.parentNode);\n                        var arcText = parentNode.select('text');\n\n                        // fade in the text element and recalculate positions\n                        arcText.transition().duration(duration)\n                        .text( function(e){return labelFormat(e) })\n                        .attr(\"opacity\", function(d){\n                            if(labelThresholdMatched(d)) {\n                                return 1;\n                            }\n                            else {\n                                return 0;\n                            }\n                        })\n                        .attr(\"transform\", function() {\n                            var width = this.getBBox().width;\n                            if(e.depth === 0)\n                            return \"translate(\" + (width / 2 * - 1) + \",0)\";\n                            else if(e.depth === d.depth){\n                                return \"translate(\" + (y(e.y) + 5) + \",0)\";\n                            }\n                            else {\n                                var centerAngle = computeCenterAngle(e);\n                                var rotation = rotationToAvoidUpsideDown(e);\n                                if (rotation === 0) {\n                                    return 'rotate('+ centerAngle +')translate(' + (y(e.y) + 5) + ',0)';\n                                }\n                                else {\n                                    return 'rotate('+ centerAngle +')translate(' + (y(e.y) + width + 5) + ',0)rotate(' + rotation + ')';\n                                }\n                            }\n                        });\n                    }\n                }\n            })\n    }\n\n    //============================================================\n    // chart function\n    //------------------------------------------------------------\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    function chart(selection) {\n        renderWatch.reset();\n\n        selection.each(function(data) {\n            container = d3.select(this);\n            availableWidth = nv.utils.availableWidth(width, container, margin);\n            availableHeight = nv.utils.availableHeight(height, container, margin);\n            radius = Math.min(availableWidth, availableHeight) / 2;\n\n            y.range([0, radius]);\n\n            // Setup containers and skeleton of chart\n            var wrap = container.select('g.nvd3.nv-wrap.nv-sunburst');\n            if( !wrap[0][0] ) {\n                wrap = container.append('g')\n                    .attr('class', 'nvd3 nv-wrap nv-sunburst nv-chart-' + id)\n                    .attr('transform', 'translate(' + ((availableWidth / 2) + margin.left + margin.right) + ',' + ((availableHeight / 2) + margin.top + margin.bottom) + ')');\n            } else {\n                wrap.attr('transform', 'translate(' + ((availableWidth / 2) + margin.left + margin.right) + ',' + ((availableHeight / 2) + margin.top + margin.bottom) + ')');\n            }\n\n            container.on('click', function (d, i) {\n                dispatch.chartClick({\n                    data: d,\n                    index: i,\n                    pos: d3.event,\n                    id: id\n                });\n            });\n\n            partition.value(modes[mode] || modes[\"count\"]);\n\n            //reverse the drawing order so that the labels of inner\n            //arcs are drawn on top of the outer arcs.\n            var nodes = partition.nodes(data[0]).reverse()\n\n            storeRetrievePrevPositions(nodes);\n            var cG = wrap.selectAll('.arc-container').data(nodes, key)\n\n            //handle new datapoints\n            var cGE = cG.enter()\n                .append(\"g\")\n                .attr(\"class\",'arc-container')\n\n            cGE.append(\"path\")\n                .attr(\"d\", arc)\n                .style(\"fill\", function (d) {\n                    if (d.color) {\n                        return d.color;\n                    }\n                    else if (groupColorByParent) {\n                        return color((d.children ? d : d.parent).name);\n                    }\n                    else {\n                        return color(d.name);\n                    }\n                })\n                .style(\"stroke\", \"#FFF\")\n                .on(\"click\", function(d,i){\n                    zoomClick(d);\n                    dispatch.elementClick({\n                        data: d,\n                        index: i\n                    })\n                })\n                .on('mouseover', function(d,i){\n                    d3.select(this).classed('hover', true).style('opacity', 0.8);\n                    dispatch.elementMouseover({\n                        data: d,\n                        color: d3.select(this).style(\"fill\"),\n                        percent: computeNodePercentage(d)\n                    });\n                })\n                .on('mouseout', function(d,i){\n                    d3.select(this).classed('hover', false).style('opacity', 1);\n                    dispatch.elementMouseout({\n                        data: d\n                    });\n                })\n                .on('mousemove', function(d,i){\n                    dispatch.elementMousemove({\n                        data: d\n                    });\n                });\n\n            ///Iterating via each and selecting based on the this\n            ///makes it work ... a cG.selectAll('path') doesn't.\n            ///Without iteration the data (in the element) didn't update.\n            cG.each(function(d){\n                d3.select(this).select('path')\n                    .transition()\n                    .duration(duration)\n                    .attrTween('d', arcTweenUpdate);\n            });\n\n            if(showLabels){\n                //remove labels first and add them back\n                cG.selectAll('text').remove();\n\n                //this way labels are on top of newly added arcs\n                cG.append('text')\n                    .text( function(e){ return labelFormat(e)})\n                    .transition()\n                    .duration(duration)\n                    .attr(\"opacity\", function(d){\n                        if(labelThresholdMatched(d)) {\n                            return 1;\n                        }\n                        else {\n                            return 0;\n                        }\n                    })\n                    .attr(\"transform\", function(d) {\n                        var width = this.getBBox().width;\n                        if(d.depth === 0){\n                            return \"rotate(0)translate(\" + (width / 2 * -1) + \",0)\";\n                        }\n                        else {\n                            var centerAngle = computeCenterAngle(d);\n                            var rotation = rotationToAvoidUpsideDown(d);\n                            if (rotation === 0) {\n                                return 'rotate('+ centerAngle +')translate(' + (y(d.y) + 5) + ',0)';\n                            }\n                            else {\n                                return 'rotate('+ centerAngle +')translate(' + (y(d.y) + width + 5) + ',0)rotate(' + rotation + ')';\n                            }\n                        }\n                    });\n            }\n\n            //zoom out to the center when the data is updated.\n            zoomClick(nodes[nodes.length - 1])\n\n\n            //remove unmatched elements ...\n            cG.exit()\n                .transition()\n                .duration(duration)\n                .attr('opacity',0)\n                .each('end',function(d){\n                    var k = key(d);\n                    prevPositions[k] = undefined;\n                })\n                .remove();\n        });\n\n\n        renderWatch.renderEnd('sunburst immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    chart.dispatch = dispatch;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        width:      {get: function(){return width;}, set: function(_){width=_;}},\n        height:     {get: function(){return height;}, set: function(_){height=_;}},\n        mode:       {get: function(){return mode;}, set: function(_){mode=_;}},\n        id:         {get: function(){return id;}, set: function(_){id=_;}},\n        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},\n        groupColorByParent: {get: function(){return groupColorByParent;}, set: function(_){groupColorByParent=!!_;}},\n        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=!!_}},\n        labelFormat: {get: function(){return labelFormat;}, set: function(_){labelFormat=_}},\n        labelThreshold: {get: function(){return labelThreshold;}, set: function(_){labelThreshold=_}},\n        sort: {get: function(){return sort;}, set: function(_){sort=_}},\n        key: {get: function(){return key;}, set: function(_){key=_}},\n        // options that require extra logic in the setter\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    != undefined ? _.top    : margin.top;\n            margin.right  = _.right  != undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   != undefined ? _.left   : margin.left;\n        }},\n        color: {get: function(){return color;}, set: function(_){\n            color=nv.utils.getColor(_);\n        }}\n    });\n\n    nv.utils.initOptions(chart);\n    return chart;\n};\nnv.models.sunburstChart = function() {\n    \"use strict\";\n\n    //============================================================\n    // Public Variables with Default Settings\n    //------------------------------------------------------------\n\n    var sunburst = nv.models.sunburst();\n    var tooltip = nv.models.tooltip();\n\n    var margin = {top: 30, right: 20, bottom: 20, left: 20}\n        , width = null\n        , height = null\n        , color = nv.utils.defaultColor()\n        , showTooltipPercent = false\n        , id = Math.round(Math.random() * 100000)\n        , defaultState = null\n        , noData = null\n        , duration = 250\n        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd');\n\n\n    //============================================================\n    // Private Variables\n    //------------------------------------------------------------\n\n    var renderWatch = nv.utils.renderWatch(dispatch);\n\n    tooltip\n        .duration(0)\n        .headerEnabled(false)\n        .valueFormatter(function(d){return d;});\n\n    //============================================================\n    // Chart function\n    //------------------------------------------------------------\n\n    function chart(selection) {\n        renderWatch.reset();\n        renderWatch.models(sunburst);\n\n        selection.each(function(data) {\n            var container = d3.select(this);\n\n            nv.utils.initSVG(container);\n\n            var availableWidth = nv.utils.availableWidth(width, container, margin);\n            var availableHeight = nv.utils.availableHeight(height, container, margin);\n\n            chart.update = function() {\n                if (duration === 0) {\n                    container.call(chart);\n                } else {\n                    container.transition().duration(duration).call(chart);\n                }\n            };\n            chart.container = container;\n\n            // Display No Data message if there's nothing to show.\n            if (!data || !data.length) {\n                nv.utils.noData(chart, container);\n                return chart;\n            } else {\n                container.selectAll('.nv-noData').remove();\n            }\n\n            sunburst.width(availableWidth).height(availableHeight).margin(margin);\n            container.call(sunburst);\n        });\n\n        renderWatch.renderEnd('sunburstChart immediate');\n        return chart;\n    }\n\n    //============================================================\n    // Event Handling/Dispatching (out of chart's scope)\n    //------------------------------------------------------------\n\n    sunburst.dispatch.on('elementMouseover.tooltip', function(evt) {\n        evt.series = {\n            key: evt.data.name,\n            value: (evt.data.value || evt.data.size),\n            color: evt.color,\n            percent: evt.percent\n        };\n        if (!showTooltipPercent) {\n            delete evt.percent;\n            delete evt.series.percent;\n        }\n        tooltip.data(evt).hidden(false);\n    });\n\n    sunburst.dispatch.on('elementMouseout.tooltip', function(evt) {\n        tooltip.hidden(true);\n    });\n\n    sunburst.dispatch.on('elementMousemove.tooltip', function(evt) {\n        tooltip();\n    });\n\n    //============================================================\n    // Expose Public Variables\n    //------------------------------------------------------------\n\n    // expose chart's sub-components\n    chart.dispatch = dispatch;\n    chart.sunburst = sunburst;\n    chart.tooltip = tooltip;\n    chart.options = nv.utils.optionsFunc.bind(chart);\n\n    // use Object get/set functionality to map between vars and chart functions\n    chart._options = Object.create({}, {\n        // simple options, just get/set the necessary values\n        noData:             {get: function(){return noData;},               set: function(_){noData=_;}},\n        defaultState:       {get: function(){return defaultState;},         set: function(_){defaultState=_;}},\n        showTooltipPercent: {get: function(){return showTooltipPercent;},   set: function(_){showTooltipPercent=_;}},\n\n        // options that require extra logic in the setter\n        color: {get: function(){return color;}, set: function(_){\n            color = _;\n            sunburst.color(color);\n        }},\n        duration: {get: function(){return duration;}, set: function(_){\n            duration = _;\n            renderWatch.reset(duration);\n            sunburst.duration(duration);\n        }},\n        margin: {get: function(){return margin;}, set: function(_){\n            margin.top    = _.top    !== undefined ? _.top    : margin.top;\n            margin.right  = _.right  !== undefined ? _.right  : margin.right;\n            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;\n            margin.left   = _.left   !== undefined ? _.left   : margin.left;\n            sunburst.margin(margin);\n        }}\n    });\n    nv.utils.inheritOptions(chart, sunburst);\n    nv.utils.initOptions(chart);\n    return chart;\n\n};\n\nnv.version = \"1.8.5\";\n})();\n//# sourceMappingURL=nv.d3.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/nvd3/build/nv.d3.js\n// module id = 2\n// module chunks = 0","module.exports = d3;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"d3\"\n// module id = 3\n// module chunks = 0","import nv from 'nvd3'\nimport BaseChartMixin from './BaseChartMixin'\n\nexport default {\n  name: 'BarChart',\n  mixins: [BaseChartMixin],\n  props: {\n    textField: {type: String, default: 'label'},\n    valueField: {type: String, default: 'value'},\n    staggerLabels: {type: Boolean, default: true},\n    tooltips: {type: Boolean, default: false},\n    showValues: {type: Boolean, default: true},\n    colors: {type: Array, default: () => ['#82DFD6', '#ddd']}\n  },\n  mounted () {\n    const textField = this.textField\n    const valField = this.valueField\n\n    nv.addGraph(() => {\n\n      const chart = nv.models.discreteBarChart()\n        .x(d => d[textField])\n        .y(d => d[valField])\n        //.colors(this.colors)\n        .staggerLabels(this.staggerLabels)    //Too many bars and not enough room? Try staggering labels.\n        //.tooltips(this.tooltips)        //Don't show tooltips\n        .showValues(this.showValues)       //...instead, show the bar value right on top of each bar.\n        //.transitionDuration(350)\n\n      this.redraw(chart)\n      this.chartRef = chart\n\n      nv.utils.windowResize(chart.update);\n      return chart\n    })\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/BarChart.js","import d3 from 'd3'\nimport nv from 'nvd3'\nimport BaseChartMixin from './BaseChartMixin'\n\nexport default {\n  name: 'BubbleChart',\n  mixins: [BaseChartMixin],\n  props: {\n    xFormat: {type: [Function, String]},\n    yFormat: {type: [Function, String]},\n    showDistX: {type: Boolean, default: true},\n    showDistY: {type: Boolean, default: true},\n    colors: {type: Array, default: () => ['#82DFD6', '#ddd']}\n  },\n  mounted () {\n    nv.addGraph(() => {\n      const chart = nv.models.scatterChart()\n        .showDistX(true)    //showDist, when true, will display those little distribution lines on the axis.\n        .showDistY(true)\n        .height(this.height)\n        //.transitionDuration(350)\n        .color(d3.scale.category10().range())\n\n      //Configure how the tooltip looks.\n      //chart.tooltipContent(key => '<h3>' + key + '</h3>')\n\n      //Axis settings\n      if (this.xFormat) {\n        if (typeof(this.xFormat) === 'string') {\n          chart.xAxis.tickFormat(d3.format(this.xFormat))\n        } else {\n          chart.xAxis.tickFormat(this.xFormat)\n        }\n      }\n\n      if (this.yFormat) {\n        if (typeof(this.yFormat) === 'string') {\n          chart.yAxis.tickFormat(d3.format(this.yFormat))\n        } else {\n          chart.yAxis.tickFormat(this.yFormat)\n        }\n      }\n\n      //We want to show shapes other than circles.\n      //chart.scatter.onlyCircles(false)\n\n      this.redraw(chart)\n      this.chartRef = chart\n\n      nv.utils.windowResize(chart.update);\n      return chart\n    })\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/BubbleChart.js","import d3 from 'd3'\nimport nv from 'nvd3'\nimport BaseChartMixin from './BaseChartMixin'\n\n/**\n * 垂直多列分组柱状图\n */\nexport default {\n  name: 'HBarChart',\n  mixins: [BaseChartMixin],\n  props: {\n    textField: {type: String, default: 'label'},\n    valueField: {type: String, default: 'value'},\n    yFormat: {type: [Function, String]},\n    height: {type: Number, default: 350},\n    showControls: {type: Boolean, default: true},\n    colors: {type: Array, default: () => ['#82DFD6', '#ddd']}\n  },\n  mounted () {\n    nv.addGraph(() => {\n      const textField = this.textField\n      const valField = this.valueField\n      const chart = nv.models.multiBarHorizontalChart()\n        .x(function (d) {\n          return d[textField]\n        })\n        .y(function (d) {\n          return d[valField]\n        })\n        .controlLabels({\n          'grouped': '分组',\n          'stacked': '堆叠'\n        })\n        .color(this.colors)\n        .showValues(true)           //Show bar value next to each bar.\n      //.tooltips(true)             //Show tooltips on hover.\n      //.transitionDuration(350)\n      //.showControls(true)       //Allow user to switch between \"Grouped\" and \"Stacked\" mode.\n\n      if (this.height) {\n        chart.height(this.height)\n      }\n\n      if (this.yFormat) {\n        if (typeof(this.yFormat) === 'string') {\n          chart.yAxis.tickFormat(d3.format(this.yFormat))\n        } else {\n          chart.yAxis.tickFormat(this.yFormat)\n        }\n      }\n\n      this.redraw(chart)\n      this.chartRef = chart\n      nv.utils.windowResize(chart.update);\n      return chart\n    })\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/HBarChart.js","import d3 from 'd3'\nimport nv from 'nvd3'\nimport BaseChartMixin from './BaseChartMixin'\n\nexport default {\n  name: 'LineBarChart',\n  mixins: [BaseChartMixin],\n  props: {\n    xFormat: {type: [Function, String]},\n    x2Format: {type: [Function, String]},\n    y1Format: {type: [Function, String]},\n    y2Format: {type: [Function, String]},\n    colors: {type: Array, default: () => ['#82DFD6', '#ddd']}\n  },\n  mounted () {\n    nv.addGraph(() => {\n      const chart = nv.models.linePlusBarChart()\n        .margin({left: 80, bottom: 50, right: 80, top: 30})\n        .color(this.colors)\n\n      if (this.xFormat) {\n        if (typeof(this.xFormat) === 'string') {\n          chart.xAxis.tickFormat(d3.format(this.xFormat))\n        } else {\n          chart.xAxis.tickFormat(this.xFormat)\n        }\n      }\n\n      if (this.x2Format) {\n        if (typeof(this.x2Format) === 'string') {\n          chart.x2Axis.tickFormat(d3.format(this.x2Format))\n        } else {\n          chart.x2Axis.tickFormat(this.x2Format)\n        }\n      }\n\n      if (this.y1Format) {\n        if (typeof(this.y1Format) === 'string') {\n          chart.y1Axis.tickFormat(d3.format(this.y1Format))\n        } else {\n          chart.y1Axis.tickFormat(this.y1Format)\n        }\n      }\n\n      if (this.y2Format) {\n        if (typeof(this.y2Format) === 'string') {\n          chart.y2Axis.tickFormat(d3.format(this.y2Format))\n        } else {\n          chart.y2Axis.tickFormat(this.y2Format)\n        }\n      }\n\n      chart.bars.forceY([0])\n\n      d3.select(this.$refs.chart)\n        .style('height', this.height)\n        .datum(this.model)\n        .transition()\n        .duration(500)\n        .call(chart)\n\n      nv.utils.windowResize(chart.update);\n      return chart\n    })\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/LineBarChart.js","import d3 from 'd3'\nimport nv from 'nvd3'\nimport BaseChartMixin from './BaseChartMixin'\n\nexport default {\n  name: 'LineChart',\n  mixins: [BaseChartMixin],\n  props: {\n    xFormat: {type: [Function, String]},\n    yFormat: {type: [Function, String]},\n    colors: {type: Array, default: () => ['#82DFD6', '#ddd']}\n  },\n  mounted () {\n    nv.addGraph(() => {\n      const chart = nv.models.lineChart()\n        .useInteractiveGuideline(true)\n        .margin({left: 50, bottom: 30, right: 0})\n        .color(this.colors)\n\n      const xaxis = chart.xAxis.showMaxMin(false)\n\n      if (this.xFormat) {\n        if (typeof(this.xFormat) === 'string') {\n          xaxis.tickFormat(d3.format(this.xFormat))\n        } else {\n          xaxis.tickFormat(this.xFormat)\n        }\n      }\n\n      const yaxis = chart.yAxis.showMaxMin(false)\n      if (this.yFormat) {\n        if (typeof(this.yFormat) === 'string') {\n          yaxis.tickFormat(d3.format(this.yFormat))\n        } else {\n          yaxis.tickFormat(this.yFormat)\n        }\n      }\n\n      this.redraw(chart)\n      this.chartRef = chart\n      nv.utils.windowResize(chart.update);\n      return chart\n    })\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/LineChart.js","import d3 from 'd3'\nimport nv from 'nvd3'\nimport BaseChartMixin from './BaseChartMixin'\n\nexport default {\n  name: 'PieChart',\n  mixins: [BaseChartMixin],\n  props: {\n    showLabels: {type: Boolean, default: true},\n    margin: {top: 30, right: 20, bottom: 20, left: 20},\n    width: {type: Number, default: null},\n    height: {type: Number, default: null},\n    showTooltipPercent: {type: Boolean, default: false},\n    showLegend: {type: Boolean, default: true},\n    legendPosition: {type: String, default: 'top'},\n    labelThreshold: {type: Number, default: 0.05},\n    labelType: {type: String, default: 'percent'},\n    donut: {type: Boolean, default: false},\n    donutRatio: {type: Number, default: 0.35},\n    textField: {type: String, default: 'label'},\n    valueField: {type: String, default: 'value'},\n    colors: {type: Array, default: () => ['#82DFD6', '#ddd']}\n  },\n  mounted () {\n    const textField = this.textField\n    const valField = this.valueField\n\n    nv.addGraph(() => {\n      const chart = nv.models.pieChart()\n        .x(d => d[textField])\n        .y(d => d[valField])\n        .showLabels(this.showLabels)\n        .legendPosition(this.legendPosition)\n        .labelThreshold(this.labelThreshold)\n        .donut(this.donut)\n        .donutRatio(this.donutRatio)\n        .showTooltipPercent(this.showTooltipPercent)\n        .showLegend(this.showLegend)\n\n      if (this.width) {\n        chart.width(this.width)\n      }\n\n      if (this.height) {\n        chart.height(this.height)\n      }\n\n      this.redraw(chart)\n      this.chartRef = chart\n\n      nv.utils.windowResize(chart.update);\n      return chart\n    })\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/PieChart.js","import d3 from 'd3'\nimport nv from 'nvd3'\n\nimport BaseChartMixin from './BaseChartMixin'\n\nexport default {\n  name: 'StackedAreaChart',\n  mixins: [BaseChartMixin],\n  props: {\n    xFormat: {type: [Function, String]},\n    yFormat: {type: [Function, String]},\n    rightAlignYAxis: {type: Boolean, default: true},\n    showControls: {type: Boolean, default: true},\n    clipEdge: {type: Boolean, default: true},\n    colors: {type: Array, default: () => ['#82DFD6', '#ddd']}\n  },\n  mounted () {\n    nv.addGraph(() => {\n      const chart = nv.models.stackedAreaChart()\n        .margin({right: 100})\n        .useInteractiveGuideline(true)    //Tooltips which show all data points. Very nice!\n        .rightAlignYAxis(this.rightAlignYAxis)      //Let's move the y-axis to the right side.\n        // .transitionDuration(500)\n        .showControls(this.showControls)       //Allow user to choose 'Stacked', 'Stream', 'Expanded' mode.\n        .clipEdge(this.clipEdge)\n        .controlLabels({\n          'stacked':'堆叠',\n          'stream':'流',\n          'expanded':'扩展'\n        })\n\n      //Axis settings\n      if (this.xFormat) {\n        if (typeof(this.xFormat) === 'string') {\n          chart.xAxis.tickFormat(d3.format(this.xFormat))\n        } else {\n          chart.xAxis.tickFormat(this.xFormat)\n        }\n      }\n      if (this.yFormat) {\n        if (typeof(this.yFormat) === 'string') {\n          chart.yAxis.tickFormat(d3.format(this.yFormat))\n        } else {\n          chart.yAxis.tickFormat(this.yFormat)\n        }\n      }\n\n      //We want to show shapes other than circles.\n      // chart.scatter.onlyCircles(false)\n\n      this.redraw(chart)\n      this.chartRef = chart\n\n      nv.utils.windowResize(chart.update);\n      return chart\n    })\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/StackedAreaChart.js"],"sourceRoot":""}