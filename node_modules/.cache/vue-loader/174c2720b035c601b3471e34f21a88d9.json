{"remainingRequest":"D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\vue-project\\template_vuejs\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vue-project\\template_vuejs\\src\\pages\\UI-language-bar-icon.vue?vue&type=template&id=0cac8e5a&","dependencies":[{"path":"D:\\vue-project\\template_vuejs\\src\\pages\\UI-language-bar-icon.vue","mtime":1564468428000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    [
      _vm._m(0),
      _vm._m(1),
      _c("panel", { attrs: { title: "Language Icon List" } }, [
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ad width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ad", id: "ad" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("AD")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ae width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ae", id: "ae" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("AE")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-af width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "af", id: "af" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("AF")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ag width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ag", id: "ag" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("AG")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ai width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ai", id: "ai" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("AU")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-al width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "al", id: "al" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("AL")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-am width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "am", id: "am" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("AM")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ao width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ao", id: "ao" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("AO")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-aq width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "aq", id: "aq" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("AQ")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ar width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ar", id: "ar" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("AR")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-as width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "as", id: "as" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("AS")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-at width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "at", id: "at" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("AT")])
            ]
          )
        ]),
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-au width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "au", id: "au" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("AU")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-aw width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "aw", id: "aw" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("AW")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ax width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ax", id: "ax" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("AX")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-az width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "az", id: "az" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("AZ")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ba width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ba", id: "ba" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("BA")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-bb width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "bb", id: "bb" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("BB")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-bd width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "bd", id: "bd" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("BD")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-be width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "be", id: "be" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("BE")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-bf width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "bf", id: "bf" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("BF")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-bg width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "bg", id: "bg" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("BG")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-bh width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "bh", id: "bh" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("BH")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-bi width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "bi", id: "bi" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("BI")])
            ]
          )
        ]),
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-bj width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "bj", id: "bj" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("BJ")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-bl width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "bl", id: "bl" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("BL")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-bm width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "bm", id: "bm" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("BM")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-bn width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "bn", id: "bn" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("BN")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-bo width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "bo", id: "bo" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("BO")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-bq width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "bq", id: "bq" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("BQ")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-br width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "br", id: "br" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("BR")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-bs width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "bs", id: "bs" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("BS")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-bt width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "bt", id: "bt" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("BT")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-bv width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "bv", id: "bv" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("BV")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-bw width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "bw", id: "bw" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("BW")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-by width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "by", id: "by" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("BY")])
            ]
          )
        ]),
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-bz width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "bz", id: "bz" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("BZ")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ca width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ca", id: "ca" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("CA")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-cc width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "cc", id: "cc" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("CC")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-cd width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "cd", id: "cd" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("CD")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-cf width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "cf", id: "cf" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("CF")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-cg width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "cg", id: "cg" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("CG")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ch width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ch", id: "ch" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("CH")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ci width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ci", id: "ci" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("CI")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ck width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ck", id: "ck" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("CK")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-cl width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "cl", id: "cl" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("CL")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-cm width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "cm", id: "cm" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("CM")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-cn width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "cn", id: "cn" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("CN")])
            ]
          )
        ]),
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-co width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "co", id: "co" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("CO")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-cr width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "cr", id: "cr" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("CR")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-cu width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "cu", id: "cu" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("CU")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-cv width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "cv", id: "cv" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("CV")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-cw width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "cw", id: "cw" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("CW")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-cx width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "cx", id: "cx" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("CX")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-cy width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "cy", id: "cy" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("CY")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-cz width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "cz", id: "cz" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("CZ")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-de width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "de", id: "de" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("DE")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-dj width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "dj", id: "dj" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("DJ")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-dk width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "dk", id: "dk" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("DK")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-dm width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "dm", id: "dm" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("DM")])
            ]
          )
        ]),
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-do width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "do", id: "do" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("DO")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-dz width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "dz", id: "dz" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("DZ")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ec width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ec", id: "ec" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("EC")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ee width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ee", id: "ee" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("EE")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-eg width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "eg", id: "eg" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("EG")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-eh width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "eh", id: "eh" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("EH")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-er width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "er", id: "er" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("ER")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-es width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "es", id: "es" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("ES")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-et width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "et", id: "et" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("ET")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-fi width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "fi", id: "fi" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("FI")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-fj width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "fj", id: "fj" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("FJ")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-fk width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "fk", id: "fk" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("FK")])
            ]
          )
        ]),
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-fm width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "fm", id: "fm" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("FM")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-fo width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "fo", id: "fo" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("FO")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-fr width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "fr", id: "fr" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("FR")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ga width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ga", id: "ga" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("GA")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-gb width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "gb", id: "gb" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("GB")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-gd width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "gd", id: "gd" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("GD")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ge width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ge", id: "ge" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("GE")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-gf width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "gf", id: "gf" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("GF")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-gg width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "gg", id: "gg" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("GG")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-gh width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "gh", id: "gh" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("GH")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-gi width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "gi", id: "gi" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("GI")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-gl width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "gl", id: "gl" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("GL")])
            ]
          )
        ]),
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-gm width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "gm", id: "gm" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("GM")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-gn width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "gn", id: "gn" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("GN")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-gp width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "gp", id: "gp" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("GP")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-gq width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "gq", id: "gq" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("GQ")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-gr width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "gr", id: "gr" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("GR")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-gs width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "gs", id: "gs" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("GS")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-gt width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "gt", id: "gt" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("GT")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-gu width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "gu", id: "gu" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("GU")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-gw width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "gw", id: "gw" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("GW")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-gy width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "gy", id: "gy" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("GY")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-hk width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "hk", id: "hk" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("HK")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-hm width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "hm", id: "hm" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("HM")])
            ]
          )
        ]),
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-hn width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "hn", id: "hn" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("HN")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-hr width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "hr", id: "hr" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("HR")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ht width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ht", id: "ht" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("HT")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-hu width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "hu", id: "hu" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("HU")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-id width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "id", id: "id" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("ID")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ie width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ie", id: "ie" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("IE")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-il width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "il", id: "il" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("IL")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-im width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "im", id: "im" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("IM")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-in width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "in", id: "in" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("IN")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-io width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "io", id: "io" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("IO")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-iq width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "iq", id: "iq" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("IQ")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ir width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ir", id: "ir" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("IR")])
            ]
          )
        ]),
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-is width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "is", id: "is" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("IS")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-it width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "it", id: "it" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("IT")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-je width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "je", id: "je" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("JE")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-jm width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "jm", id: "jm" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("JM")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-jo width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "jo", id: "jo" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("JO")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-jp width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "jp", id: "jp" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("JP")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ke width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ke", id: "ke" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("KE")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-kg width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "kg", id: "kg" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("KG")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-kh width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "kh", id: "kh" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("KH")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ki width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ki", id: "ki" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("KI")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-km width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "km", id: "km" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("KM")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-kn width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "kn", id: "kn" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("KN")])
            ]
          )
        ]),
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-kp width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "kp", id: "kp" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("KP")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-kr width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "kr", id: "kr" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("KR")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-kw width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "kw", id: "kw" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("KW")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ky width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ky", id: "ky" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("KY")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-kz width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "kz", id: "kz" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("KZ")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-la width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "la", id: "la" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("LA")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-lb width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "lb", id: "lb" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("LB")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-lc width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "lc", id: "lc" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("LC")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-li width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "li", id: "li" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("LI")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-lk width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "lk", id: "lk" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("LK")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-lr width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "lr", id: "lr" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("LR")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ls width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ls", id: "ls" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("LS")])
            ]
          )
        ]),
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-lt width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "lt", id: "lt" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("LT")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-lu width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "lu", id: "lu" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("LU")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-lv width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "lv", id: "lv" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("LV")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ly width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ly", id: "ly" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("LY")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ma width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ma", id: "ma" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("MA")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-mc width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "mc", id: "mc" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("MC")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-md width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "md", id: "md" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("MD")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-me width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "me", id: "me" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("ME")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-mf width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "mf", id: "mf" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("MF")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-mg width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "mg", id: "mg" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("MG")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-mh width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "mh", id: "mh" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("MH")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-mk width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "mk", id: "mk" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("MK")])
            ]
          )
        ]),
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ml width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ml", id: "ml" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("ML")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-mm width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "mm", id: "mm" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("MM")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-mn width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "mn", id: "mn" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("MN")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-mo width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "mo", id: "mo" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("MO")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-mp width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "mp", id: "mp" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("MP")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-mq width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "mq", id: "mq" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("MQ")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-mr width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "mr", id: "mr" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("MR")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ms width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ms", id: "ms" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("MS")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-mt width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "mt", id: "mt" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("MT")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-mu width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "mu", id: "mu" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("MU")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-mv width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "mv", id: "mv" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("MV")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-mw width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "mw", id: "mw" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("MW")])
            ]
          )
        ]),
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-mx width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "mx", id: "mx" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("MX")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-my width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "my", id: "my" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("MY")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-mz width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "mz", id: "mz" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("MZ")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-na width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "na", id: "na" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("NA")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-nc width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "nc", id: "nc" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("NC")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ne width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ne", id: "ne" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("NE")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-nf width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "nf", id: "nf" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("NF")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ng width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ng", id: "ng" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("NG")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ni width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ni", id: "ni" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("NI")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-nl width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "nl", id: "nl" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("NL")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-no width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "no", id: "no" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("NO")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-np width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "np", id: "np" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("NP")])
            ]
          )
        ]),
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-nr width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "nr", id: "nr" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("NR")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-nu width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "nu", id: "nu" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("NU")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-nz width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "nz", id: "nz" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("NZ")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-om width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "om", id: "om" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("OM")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-pa width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "pa", id: "pa" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("PA")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-pe width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "pe", id: "pe" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("PE")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-pf width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "pf", id: "pf" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("PF")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-pg width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "pg", id: "pg" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("PG")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ph width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ph", id: "ph" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("PH")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-pk width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "pk", id: "pk" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("PK")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-pl width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "pl", id: "pl" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("PL")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-pm width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "pm", id: "pm" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("PM")])
            ]
          )
        ]),
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-pn width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "pn", id: "pn" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("PN")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-pr width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "pr", id: "pr" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("PR")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ps width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ps", id: "ps" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("PS")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-pt width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "pt", id: "pt" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("PT")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-pw width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "pw", id: "pw" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("PW")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-py width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "py", id: "py" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("PY")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-qa width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "qa", id: "qa" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("QA")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-re width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "re", id: "re" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("RE")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ro width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ro", id: "ro" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("RO")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-rs width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "rs", id: "rs" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("RS")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ru width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ru", id: "ru" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("RU")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-rw width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "rw", id: "rw" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("RW")])
            ]
          )
        ]),
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-sa width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "sa", id: "sa" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("SA")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-sb width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "sb", id: "sb" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("SB")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-sc width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "sc", id: "sc" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("SC")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-sd width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "sd", id: "sd" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("SD")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-se width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "se", id: "se" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("SE")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-sg width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "sg", id: "sg" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("SG")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-sh width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "sh", id: "sh" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("SH")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-si width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "si", id: "si" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("SI")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-sj width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "sj", id: "sj" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("SJ")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-sk width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "sk", id: "sk" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("SK")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-sl width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "sl", id: "sl" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("SL")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-sm width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "sm", id: "sm" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("SM")])
            ]
          )
        ]),
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-sn width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "sn", id: "sn" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("SN")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-so width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "so", id: "so" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("SO")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-sr width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "sr", id: "sr" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("SR")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ss width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ss", id: "ss" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("SS")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-st width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "st", id: "st" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("ST")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-sv width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "sv", id: "sv" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("SV")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-sx width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "sx", id: "sx" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("SX")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-sy width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "sy", id: "sy" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("SY")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-sz width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "sz", id: "sz" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("SZ")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-tc width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "tc", id: "tc" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("TC")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-td width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "td", id: "td" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("TD")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-tf width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "tf", id: "tf" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("TF")])
            ]
          )
        ]),
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-tg width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "tg", id: "tg" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("TG")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-th width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "th", id: "th" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("TH")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-tj width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "tj", id: "tj" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("TJ")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-tk width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "tk", id: "tk" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("TK")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-tl width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "tl", id: "tl" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("TL")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-tm width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "tm", id: "tm" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("TM")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-tn width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "tn", id: "tn" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("TN")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-to width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "to", id: "to" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("TO")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-tr width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "tr", id: "tr" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("TR")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-tt width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "tt", id: "tt" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("TT")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-tv width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "tv", id: "tv" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("TV")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-tw width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "tw", id: "tw" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("TW")])
            ]
          )
        ]),
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-tz width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "tz", id: "tz" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("TZ")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ua width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ua", id: "ua" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("UA")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ug width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ug", id: "ug" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("UG")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-um width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "um", id: "um" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("UM")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-us width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "us", id: "us" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("US")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-uy width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "uy", id: "uy" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("UY")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-uz width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "uz", id: "uz" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("UZ")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-va width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "va", id: "va" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("VA")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-vc width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "vc", id: "vc" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("VC")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ve width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ve", id: "ve" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("VE")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-vg width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "vg", id: "vg" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("VG")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-vi width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "vi", id: "vi" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("VI")])
            ]
          )
        ]),
        _c("div", { staticClass: "row" }, [
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-vn width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "vn", id: "vn" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("VN")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-vu width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "vu", id: "vu" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("VU")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-wf width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "wf", id: "wf" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("WF")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ws width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ws", id: "ws" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("WS")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-ye width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "ye", id: "ye" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("YE")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-yt width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "yt", id: "yt" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("YT")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-za width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "za", id: "za" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("ZA")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-zm width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "zm", id: "zm" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("ZM")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-1 col-sm-2 col-3 m-b-10 text-center" },
            [
              _c("h2", {
                staticClass:
                  "flag-icon flag-icon-zw width-full m-r-10 m-t-0 m-b-3",
                attrs: { title: "zw", id: "zw" }
              }),
              _vm._v(" "),
              _c("b", { staticClass: "text-inverse" }, [_vm._v("ZW")])
            ]
          )
        ])
      ])
    ],
    1
  )
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ol", { staticClass: "breadcrumb float-xl-right" }, [
      _c("li", { staticClass: "breadcrumb-item" }, [
        _c("a", { attrs: { href: "javascript:;" } }, [_vm._v("Home")])
      ]),
      _c("li", { staticClass: "breadcrumb-item" }, [
        _c("a", { attrs: { href: "javascript:;" } }, [_vm._v("UI Elements")])
      ]),
      _c("li", { staticClass: "breadcrumb-item active" }, [
        _vm._v("UI Language Bar & Icon")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("h1", { staticClass: "page-header" }, [
      _vm._v("UI Language Bar & Icon "),
      _c("small", [_vm._v("header small text goes here...")])
    ])
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}