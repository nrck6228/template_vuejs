{"remainingRequest":"D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\vue-project\\template_vuejs\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vue-project\\template_vuejs\\src\\pages\\UI-icons.vue?vue&type=template&id=1d6a3ea5&","dependencies":[{"path":"D:\\vue-project\\template_vuejs\\src\\pages\\UI-icons.vue","mtime":1564466982000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", [
    _vm._m(0),
    _vm._m(1),
    _c("div", { staticClass: "row" }, [
      _c(
        "div",
        { staticClass: "col-xl-6" },
        [
          _c("panel", { attrs: { title: "Icon Sizes" } }, [
            _c("div", { staticClass: "text-inverse" }, [
              _c("i", { staticClass: "fas fa-camera-retro fa-xs" }),
              _vm._v(" "),
              _c("i", { staticClass: "fas fa-camera-retro fa-sm" }),
              _vm._v(" "),
              _c("i", { staticClass: "fas fa-camera-retro fa-lg" }),
              _vm._v(" "),
              _c("i", { staticClass: "fas fa-camera-retro fa-2x" }),
              _vm._v(" "),
              _c("i", { staticClass: "fas fa-camera-retro fa-3x" }),
              _vm._v(" "),
              _c("i", { staticClass: "fas fa-camera-retro fa-5x" }),
              _vm._v(" "),
              _c("i", { staticClass: "fas fa-camera-retro fa-7x" }),
              _vm._v(" "),
              _c("i", { staticClass: "fas fa-camera-retro fa-10x" })
            ]),
            _c(
              "div",
              {
                directives: [{ name: "highlight", rawName: "v-highlight" }],
                staticClass: "hljs-wrapper",
                attrs: { slot: "outsideBody" },
                slot: "outsideBody"
              },
              [
                _c("pre", [
                  _c("code", { staticClass: "html" }, [
                    _vm._v(
                      '<i class="fas fa-camera-retro fa-xs"></i>\n<i class="fas fa-camera-retro fa-sm"></i>\n<i class="fas fa-camera-retro fa-lg"></i>\n<i class="fas fa-camera-retro fa-2x"></i>\n<i class="fas fa-camera-retro fa-3x"></i>\n<i class="fas fa-camera-retro fa-5x"></i>\n<i class="fas fa-camera-retro fa-7x"></i>\n<i class="fas fa-camera-retro fa-10x"></i>'
                    )
                  ])
                ])
              ]
            )
          ]),
          _c("panel", { attrs: { title: "Fixed Width Icons" } }, [
            _c("div", { staticClass: "f-s-14" }, [
              _c("i", { staticClass: "fas fa-home fa-fw" }),
              _vm._v(" Home"),
              _c("br"),
              _c("i", { staticClass: "fas fa-info fa-fw" }),
              _vm._v(" Info"),
              _c("br"),
              _c("i", { staticClass: "fas fa-book fa-fw" }),
              _vm._v(" Library"),
              _c("br"),
              _c("i", { staticClass: "fas fa-pencil-alt fa-fw" }),
              _vm._v(" Applications"),
              _c("br"),
              _c("i", { staticClass: "fas fa-cog fa-fw" }),
              _vm._v(" Settings ")
            ]),
            _c(
              "div",
              {
                directives: [{ name: "highlight", rawName: "v-highlight" }],
                staticClass: "hljs-wrapper",
                attrs: { slot: "outsideBody" },
                slot: "outsideBody"
              },
              [
                _c("pre", [
                  _c("code", { staticClass: "html" }, [
                    _vm._v(
                      '<i class="fas fa-home fa-fw"></i> Home\n<i class="fas fa-info fa-fw"></i> Info\n<i class="fas fa-book fa-fw"></i> Library\n<i class="fas fa-pencil-alt fa-fw"></i> Applications\n<i class="fas fa-cog fa-fw"></i> Settings'
                    )
                  ])
                ])
              ]
            )
          ]),
          _c("panel", { attrs: { title: "Animated Icons" } }, [
            _c("div", { staticClass: "fa-3x" }, [
              _c("i", { staticClass: "fas fa-spinner fa-spin" }),
              _vm._v(" "),
              _c("i", { staticClass: "fas fa-circle-notch fa-spin" }),
              _vm._v(" "),
              _c("i", { staticClass: "fas fa-sync fa-spin" }),
              _vm._v(" "),
              _c("i", { staticClass: "fas fa-cog fa-spin" }),
              _vm._v(" "),
              _c("i", { staticClass: "fas fa-spinner fa-pulse" })
            ]),
            _c(
              "div",
              {
                directives: [{ name: "highlight", rawName: "v-highlight" }],
                staticClass: "hljs-wrapper",
                attrs: { slot: "outsideBody" },
                slot: "outsideBody"
              },
              [
                _c("pre", [
                  _c("code", { staticClass: "html" }, [
                    _vm._v(
                      '<div class="fa-3x">\n<i class="fas fa-spinner fa-spin"></i>\n<i class="fas fa-circle-notch fa-spin"></i>\n<i class="fas fa-sync fa-spin"></i>\n<i class="fas fa-cog fa-spin"></i>\n<i class="fas fa-spinner fa-pulse"></i>\n</div>'
                    )
                  ])
                ])
              ]
            )
          ]),
          _c(
            "panel",
            { attrs: { title: "Power Transforms: Rotating & Flipping" } },
            [
              _c("div", { staticClass: "f-s-14" }, [
                _c("div", { staticClass: "fa-3x" }, [
                  _c("i", { staticClass: "fas fa-arrow-alt-circle-right" }),
                  _vm._v(" "),
                  _c("i", {
                    staticClass: "fas fa-arrow-alt-circle-right fa-rotate-90"
                  }),
                  _vm._v(" "),
                  _c("i", {
                    staticClass: "fas fa-arrow-alt-circle-right fa-rotate-180"
                  }),
                  _vm._v(" "),
                  _c("i", {
                    staticClass: "fas fa-arrow-alt-circle-right fa-rotate-270"
                  }),
                  _vm._v(" "),
                  _c("i", {
                    staticClass:
                      "fas fa-arrow-alt-circle-right fa-flip-horizontal"
                  }),
                  _vm._v(" "),
                  _c("i", {
                    staticClass:
                      "fas fa-arrow-alt-circle-right fa-flip-vertical"
                  })
                ])
              ]),
              _c(
                "div",
                {
                  directives: [{ name: "highlight", rawName: "v-highlight" }],
                  staticClass: "hljs-wrapper",
                  attrs: { slot: "outsideBody" },
                  slot: "outsideBody"
                },
                [
                  _c("pre", [
                    _c("code", { staticClass: "html" }, [
                      _vm._v(
                        '<div class="fa-3x">\n  <i class="fas fa-arrow-alt-circle-right"></i>\n  <i class="fas fa-arrow-alt-circle-right fa-rotate-90"></i>\n  <i class="fas fa-arrow-alt-circle-right fa-rotate-180"></i>\n  <i class="fas fa-arrow-alt-circle-right fa-rotate-270"></i>\n  <i class="fas fa-arrow-alt-circle-right fa-flip-horizontal"></i>\n  <i class="fas fa-arrow-alt-circle-right fa-flip-vertical"></i>\n</div>'
                      )
                    ])
                  ])
                ]
              )
            ]
          )
        ],
        1
      ),
      _c(
        "div",
        { staticClass: "col-xl-6" },
        [
          _c("panel", { attrs: { title: "List Icons" } }, [
            _c("div", { staticClass: "f-s-14" }, [
              _c("ul", { staticClass: "fa-ul" }, [
                _c("li", [
                  _c("span", { staticClass: "fa-li" }, [
                    _c("i", { staticClass: "fas fa-check-square text-primary" })
                  ]),
                  _vm._v("List icons can")
                ]),
                _c("li", [
                  _c("span", { staticClass: "fa-li" }, [
                    _c("i", { staticClass: "fas fa-check-square text-purple" })
                  ]),
                  _vm._v("be used to")
                ]),
                _c("li", [
                  _c("span", { staticClass: "fa-li" }, [
                    _c("i", {
                      staticClass: "fas fa-spinner fa-pulse text-success"
                    })
                  ]),
                  _vm._v("replace bullets")
                ]),
                _c("li", [
                  _c("span", { staticClass: "fa-li" }, [
                    _c("i", { staticClass: "far fa-square text-inverse" })
                  ]),
                  _vm._v("in lists")
                ])
              ])
            ]),
            _c(
              "div",
              {
                directives: [{ name: "highlight", rawName: "v-highlight" }],
                staticClass: "hljs-wrapper",
                attrs: { slot: "outsideBody" },
                slot: "outsideBody"
              },
              [
                _c("pre", [
                  _c("code", { staticClass: "html" }, [
                    _vm._v(
                      '<ul class="fa-ul">\n  <li>\n    <span class="fa-li"><i class="fas fa-check-square"></i></span>\n    List icons can\n  </li>\n  <li>\n    <span class="fa-li"><i class="fas fa-check-square"></i></span>\n    be used to\n  </li>\n  <li>\n    <span class="fa-li"><i class="fas fa-spinner fa-pulse"></i></span>\n    replace bullets\n  </li>\n  <li>\n    <span class="fa-li"><i class="far fa-square"></i></span>\n    in lists\n  </li>\n</ul>'
                    )
                  ])
                ])
              ]
            )
          ]),
          _c("panel", { attrs: { title: "Bordered & Pulled Icons" } }, [
            _c("div", { staticClass: "f-s-14" }, [
              _c("i", {
                staticClass: "fas fa-quote-left fa-2x fa-pull-left fa-border"
              }),
              _vm._v(
                " Gatsby believed in the green light, the orgastic future that year by year recedes before us. It eluded us then, but that’s no matter — tomorrow we will run faster, stretch our arms further... And one fine morning — So we beat on, boats against the current, borne back ceaselessly into the past. "
              )
            ]),
            _c(
              "div",
              {
                directives: [{ name: "highlight", rawName: "v-highlight" }],
                staticClass: "hljs-wrapper",
                attrs: { slot: "outsideBody" },
                slot: "outsideBody"
              },
              [
                _c("pre", [
                  _c("code", { staticClass: "html" }, [
                    _vm._v(
                      '<i class="fas fa-quote-left fa-2x fa-pull-left fa-border"></i>\nGatsby believed in the green light, the orgastic future that year by year recedes before us. It eluded us then, but that’s no matter — tomorrow we will run faster, stretch our arms further... And one fine morning — So we beat on, boats against the current, borne back ceaselessly into the past.'
                    )
                  ])
                ])
              ]
            )
          ]),
          _c("panel", { attrs: { title: "Stacked Icons" } }, [
            _c("div", { staticClass: "f-s-14" }, [
              _c("span", { staticClass: "fa-stack fa-2x" }, [
                _c("i", { staticClass: "far fa-square fa-stack-2x" }),
                _c("i", { staticClass: "fab fa-twitter fa-stack-1x" })
              ]),
              _c("span", { staticClass: "fa-stack fa-2x" }, [
                _c("i", { staticClass: "fa fa-circle fa-stack-2x" }),
                _c("i", { staticClass: "fa fa-flag fa-stack-1x fa-inverse" })
              ]),
              _c("span", { staticClass: "fa-stack fa-2x" }, [
                _c("i", { staticClass: "fa fa-square fa-stack-2x" }),
                _c("i", {
                  staticClass: "fa fa-terminal fa-stack-1x fa-inverse"
                })
              ]),
              _c("span", { staticClass: "fa-stack fa-2x" }, [
                _c("i", { staticClass: "fa fa-camera fa-stack-1x" }),
                _c("i", { staticClass: "fa fa-ban fa-stack-2x" })
              ]),
              _c("span", { staticClass: "fa-stack fa-2x" }, [
                _c("i", { staticClass: "far fa-circle fa-stack-2x" }),
                _c("i", { staticClass: "fa fa-cog fa-stack-1x" })
              ])
            ]),
            _c(
              "div",
              {
                directives: [{ name: "highlight", rawName: "v-highlight" }],
                staticClass: "hljs-wrapper",
                attrs: { slot: "outsideBody" },
                slot: "outsideBody"
              },
              [
                _c("pre", [
                  _c("code", { staticClass: "html" }, [
                    _vm._v(
                      '<span class="fa-stack fa-2x text-primary">\n  <i class="far fa-square fa-stack-2x"></i>\n  <i class="fab fa-twitter fa-stack-1x"></i>\n</span>\n<span class="fa-stack fa-2x">\n  <i class="fa fa-circle fa-stack-2x"></i>\n  <i class="fa fa-flag fa-stack-1x fa-inverse"></i>\n</span>\n<span class="fa-stack fa-2x">\n  <i class="fa fa-square fa-stack-2x"></i>\n  <i class="fa fa-terminal fa-stack-1x fa-inverse"></i>\n</span>\n<span class="fa-stack fa-2x">\n  <i class="fa fa-camera fa-stack-1x"></i>\n  <i class="fa fa-ban fa-stack-2x"></i>\n</span>\n<span class="fa-stack fa-2x">\n  <i class="far fa-circle fa-stack-2x"></i>\n  <i class="fa fa-cog fa-stack-1x"></i>\n</span>'
                    )
                  ])
                ])
              ]
            )
          ])
        ],
        1
      )
    ]),
    _vm._m(2)
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ol", { staticClass: "breadcrumb float-xl-right" }, [
      _c("li", { staticClass: "breadcrumb-item" }, [
        _c("a", { attrs: { href: "javascript:;" } }, [_vm._v("Home")])
      ]),
      _c("li", { staticClass: "breadcrumb-item" }, [
        _c("a", { attrs: { href: "javascript:;" } }, [_vm._v("UI Elements")])
      ]),
      _c("li", { staticClass: "breadcrumb-item active" }, [_vm._v("Icons")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("h1", { staticClass: "page-header" }, [
      _vm._v("Icons "),
      _c("small", [_vm._v("header small text goes here...")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row" }, [
      _c("div", { staticClass: "col-xl-6" }, [
        _c("h3", { staticClass: "m-b-10" }, [_c("b", [_vm._v("Solid")])]),
        _c("p", { staticClass: "m-b-20" }, [
          _vm._v(" Solid type Font Awesome Icon prefix "),
          _c("code", [_vm._v("fas fa-*")])
        ]),
        _c("div", { staticClass: "row m-b-20 f-s-14" }, [
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-address-book"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("address-book")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-address-card"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("address-card")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-adjust" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("adjust")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-align-center"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("align-center")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-align-justify"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("align-justify")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-align-left" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("align-left")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-align-right" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("align-right")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-ambulance" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("ambulance")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fas fa-lg fa-fw m-r-10 fa-american-sign-language-interpreting"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("american-sign-language-interpreting")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-anchor" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("anchor")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-angle-double-down"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("angle-double-down")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-angle-double-left"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("angle-double-left")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-angle-double-right"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("angle-double-right")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-angle-double-up"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("angle-double-up")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-angle-down" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("angle-down")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-angle-left" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("angle-left")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-angle-right" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("angle-right")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-angle-up" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("angle-up")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-archive" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("archive")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-arrow-alt-circle-down"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("arrow-alt-circle-down")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-arrow-alt-circle-left"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("arrow-alt-circle-left")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-arrow-alt-circle-right"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("arrow-alt-circle-right")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-arrow-alt-circle-up"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("arrow-alt-circle-up")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-arrow-circle-down"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("arrow-circle-down")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-arrow-circle-left"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("arrow-circle-left")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-arrow-circle-right"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("arrow-circle-right")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-arrow-circle-up"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("arrow-circle-up")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-arrow-down" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("arrow-down")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-arrow-left" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("arrow-left")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-arrow-right" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("arrow-right")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-arrow-up" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("arrow-up")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-arrows-alt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("arrows-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-arrows-alt-h"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("arrows-alt-h")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-arrows-alt-v"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("arrows-alt-v")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fas fa-lg fa-fw m-r-10 fa-assistive-listening-systems"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("assistive-listening-systems")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-asterisk" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("asterisk")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-at" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("at")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-audio-description"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("audio-description")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-backward" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("backward")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-balance-scale"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("balance-scale")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-ban" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("ban")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-barcode" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("barcode")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-bars" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("bars")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-bath" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("bath")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-battery-empty"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("battery-empty")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-battery-full"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("battery-full")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-battery-half"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("battery-half")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-battery-quarter"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("battery-quarter")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-battery-three-quarters"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("battery-three-quarters")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-bed" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("bed")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-beer" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("beer")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-bell" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("bell")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-bell-slash" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("bell-slash")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-bicycle" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("bicycle")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-binoculars" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("binoculars")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-birthday-cake"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("birthday-cake")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-blind" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("blind")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-bold" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("bold")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-bolt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("bolt")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-bomb" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("bomb")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-book" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("book")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-bookmark" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("bookmark")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-braille" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("braille")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-briefcase" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("briefcase")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-bug" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("bug")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-building" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("building")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-bullhorn" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("bullhorn")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-bullseye" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("bullseye")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-bus" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("bus")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-calculator" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("calculator")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-calendar" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("calendar")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-calendar-alt"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("calendar-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-calendar-check"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("calendar-check")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-calendar-minus"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("calendar-minus")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-calendar-plus"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("calendar-plus")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-calendar-times"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("calendar-times")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-camera" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("camera")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-camera-retro"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("camera-retro")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-car" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("car")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-caret-down" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("caret-down")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-caret-left" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("caret-left")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-caret-right" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("caret-right")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-caret-square-down"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("caret-square-down")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-caret-square-left"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("caret-square-left")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-caret-square-right"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("caret-square-right")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-caret-square-up"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("caret-square-up")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-caret-up" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("caret-up")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-cart-arrow-down"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("cart-arrow-down")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-cart-plus" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("cart-plus")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-certificate" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("certificate")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-chart-area" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("chart-area")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-chart-bar" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("chart-bar")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-chart-line" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("chart-line")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-chart-pie" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("chart-pie")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-check" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("check")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-check-circle"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("check-circle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-check-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("check-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-chevron-circle-down"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("chevron-circle-down")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-chevron-circle-left"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("chevron-circle-left")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-chevron-circle-right"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("chevron-circle-right")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-chevron-circle-up"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("chevron-circle-up")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-chevron-down"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("chevron-down")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-chevron-left"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("chevron-left")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-chevron-right"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("chevron-right")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-chevron-up" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("chevron-up")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-child" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("child")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-circle" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("circle")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-circle-notch"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("circle-notch")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-clipboard" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("clipboard")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-clock" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("clock")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-clone" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("clone")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-closed-captioning"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("closed-captioning")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-cloud" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("cloud")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-cloud-download-alt"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("cloud-download-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-cloud-upload-alt"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("cloud-upload-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-code" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("code")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-code-branch" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("code-branch")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-coffee" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("coffee")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-cog" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("cog")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-cogs" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("cogs")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-columns" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("columns")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-comment" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("comment")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-comment-alt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("comment-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-comments" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("comments")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-compass" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("compass")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-compress" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("compress")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-copy" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("copy")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-copyright" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("copyright")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-credit-card" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("credit-card")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-crop" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("crop")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-crosshairs" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("crosshairs")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-cube" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("cube")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-cubes" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("cubes")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-cut" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("cut")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-database" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("database")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-deaf" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("deaf")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-desktop" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("desktop")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-dollar-sign" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("dollar-sign")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-dot-circle" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("dot-circle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-download" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("download")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-edit" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("edit")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-eject" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("eject")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-ellipsis-h" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("ellipsis-h")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-ellipsis-v" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("ellipsis-v")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-envelope" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("envelope")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-envelope-open"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("envelope-open")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-envelope-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("envelope-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-eraser" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("eraser")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-euro-sign" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("euro-sign")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-exchange-alt"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("exchange-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-exclamation" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("exclamation")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-exclamation-circle"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("exclamation-circle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-exclamation-triangle"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("exclamation-triangle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-expand" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("expand")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-expand-arrows-alt"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("expand-arrows-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-external-link-alt"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("external-link-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fas fa-lg fa-fw m-r-10 fa-external-link-square-alt"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("external-link-square-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-eye" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("eye")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-eye-dropper" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("eye-dropper")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-eye-slash" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("eye-slash")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-fast-backward"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("fast-backward")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-fast-forward"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("fast-forward")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-fax" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("fax")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-female" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("female")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-fighter-jet" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("fighter-jet")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-file" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("file")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-file-alt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("file-alt")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-file-archive"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("file-archive")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-file-audio" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("file-audio")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-file-code" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("file-code")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-file-excel" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("file-excel")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-file-image" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("file-image")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-file-pdf" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("file-pdf")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-file-powerpoint"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("file-powerpoint")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-file-video" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("file-video")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-file-word" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("file-word")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-film" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("film")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-filter" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("filter")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-fire" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("fire")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-fire-extinguisher"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("fire-extinguisher")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-flag" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("flag")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-flag-checkered"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("flag-checkered")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-flask" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("flask")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-folder" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("folder")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-folder-open" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("folder-open")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-font" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("font")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-forward" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("forward")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-frown" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("frown")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-futbol" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("futbol")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-gamepad" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("gamepad")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-gavel" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("gavel")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-gem" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("gem")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-genderless" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("genderless")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-gift" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("gift")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-glass-martini"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("glass-martini")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-globe" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("globe")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-graduation-cap"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("graduation-cap")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-h-square" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("h-square")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-hand-lizard" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hand-lizard")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-hand-paper" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hand-paper")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-hand-peace" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hand-peace")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-hand-point-down"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hand-point-down")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-hand-point-left"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hand-point-left")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-hand-point-right"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hand-point-right")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-hand-point-up"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hand-point-up")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-hand-pointer"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hand-pointer")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-hand-rock" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("hand-rock")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-hand-scissors"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hand-scissors")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-hand-spock" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hand-spock")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-handshake" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("handshake")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-hashtag" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("hashtag")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-hdd" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("hdd")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-heading" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("heading")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-headphones" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("headphones")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-heart" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("heart")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-heartbeat" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("heartbeat")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-history" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("history")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-home" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("home")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-hospital" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("hospital")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-hourglass" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("hourglass")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-hourglass-end"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hourglass-end")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-hourglass-half"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hourglass-half")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-hourglass-start"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hourglass-start")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-i-cursor" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("i-cursor")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-id-badge" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("id-badge")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-id-card" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("id-card")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-image" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("image")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-images" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("images")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-inbox" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("inbox")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-indent" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("indent")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-industry" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("industry")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-info" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("info")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-info-circle" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("info-circle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-italic" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("italic")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-key" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("key")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-keyboard" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("keyboard")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-language" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("language")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-laptop" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("laptop")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-leaf" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("leaf")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-lemon" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("lemon")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-level-down-alt"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("level-down-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-level-up-alt"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("level-up-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-life-ring" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("life-ring")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-lightbulb" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("lightbulb")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-link" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("link")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-lira-sign" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("lira-sign")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-list" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("list")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-list-alt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("list-alt")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-list-ol" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("list-ol")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-list-ul" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("list-ul")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-location-arrow"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("location-arrow")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-lock" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("lock")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-lock-open" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("lock-open")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-long-arrow-alt-down"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("long-arrow-alt-down")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-long-arrow-alt-left"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("long-arrow-alt-left")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-long-arrow-alt-right"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("long-arrow-alt-right")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-long-arrow-alt-up"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("long-arrow-alt-up")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-low-vision" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("low-vision")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-magic" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("magic")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-magnet" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("magnet")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-male" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("male")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-map" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("map")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-map-marker" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("map-marker")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-map-marker-alt"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("map-marker-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-map-pin" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("map-pin")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-map-signs" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("map-signs")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-mars" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("mars")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-mars-double" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("mars-double")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-mars-stroke" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("mars-stroke")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-mars-stroke-h"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("mars-stroke-h")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-mars-stroke-v"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("mars-stroke-v")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-medkit" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("medkit")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-meh" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("meh")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-mercury" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("mercury")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-microchip" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("microchip")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-microphone" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("microphone")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-microphone-slash"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("microphone-slash")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-minus" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("minus")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-minus-circle"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("minus-circle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-minus-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("minus-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-mobile" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("mobile")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-mobile-alt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("mobile-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-money-bill-alt"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("money-bill-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-moon" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("moon")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-motorcycle" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("motorcycle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-mouse-pointer"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("mouse-pointer")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-music" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("music")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-neuter" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("neuter")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-newspaper" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("newspaper")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-object-group"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("object-group")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-object-ungroup"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("object-ungroup")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-outdent" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("outdent")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-paint-brush" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("paint-brush")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-paper-plane" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("paper-plane")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-paperclip" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("paperclip")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-paragraph" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("paragraph")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-paste" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("paste")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-pause" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("pause")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-pause-circle"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("pause-circle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-paw" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("paw")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-pen-square" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("pen-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-pencil-alt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("pencil-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-percent" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("percent")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-phone" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("phone")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-phone-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("phone-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-phone-volume"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("phone-volume")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-plane" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("plane")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-play" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("play")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-play-circle" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("play-circle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-plug" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("plug")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-plus" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("plus")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-plus-circle" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("plus-circle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-plus-square" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("plus-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-podcast" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("podcast")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-pound-sign" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("pound-sign")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-power-off" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("power-off")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-print" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("print")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-puzzle-piece"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("puzzle-piece")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-qrcode" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("qrcode")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-question" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("question")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-question-circle"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("question-circle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-quote-left" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("quote-left")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-quote-right" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("quote-right")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-random" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("random")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-recycle" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("recycle")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-redo" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("redo")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-redo-alt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("redo-alt")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-registered" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("registered")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-reply" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("reply")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-reply-all" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("reply-all")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-retweet" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("retweet")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-road" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("road")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-rocket" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("rocket")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-rss" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("rss")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-rss-square" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("rss-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-ruble-sign" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("ruble-sign")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-rupee-sign" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("rupee-sign")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-save" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("save")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-search" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("search")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-search-minus"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("search-minus")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-search-plus" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("search-plus")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-server" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("server")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-share" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("share")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-share-alt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("share-alt")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-share-alt-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("share-alt-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-share-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("share-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-shekel-sign" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("shekel-sign")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-shield-alt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("shield-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-ship" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("ship")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-shopping-bag"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("shopping-bag")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-shopping-basket"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("shopping-basket")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-shopping-cart"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("shopping-cart")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-shower" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("shower")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-sign-in-alt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("sign-in-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-sign-language"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("sign-language")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-sign-out-alt"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("sign-out-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-signal" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("signal")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-sitemap" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("sitemap")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-sliders-h" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("sliders-h")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-smile" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("smile")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-snowflake" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("snowflake")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-sort" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("sort")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-sort-alpha-down"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("sort-alpha-down")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-sort-alpha-up"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("sort-alpha-up")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-sort-amount-down"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("sort-amount-down")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-sort-amount-up"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("sort-amount-up")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-sort-down" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("sort-down")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-sort-numeric-down"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("sort-numeric-down")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-sort-numeric-up"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("sort-numeric-up")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-sort-up" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("sort-up")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-space-shuttle"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("space-shuttle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-spinner" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("spinner")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-square" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("square")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-star" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("star")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-star-half" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("star-half")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-step-backward"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("step-backward")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-step-forward"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("step-forward")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-stethoscope" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("stethoscope")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-sticky-note" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("sticky-note")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-stop" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("stop")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-stop-circle" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("stop-circle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-stopwatch" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("stopwatch")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-street-view" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("street-view")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-strikethrough"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("strikethrough")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-subscript" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("subscript")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-subway" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("subway")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-suitcase" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("suitcase")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-sun" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("sun")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-superscript" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("superscript")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-sync" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("sync")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-sync-alt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("sync-alt")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-table" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("table")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-tablet" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("tablet")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-tablet-alt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("tablet-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-tachometer-alt"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("tachometer-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-tag" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("tag")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-tags" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("tags")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-tasks" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("tasks")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-taxi" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("taxi")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-terminal" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("terminal")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-text-height" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("text-height")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-text-width" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("text-width")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-th" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("th")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-th-large" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("th-large")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-th-list" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("th-list")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-thermometer-empty"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("thermometer-empty")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-thermometer-full"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("thermometer-full")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-thermometer-half"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("thermometer-half")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-thermometer-quarter"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("thermometer-quarter")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass:
                  "fas fa-lg fa-fw m-r-10 fa-thermometer-three-quarters"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("thermometer-three-quarters")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-thumbs-down" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("thumbs-down")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-thumbs-up" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("thumbs-up")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-thumbtack" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("thumbtack")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-ticket-alt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("ticket-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-times" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("times")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-times-circle"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("times-circle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-tint" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("tint")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-toggle-off" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("toggle-off")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-toggle-on" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("toggle-on")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-trademark" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("trademark")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-train" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("train")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-transgender" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("transgender")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-transgender-alt"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("transgender-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-trash" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("trash")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-trash-alt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("trash-alt")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-tree" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("tree")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-trophy" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("trophy")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-truck" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("truck")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-tty" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("tty")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-tv" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("tv")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-umbrella" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("umbrella")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-underline" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("underline")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-undo" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("undo")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-undo-alt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("undo-alt")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-universal-access"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("universal-access")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-university" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("university")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-unlink" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("unlink")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-unlock" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("unlock")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-unlock-alt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("unlock-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-upload" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("upload")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-user" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("user")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-user-circle" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("user-circle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-user-md" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("user-md")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-user-plus" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("user-plus")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-user-secret" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("user-secret")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-user-times" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("user-times")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-users" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("users")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-utensil-spoon"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("utensil-spoon")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-utensils" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("utensils")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-venus" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("venus")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-venus-double"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("venus-double")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-venus-mars" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("venus-mars")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-video" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("video")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-volume-down" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("volume-down")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-volume-off" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("volume-off")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-volume-up" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("volume-up")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-wheelchair" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("wheelchair")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-wifi" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("wifi")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-window-close"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("window-close")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-window-maximize"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("window-maximize")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-window-minimize"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("window-minimize")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fas fa-lg fa-fw m-r-10 fa-window-restore"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("window-restore")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-won-sign" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("won-sign")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-wrench" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("wrench")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fas fa-lg fa-fw m-r-10 fa-yen-sign" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("yen-sign")])
            ]
          )
        ])
      ]),
      _c("div", { staticClass: "col-xl-6" }, [
        _c("h3", { staticClass: "m-b-10" }, [_c("b", [_vm._v("Regular")])]),
        _c("p", { staticClass: "m-b-20" }, [
          _vm._v(" Regular type Font Awesome Icon prefix "),
          _c("code", [_vm._v("far fa-*")])
        ]),
        _c("div", { staticClass: "row m-b-20 f-s-14" }, [
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-address-book"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("address-book")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-address-card"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("address-card")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-arrow-alt-circle-down"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("arrow-alt-circle-down")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-arrow-alt-circle-left"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("arrow-alt-circle-left")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-arrow-alt-circle-right"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("arrow-alt-circle-right")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-arrow-alt-circle-up"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("arrow-alt-circle-up")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-bell" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("bell")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-bell-slash" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("bell-slash")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-bookmark" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("bookmark")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-building" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("building")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-calendar" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("calendar")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-calendar-alt"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("calendar-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-calendar-check"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("calendar-check")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-calendar-minus"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("calendar-minus")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-calendar-plus"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("calendar-plus")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-calendar-times"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("calendar-times")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-caret-square-down"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("caret-square-down")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-caret-square-left"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("caret-square-left")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-caret-square-right"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("caret-square-right")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-caret-square-up"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("caret-square-up")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-chart-bar" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("chart-bar")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-check-circle"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("check-circle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-check-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("check-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-circle" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("circle")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-clipboard" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("clipboard")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-clock" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("clock")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-clone" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("clone")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-closed-captioning"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("closed-captioning")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-comment" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("comment")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-comment-alt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("comment-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-comments" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("comments")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-compass" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("compass")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-copy" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("copy")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-copyright" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("copyright")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-credit-card" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("credit-card")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-dot-circle" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("dot-circle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-edit" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("edit")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-envelope" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("envelope")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-envelope-open"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("envelope-open")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-eye-slash" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("eye-slash")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-file" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("file")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-file-alt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("file-alt")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-file-archive"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("file-archive")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-file-audio" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("file-audio")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-file-code" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("file-code")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-file-excel" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("file-excel")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-file-image" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("file-image")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-file-pdf" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("file-pdf")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-file-powerpoint"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("file-powerpoint")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-file-video" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("file-video")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-file-word" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("file-word")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-flag" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("flag")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-folder" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("folder")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-folder-open" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("folder-open")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-frown" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("frown")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-futbol" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("futbol")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-gem" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("gem")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-hand-lizard" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hand-lizard")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-hand-paper" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hand-paper")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-hand-peace" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hand-peace")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-hand-point-down"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hand-point-down")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-hand-point-left"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hand-point-left")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-hand-point-right"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hand-point-right")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-hand-point-up"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hand-point-up")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-hand-pointer"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hand-pointer")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-hand-rock" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("hand-rock")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-hand-scissors"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hand-scissors")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-hand-spock" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hand-spock")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-handshake" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("handshake")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-hdd" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("hdd")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-heart" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("heart")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-hospital" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("hospital")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-hourglass" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("hourglass")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-id-badge" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("id-badge")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-id-card" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("id-card")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-image" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("image")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-images" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("images")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-keyboard" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("keyboard")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-lemon" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("lemon")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-life-ring" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("life-ring")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-lightbulb" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("lightbulb")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-list-alt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("list-alt")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-map" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("map")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-meh" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("meh")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-minus-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("minus-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-money-bill-alt"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("money-bill-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-moon" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("moon")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-newspaper" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("newspaper")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-object-group"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("object-group")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-object-ungroup"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("object-ungroup")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-paper-plane" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("paper-plane")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-pause-circle"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("pause-circle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-play-circle" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("play-circle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-plus-square" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("plus-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-question-circle"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("question-circle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-registered" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("registered")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-save" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("save")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-share-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("share-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-smile" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("smile")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-snowflake" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("snowflake")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-square" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("square")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-star" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("star")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-star-half" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("star-half")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-sticky-note" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("sticky-note")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-stop-circle" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("stop-circle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-sun" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("sun")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-thumbs-down" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("thumbs-down")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-thumbs-up" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("thumbs-up")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-times-circle"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("times-circle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-trash-alt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("trash-alt")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-user" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("user")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "far fa-lg fa-fw m-r-10 fa-user-circle" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("user-circle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-window-close"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("window-close")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-window-maximize"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("window-maximize")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-window-minimize"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("window-minimize")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "far fa-lg fa-fw m-r-10 fa-window-restore"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("window-restore")
              ])
            ]
          )
        ]),
        _c("h3", { staticClass: "m-b-10" }, [_c("b", [_vm._v("Brands")])]),
        _c("p", { staticClass: "m-b-20" }, [
          _vm._v(" Brand type Font Awesome Icon prefix "),
          _c("code", [_vm._v("fab fa-*")])
        ]),
        _c("div", { staticClass: "row m-b-20 f-s-14" }, [
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-500px" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("500px")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-accessible-icon"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("accessible-icon")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-accusoft" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("accusoft")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-adn" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("adn")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-adversal" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("adversal")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-affiliatetheme"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("affiliatetheme")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-algolia" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("algolia")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-amazon" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("amazon")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-amazon-pay" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("amazon-pay")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-amilia" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("amilia")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-android" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("android")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-angellist" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("angellist")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-angrycreative"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("angrycreative")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-angular" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("angular")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-app-store" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("app-store")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-app-store-ios"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("app-store-ios")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-apper" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("apper")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-apple" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("apple")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-apple-pay" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("apple-pay")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-asymmetrik" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("asymmetrik")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-audible" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("audible")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-autoprefixer"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("autoprefixer")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-avianex" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("avianex")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-aviato" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("aviato")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-aws" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("aws")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-bandcamp" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("bandcamp")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-behance" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("behance")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-behance-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("behance-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-bimobject" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("bimobject")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-bitbucket" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("bitbucket")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-bitcoin" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("bitcoin")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-bity" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("bity")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-black-tie" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("black-tie")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-blackberry" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("blackberry")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-blogger" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("blogger")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-blogger-b" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("blogger-b")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-bluetooth" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("bluetooth")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-bluetooth-b" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("bluetooth-b")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-btc" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("btc")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-buromobelexperte"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("buromobelexperte")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-buysellads" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("buysellads")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-cc-amazon-pay"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("cc-amazon-pay")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-cc-amex" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("cc-amex")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-cc-apple-pay"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("cc-apple-pay")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-cc-diners-club"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("cc-diners-club")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-cc-discover" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("cc-discover")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-cc-jcb" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("cc-jcb")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-cc-mastercard"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("cc-mastercard")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-cc-paypal" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("cc-paypal")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-cc-stripe" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("cc-stripe")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-cc-visa" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("cc-visa")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-centercode" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("centercode")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-chrome" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("chrome")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-cloudscale" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("cloudscale")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-cloudsmith" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("cloudsmith")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-cloudversify"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("cloudversify")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-codepen" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("codepen")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-codiepie" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("codiepie")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-connectdevelop"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("connectdevelop")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-contao" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("contao")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-cpanel" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("cpanel")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-creative-commons"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("creative-commons")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-css3" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("css3")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-css3-alt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("css3-alt")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-cuttlefish" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("cuttlefish")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-d-and-d" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("d-and-d")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-dashcube" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("dashcube")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-delicious" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("delicious")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-deploydog" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("deploydog")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-deskpro" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("deskpro")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-deviantart" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("deviantart")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-digg" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("digg")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-digital-ocean"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("digital-ocean")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-discord" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("discord")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-discourse" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("discourse")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-dochub" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("dochub")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-docker" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("docker")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-draft2digital"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("draft2digital")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-dribbble" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("dribbble")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-dribbble-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("dribbble-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-dropbox" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("dropbox")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-drupal" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("drupal")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-dyalog" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("dyalog")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-earlybirds" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("earlybirds")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-edge" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("edge")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-elementor" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("elementor")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-ember" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("ember")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-empire" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("empire")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-envira" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("envira")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-erlang" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("erlang")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-ethereum" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("ethereum")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-etsy" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("etsy")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-expeditedssl"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("expeditedssl")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-facebook" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("facebook")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-facebook-f" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("facebook-f")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-facebook-messenger"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("facebook-messenger")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-facebook-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("facebook-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-firefox" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("firefox")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-first-order" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("first-order")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-firstdraft" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("firstdraft")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-flickr" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("flickr")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-fly" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("fly")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-font-awesome"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("font-awesome")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-font-awesome-alt"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("font-awesome-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-font-awesome-flag"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("font-awesome-flag")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-fonticons" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("fonticons")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-fonticons-fi"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("fonticons-fi")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-fort-awesome"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("fort-awesome")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-fort-awesome-alt"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("fort-awesome-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-forumbee" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("forumbee")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-foursquare" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("foursquare")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-free-code-camp"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("free-code-camp")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-freebsd" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("freebsd")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-get-pocket" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("get-pocket")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-gg" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("gg")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-gg-circle" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("gg-circle")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-git" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("git")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-git-square" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("git-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-github" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("github")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-github-alt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("github-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-github-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("github-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-gitkraken" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("gitkraken")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-gitlab" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("gitlab")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-gitter" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("gitter")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-glide" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("glide")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-glide-g" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("glide-g")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-gofore" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("gofore")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-goodreads" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("goodreads")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-goodreads-g" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("goodreads-g")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-google" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("google")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-google-drive"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("google-drive")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-google-play" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("google-play")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-google-plus" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("google-plus")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-google-plus-g"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("google-plus-g")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-google-plus-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("google-plus-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-google-wallet"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("google-wallet")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-gratipay" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("gratipay")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-grav" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("grav")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-gripfire" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("gripfire")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-grunt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("grunt")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-gulp" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("gulp")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-hacker-news" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hacker-news")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-hacker-news-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hacker-news-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-hire-a-helper"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("hire-a-helper")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-hooli" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("hooli")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-hotjar" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("hotjar")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-houzz" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("houzz")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-html5" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("html5")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-hubspot" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("hubspot")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-imdb" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("imdb")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-instagram" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("instagram")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-internet-explorer"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("internet-explorer")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-ioxhost" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("ioxhost")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-itunes" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("itunes")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-itunes-note" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("itunes-note")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-jenkins" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("jenkins")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-joget" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("joget")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-joomla" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("joomla")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-js" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("js")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-js-square" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("js-square")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-jsfiddle" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("jsfiddle")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-keycdn" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("keycdn")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-kickstarter" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("kickstarter")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-kickstarter-k"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("kickstarter-k")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-korvue" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("korvue")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-laravel" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("laravel")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-lastfm" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("lastfm")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-lastfm-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("lastfm-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-leanpub" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("leanpub")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-less" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("less")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-line" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("line")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-linkedin" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("linkedin")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-linkedin-in" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("linkedin-in")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-linode" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("linode")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-linux" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("linux")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-lyft" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("lyft")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-magento" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("magento")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-maxcdn" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("maxcdn")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-medapps" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("medapps")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-medium" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("medium")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-medium-m" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("medium-m")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-medrt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("medrt")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-meetup" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("meetup")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-microsoft" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("microsoft")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-mix" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("mix")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-mixcloud" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("mixcloud")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-mizuni" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("mizuni")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-modx" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("modx")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-monero" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("monero")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-napster" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("napster")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-nintendo-switch"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("nintendo-switch")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-node" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("node")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-node-js" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("node-js")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-npm" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("npm")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-ns8" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("ns8")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-nutritionix" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("nutritionix")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-odnoklassniki"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("odnoklassniki")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-odnoklassniki-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("odnoklassniki-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-opencart" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("opencart")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-openid" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("openid")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-opera" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("opera")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-optin-monster"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("optin-monster")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-osi" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("osi")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-page4" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("page4")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-pagelines" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("pagelines")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-palfed" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("palfed")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-patreon" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("patreon")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-paypal" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("paypal")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-periscope" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("periscope")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-phabricator" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("phabricator")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-phoenix-framework"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("phoenix-framework")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-pied-piper" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("pied-piper")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-pied-piper-alt"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("pied-piper-alt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-pied-piper-pp"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("pied-piper-pp")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-pinterest" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("pinterest")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-pinterest-p" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("pinterest-p")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-pinterest-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("pinterest-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-playstation" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("playstation")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-product-hunt"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("product-hunt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-pushed" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("pushed")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-python" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("python")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-qq" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("qq")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-quora" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("quora")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-ravelry" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("ravelry")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-react" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("react")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-rebel" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("rebel")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-red-river" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("red-river")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-reddit" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("reddit")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-reddit-alien"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("reddit-alien")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-reddit-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("reddit-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-rendact" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("rendact")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-renren" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("renren")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-replyd" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("replyd")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-resolving" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("resolving")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-rocketchat" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("rocketchat")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-rockrms" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("rockrms")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-safari" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("safari")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-sass" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("sass")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-schlix" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("schlix")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-scribd" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("scribd")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-searchengin" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("searchengin")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-sellcast" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("sellcast")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-sellsy" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("sellsy")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-servicestack"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("servicestack")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-shirtsinbulk"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("shirtsinbulk")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-simplybuilt" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("simplybuilt")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-sistrix" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("sistrix")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-skyatlas" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("skyatlas")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-skype" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("skype")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-slack" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("slack")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-slack-hash" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("slack-hash")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-slideshare" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("slideshare")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-snapchat" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("snapchat")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-snapchat-ghost"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("snapchat-ghost")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-snapchat-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("snapchat-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-soundcloud" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("soundcloud")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-speakap" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("speakap")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-spotify" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("spotify")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-stack-exchange"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("stack-exchange")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-stack-overflow"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("stack-overflow")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-staylinked" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("staylinked")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-steam" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("steam")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-steam-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("steam-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-steam-symbol"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("steam-symbol")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-sticker-mule"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("sticker-mule")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-strava" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("strava")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-stripe" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("stripe")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-stripe-s" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("stripe-s")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-studiovinari"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("studiovinari")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-stumbleupon" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("stumbleupon")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-stumbleupon-circle"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("stumbleupon-circle")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-superpowers" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("superpowers")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-supple" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("supple")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-telegram" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("telegram")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-telegram-plane"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("telegram-plane")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-tencent-weibo"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("tencent-weibo")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-themeisle" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("themeisle")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-trello" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("trello")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-tripadvisor" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("tripadvisor")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-tumblr" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("tumblr")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-tumblr-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("tumblr-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-twitch" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("twitch")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-twitter" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("twitter")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-twitter-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("twitter-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-typo3" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("typo3")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-uber" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("uber")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-uikit" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("uikit")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-uniregistry" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("uniregistry")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-untappd" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("untappd")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-usb" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("usb")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-ussunnah" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("ussunnah")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-vaadin" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("vaadin")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-viacoin" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("viacoin")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-viadeo" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("viadeo")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-viadeo-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("viadeo-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-viber" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("viber")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-vimeo" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("vimeo")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-vimeo-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("vimeo-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-vimeo-v" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("vimeo-v")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-vine" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("vine")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-vk" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("vk")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-vnv" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("vnv")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-vuejs" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("vuejs")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-weibo" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("weibo")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-weixin" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("weixin")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-whatsapp" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("whatsapp")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-whatsapp-square"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("whatsapp-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-whmcs" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("whmcs")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-wikipedia-w" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("wikipedia-w")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-windows" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("windows")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-wordpress" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("wordpress")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-wordpress-simple"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("wordpress-simple")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-wpbeginner" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("wpbeginner")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-wpexplorer" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("wpexplorer")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-wpforms" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("wpforms")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-xbox" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("xbox")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-xing" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("xing")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-xing-square" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("xing-square")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-y-combinator"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("y-combinator")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-yahoo" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("yahoo")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-yandex" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("yandex")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", {
                staticClass: "fab fa-lg fa-fw m-r-10 fa-yandex-international"
              }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [
                _vm._v("yandex-international")
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-yelp" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("yelp")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-yoast" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("yoast")])
            ]
          ),
          _c(
            "div",
            { staticClass: "col-md-6 col-sm-6 col-xs-6 m-b-10 text-ellipsis" },
            [
              _c("i", { staticClass: "fab fa-lg fa-fw m-r-10 fa-youtube" }),
              _vm._v(" "),
              _c("span", { staticClass: "text-inverse" }, [_vm._v("youtube")])
            ]
          )
        ])
      ])
    ])
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}