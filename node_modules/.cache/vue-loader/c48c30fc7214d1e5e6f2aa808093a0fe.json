{"remainingRequest":"D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\vue-project\\template_vuejs\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vue-project\\template_vuejs\\src\\pages\\Extra-search.vue?vue&type=template&id=2f9db229&","dependencies":[{"path":"D:\\vue-project\\template_vuejs\\src\\pages\\Extra-search.vue","mtime":1564443076000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}