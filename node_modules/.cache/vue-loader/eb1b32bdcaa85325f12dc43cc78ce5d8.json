{"remainingRequest":"D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\vue-project\\template_vuejs\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vue-project\\template_vuejs\\src\\pages\\UI-ionicons.vue?vue&type=template&id=1270dad7&","dependencies":[{"path":"D:\\vue-project\\template_vuejs\\src\\pages\\UI-ionicons.vue","mtime":1564468390000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    [
      _vm._m(0),
      _vm._m(1),
      _c(
        "b-tabs",
        {
          attrs: {
            "nav-class": "nav-tabs-inverse",
            "nav-wrapper-class": "nav nav-tabs nav-tabs-inverse"
          }
        },
        [
          _c(
            "b-tab",
            { attrs: { active: "" } },
            [
              _c("template", { slot: "title" }, [
                _c("i", { staticClass: "ion-logo-android fa-lg text-green" }),
                _vm._v(" "),
                _c("span", { staticClass: "d-none d-lg-inline m-l-5" }, [
                  _vm._v("Material style (317)")
                ])
              ]),
              _c(
                "div",
                {
                  staticClass: "row row-space-10",
                  attrs: { "data-id": "icon" }
                },
                [
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-add-circle-outline fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-add-circle-outline")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-add-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-add-circle")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-add fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-add")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-airplane fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-airplane")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-alarm fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-alarm")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-albums fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-albums")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-alert fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-alert")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-american-football fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-american-football")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-analytics fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-analytics")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-aperture fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-aperture")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-apps fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-apps")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-appstore fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-appstore")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-archive fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-archive")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-arrow-back fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-arrow-back")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-arrow-down fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-arrow-down")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-arrow-dropdown-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-arrow-dropdown-circle")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-arrow-dropdown fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-arrow-dropdown")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-arrow-dropleft-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-arrow-dropleft-circle")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-arrow-dropleft fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-arrow-dropleft")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-arrow-dropright-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-arrow-dropright-circle")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-arrow-dropright fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-arrow-dropright")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-arrow-dropup-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-arrow-dropup-circle")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-arrow-dropup fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-arrow-dropup")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-arrow-forward fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-arrow-forward")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-arrow-round-back fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-arrow-round-back")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-arrow-round-down fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-arrow-round-down")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-arrow-round-forward fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-arrow-round-forward")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-arrow-round-up fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-arrow-round-up")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-arrow-up fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-arrow-up")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-at fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-at")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-attach fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-attach")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-backspace fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-backspace")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-barcode fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-barcode")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-baseball fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-baseball")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-basket fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-basket")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-basketball fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-basketball")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-battery-charging fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-battery-charging")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-battery-dead fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-battery-dead")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-battery-full fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-battery-full")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-beaker fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-beaker")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-bed fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-bed")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-beer fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-beer")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-bicycle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-bicycle")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-bluetooth fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-bluetooth")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-boat fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-boat")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-body fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-body")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-bonfire fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-bonfire")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-book fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-book")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-bookmark fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-bookmark")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-bookmarks fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-bookmarks")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-bowtie fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-bowtie")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-briefcase fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-briefcase")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-browsers fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-browsers")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-brush fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-brush")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-bug fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-bug")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-build fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-build")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-bulb fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-bulb")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-bus fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-bus")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-business fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-business")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-cafe fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-cafe")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-calculator fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-calculator")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-calendar fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-calendar")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-call fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-call")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-camera fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-camera")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-car fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-car")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-card fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-card")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-cart fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-cart")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-cash fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-cash")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-cellular fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-cellular")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-chatboxes fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-chatboxes")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-chatbubbles fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-chatbubbles")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-checkbox-outline fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-checkbox-outline")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-checkbox fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-checkbox")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-checkmark-circle-outline fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-checkmark-circle-outline")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-checkmark-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-checkmark-circle")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-checkmark fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-checkmark")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-clipboard fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-clipboard")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-clock fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-clock")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-close-circle-outline fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-close-circle-outline")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-close-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-close-circle")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-close fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-close")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-cloud-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-cloud-circle")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-cloud-done fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-cloud-done")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-cloud-download fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-cloud-download")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-cloud-outline fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-cloud-outline")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-cloud-upload fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-cloud-upload")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-cloud fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-cloud")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-cloudy-night fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-cloudy-night")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-cloudy fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-cloudy")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-code-download fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-code-download")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-code-working fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-code-working")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-code fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-code")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-cog fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-cog")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-color-fill fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-color-fill")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-color-filter fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-color-filter")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-color-palette fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-color-palette")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-color-wand fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-color-wand")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-compass fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-compass")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-construct fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-construct")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-contact fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-contact")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-contacts fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-contacts")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-contract fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-contract")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-contrast fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-contrast")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-copy fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-copy")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-create fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-create")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-crop fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-crop")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-cube fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-cube")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-cut fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-cut")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-desktop fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-desktop")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-disc fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-disc")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-document fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-document")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-done-all fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-done-all")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-download fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-download")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-easel fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-easel")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-egg fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-egg")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-exit fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-exit")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-expand fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-expand")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-eye-off fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-eye-off")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-eye fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-eye")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-fastforward fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-fastforward")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-female fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-female")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-filing fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-filing")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-film fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-film")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-finger-print fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-finger-print")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-fitness fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-fitness")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-flag fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-flag")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-flame fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-flame")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-flash-off fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-flash-off")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-flash fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-flash")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-flashlight fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-flashlight")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-flask fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-flask")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-flower fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-flower")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-folder-open fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-folder-open")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-folder fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-folder")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-football fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-football")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-funnel fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-funnel")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-gift fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-gift")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-git-branch fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-git-branch")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-git-commit fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-git-commit")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-git-compare fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-git-compare")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-git-merge fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-git-merge")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-git-network fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-git-network")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-git-pull-request fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-git-pull-request")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-glasses fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-glasses")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-globe fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-globe")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-grid fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-grid")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-hammer fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-hammer")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-hand fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-hand")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-happy fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-happy")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-headset fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-headset")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-heart fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-heart")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-heart-dislike fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-heart-dislike")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-heart-empty fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-heart-empty")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-heart-half fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-heart-half")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-help-buoy fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-help-buoy")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-help-circle-outline fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-help-circle-outline")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-help-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-help-circle")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-help fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-help")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-home fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-home")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-hourglass fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-hourglass")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-ice-cream fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-ice-cream")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-image fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-image")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-images fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-images")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-infinite fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-infinite")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-information-circle-outline fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-information-circle-outline")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-information-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-information-circle")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-information fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-information")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-jet fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-jet")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-journal fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-journal")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-key fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-key")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-keypad fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-keypad")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-laptop fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-laptop")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-leaf fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-leaf")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-link fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-link")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-list-box fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-list-box")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-list fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-list")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-locate fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-locate")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-lock fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-lock")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-log-in fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-log-in")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-log-out fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-log-out")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-magnet fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-magnet")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-mail-open fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-mail-open")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-mail-unread fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-mail-unread")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-mail fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-mail")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-male fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-male")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-man fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-man")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-map fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-map")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-medal fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-medal")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-medical fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-medical")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-medkit fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-medkit")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-megaphone fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-megaphone")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-menu fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-menu")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-mic-off fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-mic-off")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-mic fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-mic")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-microphone fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-microphone")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-moon fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-moon")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-more fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-more")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-move fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-move")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-musical-note fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-musical-note")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-musical-notes fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-musical-notes")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-navigate fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-navigate")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-notifications-off fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-notifications-off")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-notifications-outline fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-notifications-outline")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-notifications fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-notifications")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-nuclear fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-nuclear")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-nutrition fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-nutrition")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-open fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-open")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-options fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-options")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-outlet fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-outlet")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-paper-plane fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-paper-plane")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-paper fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-paper")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-partly-sunny fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-partly-sunny")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-pause fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-pause")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-paw fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-paw")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-people fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-people")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-person-add fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-person-add")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-person fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-person")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-phone-landscape fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-phone-landscape")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-phone-portrait fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-phone-portrait")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-photos fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-photos")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-pie fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-pie")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-pin fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-pin")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-pint fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-pint")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-pizza fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-pizza")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-planet fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-planet")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-play-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-play-circle")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-play fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-play")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-podium fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-podium")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-power fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-power")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-pricetag fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-pricetag")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-pricetags fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-pricetags")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-print fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-print")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-pulse fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-pulse")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-qr-scanner fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-qr-scanner")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-quote fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-quote")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-radio-button-off fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-radio-button-off")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-radio-button-on fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-radio-button-on")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-radio fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-radio")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-rainy fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-rainy")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-recording fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-recording")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-redo fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-redo")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-refresh-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-refresh-circle")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-refresh fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-refresh")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-remove-circle-outline fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-remove-circle-outline")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-remove-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-remove-circle")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-remove fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-remove")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-reorder fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-reorder")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-repeat fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-repeat")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-resize fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-resize")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-restaurant fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-restaurant")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-return-left fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-return-left")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-return-right fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-return-right")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-reverse-camera fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-reverse-camera")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-rewind fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-rewind")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-ribbon fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-ribbon")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-rocket fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-rocket")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-rose fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-rose")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-sad fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-sad")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-save fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-save")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-school fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-school")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-search fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-search")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-send fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-send")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-settings fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-settings")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-share-alt fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-share-alt")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-share fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-share")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-shirt fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-shirt")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-shuffle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-shuffle")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-skip-backward fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-skip-backward")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-skip-forward fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-skip-forward")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-snow fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-snow")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-speedometer fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-speedometer")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-square-outline fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-square-outline")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-square fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-square")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-star-half fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-star-half")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-star-outline fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-star-outline")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-star fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-star")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-stats fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-stats")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-stopwatch fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-stopwatch")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-subway fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-subway")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-sunny fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-sunny")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-swap fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-swap")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-switch fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-switch")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-sync fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-sync")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-tablet-landscape fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-tablet-landscape")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-tablet-portrait fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-tablet-portrait")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-tennisball fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-tennisball")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-text fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-text")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-thermometer fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-thermometer")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-thumbs-down fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-thumbs-down")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-thumbs-up fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-thumbs-up")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-thunderstorm fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-thunderstorm")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-time fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-time")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-timer fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-timer")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-today fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-today")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-train fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-train")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-transgender fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-transgender")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-trash fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-trash")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-trending-down fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-trending-down")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-trending-up fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-trending-up")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-trophy fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-trophy")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-tv fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-tv")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-umbrella fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-umbrella")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-undo fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-undo")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-unlock fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-unlock")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-videocam fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-videocam")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-volume-high fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-volume-high")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-volume-low fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-volume-low")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-volume-mute fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-volume-mute")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-volume-off fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-volume-off")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-wallet fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-wallet")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-walk fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-walk")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-warning fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-warning")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-watch fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-watch")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-water fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-water")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-wifi fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-wifi")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-wine fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-wine")
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                    [
                      _c("i", {
                        staticClass:
                          "ion ion-md-woman fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                      }),
                      _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                        _vm._v("ion-md-woman")
                      ])
                    ]
                  )
                ]
              )
            ],
            2
          ),
          _c(
            "b-tab",
            [
              _c("template", { slot: "title" }, [
                _c("i", { staticClass: "ion-logo-apple  fa-lg" }),
                _vm._v(" "),
                _c("span", { staticClass: "d-none d-lg-inline m-l-5" }, [
                  _vm._v("IOS style (317)")
                ])
              ]),
              _c("div", { staticClass: "row row-space-10" }, [
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-add-circle-outline fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-add-circle-outline")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-add-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-add-circle")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-add fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-add")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-airplane fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-airplane")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-alarm fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-alarm")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-albums fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-albums")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-alert fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-alert")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-american-football fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-american-football")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-analytics fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-analytics")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-aperture fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-aperture")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-apps fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-apps")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-appstore fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-appstore")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-archive fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-archive")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-arrow-back fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-arrow-back")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-arrow-down fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-arrow-down")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-arrow-dropdown-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-arrow-dropdown-circle")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-arrow-dropdown fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-arrow-dropdown")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-arrow-dropleft-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-arrow-dropleft-circle")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-arrow-dropleft fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-arrow-dropleft")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-arrow-dropright-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-arrow-dropright-circle")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-arrow-dropright fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-arrow-dropright")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-arrow-dropup-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-arrow-dropup-circle")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-arrow-dropup fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-arrow-dropup")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-arrow-forward fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-arrow-forward")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-arrow-round-back fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-arrow-round-back")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-arrow-round-down fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-arrow-round-down")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-arrow-round-forward fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-arrow-round-forward")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-arrow-round-up fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-arrow-round-up")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-arrow-up fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-arrow-up")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-at fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-at")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-attach fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-attach")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-backspace fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-backspace")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-barcode fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-barcode")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-baseball fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-baseball")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-basket fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-basket")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-basketball fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-basketball")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-battery-charging fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-battery-charging")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-battery-dead fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-battery-dead")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-battery-full fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-battery-full")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-beaker fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-beaker")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-bed fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-bed")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-beer fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-beer")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-bicycle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-bicycle")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-bluetooth fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-bluetooth")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-boat fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-boat")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-body fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-body")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-bonfire fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-bonfire")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-book fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-book")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-bookmark fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-bookmark")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-bookmarks fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-bookmarks")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-bowtie fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-bowtie")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-briefcase fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-briefcase")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-browsers fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-browsers")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-brush fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-brush")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-bug fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-bug")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-build fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-build")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-bulb fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-bulb")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-bus fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-bus")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-business fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-business")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-cafe fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-cafe")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-calculator fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-calculator")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-calendar fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-calendar")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-call fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-call")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-camera fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-camera")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-car fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-car")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-card fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-card")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-cart fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-cart")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-cash fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-cash")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-cellular fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-cellular")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-chatboxes fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-chatboxes")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-chatbubbles fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-chatbubbles")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-checkbox-outline fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-checkbox-outline")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-checkbox fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-checkbox")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-checkmark-circle-outline fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-checkmark-circle-outline")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-checkmark-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-checkmark-circle")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-checkmark fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-checkmark")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-clipboard fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-clipboard")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-clock fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-clock")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-close-circle-outline fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-close-circle-outline")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-close-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-close-circle")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-close fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-close")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-cloud-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-cloud-circle")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-cloud-done fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-cloud-done")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-cloud-download fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-cloud-download")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-cloud-outline fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-cloud-outline")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-cloud-upload fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-cloud-upload")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-cloud fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-cloud")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-cloudy-night fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-cloudy-night")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-cloudy fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-cloudy")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-code-download fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-code-download")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-code-working fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-code-working")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-code fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-code")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-cog fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-cog")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-color-fill fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-color-fill")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-color-filter fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-color-filter")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-color-palette fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-color-palette")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-color-wand fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-color-wand")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-compass fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-compass")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-construct fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-construct")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-contact fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-contact")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-contacts fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-contacts")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-contract fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-contract")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-contrast fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-contrast")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-copy fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-copy")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-create fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-create")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-crop fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-crop")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-cube fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-cube")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-cut fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-cut")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-desktop fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-desktop")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-disc fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-disc")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-document fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-document")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-done-all fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-done-all")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-download fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-download")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-easel fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-easel")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-egg fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-egg")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-exit fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-exit")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-expand fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-expand")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-eye-off fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-eye-off")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-eye fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-eye")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-fastforward fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-fastforward")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-female fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-female")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-filing fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-filing")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-film fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-film")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-finger-print fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-finger-print")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-fitness fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-fitness")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-flag fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-flag")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-flame fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-flame")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-flash-off fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-flash-off")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-flash fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-flash")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-flashlight fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-flashlight")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-flask fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-flask")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-flower fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-flower")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-folder-open fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-folder-open")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-folder fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-folder")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-football fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-football")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-funnel fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-funnel")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-gift fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-gift")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-git-branch fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-git-branch")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-git-commit fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-git-commit")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-git-compare fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-git-compare")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-git-merge fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-git-merge")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-git-network fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-git-network")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-git-pull-request fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-git-pull-request")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-glasses fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-glasses")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-globe fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-globe")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-grid fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-grid")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-hammer fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-hammer")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-hand fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-hand")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-happy fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-happy")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-headset fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-headset")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-heart fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-heart")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-heart-dislike fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-heart-dislike")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-heart-empty fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-heart-empty")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-heart-half fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-heart-half")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-help-buoy fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-help-buoy")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-help-circle-outline fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-help-circle-outline")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-help-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-help-circle")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-help fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-help")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-home fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-home")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-hourglass fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-hourglass")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-ice-cream fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-ice-cream")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-image fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-image")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-images fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-images")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-infinite fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-infinite")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-information-circle-outline fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-information-circle-outline")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-information-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-information-circle")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-information fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-information")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-jet fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-jet")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-journal fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-journal")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-key fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-key")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-keypad fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-keypad")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-laptop fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-laptop")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-leaf fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-leaf")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-link fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-link")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-list-box fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-list-box")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-list fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-list")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-locate fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-locate")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-lock fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-lock")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-log-in fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-log-in")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-log-out fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-log-out")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-magnet fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-magnet")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-mail-open fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-mail-open")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-mail-unread fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-mail-unread")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-mail fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-mail")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-male fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-male")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-man fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-man")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-map fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-map")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-medal fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-medal")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-medical fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-medical")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-medkit fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-medkit")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-megaphone fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-megaphone")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-menu fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-menu")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-mic-off fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-mic-off")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-mic fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-mic")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-microphone fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-microphone")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-moon fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-moon")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-more fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-more")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-move fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-move")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-musical-note fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-musical-note")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-musical-notes fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-musical-notes")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-navigate fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-navigate")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-notifications-off fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-notifications-off")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-notifications-outline fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-notifications-outline")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-notifications fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-notifications")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-nuclear fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-nuclear")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-nutrition fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-nutrition")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-open fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-open")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-options fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-options")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-outlet fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-outlet")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-paper-plane fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-paper-plane")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-paper fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-paper")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-partly-sunny fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-partly-sunny")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-pause fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-pause")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-paw fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-paw")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-people fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-people")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-person-add fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-person-add")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-person fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-person")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-phone-landscape fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-phone-landscape")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-phone-portrait fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-phone-portrait")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-photos fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-photos")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-pie fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-pie")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-pin fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-pin")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-pint fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-pint")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-pizza fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-pizza")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-planet fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-planet")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-play-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-play-circle")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-play fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-play")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-podium fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-podium")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-power fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-power")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-pricetag fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-pricetag")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-pricetags fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-pricetags")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-print fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-print")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-pulse fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-pulse")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-qr-scanner fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-qr-scanner")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-quote fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-quote")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-radio-button-off fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-radio-button-off")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-radio-button-on fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-radio-button-on")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-radio fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-radio")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-rainy fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-rainy")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-recording fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-recording")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-redo fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-redo")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-refresh-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-refresh-circle")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-refresh fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-refresh")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-remove-circle-outline fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-remove-circle-outline")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-remove-circle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-remove-circle")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-remove fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-remove")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-reorder fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-reorder")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-repeat fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-repeat")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-resize fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-resize")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-restaurant fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-restaurant")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-return-left fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-return-left")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-return-right fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-return-right")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-reverse-camera fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-reverse-camera")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-rewind fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-rewind")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-ribbon fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-ribbon")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-rocket fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-rocket")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-rose fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-rose")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-sad fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-sad")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-save fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-save")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-school fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-school")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-search fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-search")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-send fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-send")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-settings fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-settings")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-share-alt fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-share-alt")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-share fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-share")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-shirt fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-shirt")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-shuffle fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-shuffle")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-skip-backward fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-skip-backward")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-skip-forward fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-skip-forward")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-snow fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-snow")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-speedometer fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-speedometer")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-square-outline fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-square-outline")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-square fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-square")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-star-half fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-star-half")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-star-outline fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-star-outline")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-star fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-star")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-stats fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-stats")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-stopwatch fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-stopwatch")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-subway fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-subway")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-sunny fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-sunny")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-swap fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-swap")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-switch fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-switch")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-sync fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-sync")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-tablet-landscape fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-tablet-landscape")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-tablet-portrait fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-tablet-portrait")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-tennisball fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-tennisball")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-text fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-text")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-thermometer fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-thermometer")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-thumbs-down fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-thumbs-down")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-thumbs-up fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-thumbs-up")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-thunderstorm fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-thunderstorm")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-time fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-time")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-timer fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-timer")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-today fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-today")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-train fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-train")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-transgender fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-transgender")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-trash fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-trash")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-trending-down fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-trending-down")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-trending-up fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-trending-up")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-trophy fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-trophy")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-tv fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-tv")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-umbrella fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-umbrella")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-undo fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-undo")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-unlock fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-unlock")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-videocam fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-videocam")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-volume-high fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-volume-high")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-volume-low fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-volume-low")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-volume-mute fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-volume-mute")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-volume-off fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-volume-off")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-wallet fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-wallet")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-walk fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-walk")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-warning fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-warning")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-watch fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-watch")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-water fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-water")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-wifi fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-wifi")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-wine fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-wine")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-ios-woman fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-ios-woman")
                    ])
                  ]
                )
              ])
            ],
            2
          ),
          _c(
            "b-tab",
            [
              _c("template", { slot: "title" }, [
                _c("i", { staticClass: "ion-logo-ionic fa-lg text-blue" }),
                _vm._v(" "),
                _c("span", { staticClass: "d-none d-lg-inline m-l-5" }, [
                  _vm._v("Logos (62)")
                ])
              ]),
              _c("div", { staticClass: "row row-space-10" }, [
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-android fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-android")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-angular fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-angular")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-apple fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-apple")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-bitbucket fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-bitbucket")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-bitcoin fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-bitcoin")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-buffer fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-buffer")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-chrome fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-chrome")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-closed-captioning fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-closed-captioning")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-codepen fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-codepen")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-css3 fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-css3")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-designernews fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-designernews")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-dribbble fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-dribbble")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-dropbox fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-dropbox")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-euro fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-euro")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-facebook fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-facebook")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-flickr fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-flickr")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-foursquare fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-foursquare")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-freebsd-devil fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-freebsd-devil")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-game-controller-a fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-game-controller-a")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-game-controller-b fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-game-controller-b")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-github fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-github")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-google fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-google")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-googleplus fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-googleplus")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-hackernews fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-hackernews")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-html5 fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-html5")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-instagram fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-instagram")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-ionic fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-ionic")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-ionitron fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-ionitron")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-javascript fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-javascript")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-linkedin fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-linkedin")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-markdown fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-markdown")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-model-s fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-model-s")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-no-smoking fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-no-smoking")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-nodejs fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-nodejs")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-npm fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-npm")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-octocat fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-octocat")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-pinterest fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-pinterest")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-playstation fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-playstation")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-polymer fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-polymer")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-python fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-python")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-reddit fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-reddit")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-rss fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-rss")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-sass fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-sass")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-skype fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-skype")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-slack fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-slack")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-snapchat fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-snapchat")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-steam fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-steam")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-tumblr fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-tumblr")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-tux fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-tux")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-twitch fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-twitch")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-twitter fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-twitter")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-usd fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-usd")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-vimeo fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-vimeo")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-vk fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-vk")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-whatsapp fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-whatsapp")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-windows fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-windows")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-wordpress fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-wordpress")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-xbox fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-xbox")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-xing fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-xing")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-yahoo fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-yahoo")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-yen fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion-logo-yen")
                    ])
                  ]
                ),
                _c(
                  "div",
                  { staticClass: "col-lg-2 col-sm-4 col-6 p-t-5 p-b-5" },
                  [
                    _c("i", {
                      staticClass:
                        "ion ion-logo-youtube fa-2x fa-fw pull-left m-r-10 text-black-lighter"
                    }),
                    _c("p", { staticClass: "text-ellipsis m-b-0 m-t-3" }, [
                      _vm._v("ion ion-logo-youtube")
                    ])
                  ]
                )
              ])
            ],
            2
          )
        ],
        1
      )
    ],
    1
  )
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ol", { staticClass: "breadcrumb float-xl-right" }, [
      _c("li", { staticClass: "breadcrumb-item" }, [
        _c("a", { attrs: { href: "javascript:;" } }, [_vm._v("Home")])
      ]),
      _c("li", { staticClass: "breadcrumb-item" }, [
        _c("a", { attrs: { href: "javascript:;" } }, [_vm._v("UI Elements")])
      ]),
      _c("li", { staticClass: "breadcrumb-item active" }, [_vm._v("Ionicons")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("h1", { staticClass: "page-header" }, [
      _vm._v("Ionicons V4.0 "),
      _c("small", [_vm._v("bundle with 696 icons (android & ios icons)")])
    ])
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}