{"remainingRequest":"D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\vue-project\\template_vuejs\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vue-project\\template_vuejs\\src\\pages\\Widgets.vue?vue&type=template&id=399ada3b&","dependencies":[{"path":"D:\\vue-project\\template_vuejs\\src\\pages\\Widgets.vue","mtime":1564473452000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    [
      _vm._m(0),
      _vm._m(1),
      _c(
        "span",
        {
          staticClass:
            "btn-group pull-right m-l-20 p-1 bg-black-transparent-2 rounded"
        },
        [
          _c(
            "a",
            {
              staticClass: "btn btn-sm btn-white btn-white-without-border",
              class: { active: !_vm.inverseMode },
              attrs: { href: "javascript:;" },
              on: {
                click: function($event) {
                  $event.preventDefault()
                  return _vm.handleChangeWidgetTheme("light")
                }
              }
            },
            [
              _c("i", { staticClass: "fa fa-sun text-primary" }),
              _vm._v(" Light")
            ]
          ),
          _c(
            "a",
            {
              staticClass: "btn btn-sm btn-white btn-white-without-border",
              class: { active: _vm.inverseMode },
              attrs: { href: "javascript:;" },
              on: {
                click: function($event) {
                  $event.preventDefault()
                  return _vm.handleChangeWidgetTheme("inverse")
                }
              }
            },
            [_c("i", { staticClass: "fa fa-moon" }), _vm._v(" Dark")]
          )
        ]
      ),
      _vm._m(2),
      _c("div", { staticClass: "row row-space-30" }, [
        _c("div", { staticClass: "col-sm-6 col-xl-4" }, [
          _c("div", { staticClass: "m-b-10 f-s-10 m-t-10" }, [
            _c(
              "a",
              {
                directives: [
                  {
                    name: "b-modal",
                    rawName: "v-b-modal.modalWidgetList",
                    modifiers: { modalWidgetList: true }
                  }
                ],
                staticClass: "pull-right f-s-10 text-grey-darker m-r-3 f-w-700"
              },
              [_vm._v("source code")]
            ),
            _c("b", { staticClass: "text-inverse" }, [_vm._v("WIDGET LIST")])
          ]),
          _c(
            "div",
            {
              staticClass: "widget-list widget-list-rounded m-b-30",
              class: { "inverse-mode": _vm.inverseMode }
            },
            [
              _c("div", { staticClass: "widget-list-item" }, [
                _vm._m(3),
                _vm._m(4),
                _c(
                  "div",
                  { staticClass: "widget-list-action" },
                  [
                    _c(
                      "b-dropdown",
                      {
                        attrs: {
                          variant: "none",
                          "no-caret": true,
                          "toggle-class": "text-muted pull-right p-0 bg-none"
                        }
                      },
                      [
                        _c("template", { slot: "button-content" }, [
                          _c("i", { staticClass: "fa fa-ellipsis-h f-s-14" })
                        ]),
                        _c("b-dropdown-item", [_vm._v("Option 1")]),
                        _c("b-dropdown-item", [_vm._v("Option 2")]),
                        _c("b-dropdown-item", [_vm._v("Option 3")]),
                        _c("b-dropdown-divider"),
                        _c("b-dropdown-item", [_vm._v("Option 4")])
                      ],
                      2
                    )
                  ],
                  1
                )
              ]),
              _c("div", { staticClass: "widget-list-item" }, [
                _vm._m(5),
                _vm._m(6),
                _c(
                  "div",
                  { staticClass: "widget-list-action" },
                  [
                    _c(
                      "b-dropdown",
                      {
                        attrs: {
                          variant: "none",
                          "no-caret": true,
                          "toggle-class": "text-muted pull-right p-0 bg-none"
                        }
                      },
                      [
                        _c("template", { slot: "button-content" }, [
                          _c("i", { staticClass: "fa fa-ellipsis-h f-s-14" })
                        ]),
                        _c("b-dropdown-item", [_vm._v("Option 1")]),
                        _c("b-dropdown-item", [_vm._v("Option 2")]),
                        _c("b-dropdown-item", [_vm._v("Option 3")]),
                        _c("b-dropdown-divider"),
                        _c("b-dropdown-item", [_vm._v("Option 4")])
                      ],
                      2
                    )
                  ],
                  1
                )
              ]),
              _c("div", { staticClass: "widget-list-item" }, [
                _vm._m(7),
                _vm._m(8),
                _c(
                  "div",
                  { staticClass: "widget-list-action" },
                  [
                    _c(
                      "b-dropdown",
                      {
                        attrs: {
                          variant: "none",
                          "no-caret": true,
                          "toggle-class": "text-muted pull-right p-0 bg-none"
                        }
                      },
                      [
                        _c("template", { slot: "button-content" }, [
                          _c("i", { staticClass: "fa fa-ellipsis-h f-s-14" })
                        ]),
                        _c("b-dropdown-item", [_vm._v("Option 1")]),
                        _c("b-dropdown-item", [_vm._v("Option 2")]),
                        _c("b-dropdown-item", [_vm._v("Option 3")]),
                        _c("b-dropdown-divider"),
                        _c("b-dropdown-item", [_vm._v("Option 4")])
                      ],
                      2
                    )
                  ],
                  1
                )
              ])
            ]
          ),
          _c("div", { staticClass: "m-b-10 f-s-10 m-t-10" }, [
            _c(
              "a",
              {
                directives: [
                  {
                    name: "b-modal",
                    rawName: "v-b-modal.modalWidgetListWithIcon",
                    modifiers: { modalWidgetListWithIcon: true }
                  }
                ],
                staticClass: "pull-right f-s-10 text-grey-darker m-r-3 f-w-700"
              },
              [_vm._v("source code")]
            ),
            _c("b", { staticClass: "text-inverse" }, [
              _vm._v("WIDGET LIST WITH ICON")
            ])
          ]),
          _c(
            "div",
            {
              staticClass: "widget-list widget-list-rounded m-b-30",
              class: { "inverse-mode": _vm.inverseMode }
            },
            [_vm._m(9), _vm._m(10), _vm._m(11), _vm._m(12), _vm._m(13)]
          ),
          _c("div", { staticClass: "m-b-10 f-s-10 m-t-10" }, [
            _c(
              "a",
              {
                directives: [
                  {
                    name: "b-modal",
                    rawName: "v-b-modal.modalWidgetChatInput",
                    modifiers: { modalWidgetChatInput: true }
                  }
                ],
                staticClass: "pull-right f-s-10 text-grey-darker m-r-3 f-w-700"
              },
              [_vm._v("source code")]
            ),
            _c("b", { staticClass: "text-inverse" }, [_vm._v("WIDGET CHAT")])
          ]),
          _c(
            "div",
            {
              staticClass: "widget-chat widget-chat-rounded m-b-30",
              class: { "inverse-mode": _vm.inverseMode }
            },
            [
              _vm._m(14),
              _c(
                "vue-custom-scrollbar",
                {
                  staticClass: "widget-chat-body",
                  staticStyle: { height: "235px" }
                },
                [
                  _c(
                    "div",
                    { staticClass: "widget-chat-item with-media left" },
                    [
                      _c("div", { staticClass: "widget-chat-media" }, [
                        _c("img", {
                          attrs: { alt: "", src: "/assets/img/user/user-1.jpg" }
                        })
                      ]),
                      _c("div", { staticClass: "widget-chat-info" }, [
                        _c(
                          "div",
                          { staticClass: "widget-chat-info-container" },
                          [
                            _c(
                              "div",
                              { staticClass: "widget-chat-name text-indigo" },
                              [_vm._v("Hudson Mendes")]
                            ),
                            _c("div", { staticClass: "widget-chat-message" }, [
                              _vm._v(
                                "Should we plan for a company trip this year?"
                              )
                            ]),
                            _c("div", { staticClass: "widget-chat-time" }, [
                              _vm._v("6:00PM")
                            ])
                          ]
                        )
                      ])
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "widget-chat-item with-media left" },
                    [
                      _c("div", { staticClass: "widget-chat-media" }, [
                        _c("img", {
                          attrs: { alt: "", src: "/assets/img/user/user-2.jpg" }
                        })
                      ]),
                      _c("div", { staticClass: "widget-chat-info" }, [
                        _c(
                          "div",
                          { staticClass: "widget-chat-info-container" },
                          [
                            _c(
                              "div",
                              { staticClass: "widget-chat-name text-primary" },
                              [_vm._v("Sam Sugerman")]
                            ),
                            _c("div", { staticClass: "widget-chat-message" }, [
                              _vm._v("ok let's do it")
                            ]),
                            _c("div", { staticClass: "widget-chat-time" }, [
                              _vm._v("6:01PM")
                            ])
                          ]
                        )
                      ])
                    ]
                  ),
                  _c("div", { staticClass: "widget-chat-item right" }, [
                    _c("div", { staticClass: "widget-chat-info" }, [
                      _c("div", { staticClass: "widget-chat-info-container" }, [
                        _c("div", { staticClass: "widget-chat-message" }, [
                          _vm._v("i'm ok with it")
                        ]),
                        _c("div", { staticClass: "widget-chat-time" }, [
                          _vm._v("6:05PM")
                        ])
                      ])
                    ])
                  ]),
                  _c(
                    "div",
                    { staticClass: "text-center text-muted m-10 f-w-600" },
                    [_vm._v("Today")]
                  ),
                  _c(
                    "div",
                    { staticClass: "widget-chat-item with-media left" },
                    [
                      _c("div", { staticClass: "widget-chat-media" }, [
                        _c("img", {
                          attrs: { alt: "", src: "/assets/img/user/user-3.jpg" }
                        })
                      ]),
                      _c("div", { staticClass: "widget-chat-info" }, [
                        _c(
                          "div",
                          { staticClass: "widget-chat-info-container" },
                          [
                            _c(
                              "div",
                              { staticClass: "widget-chat-name text-orange" },
                              [_vm._v("Jaxon Allwood")]
                            ),
                            _c("div", { staticClass: "widget-chat-message" }, [
                              _vm._v(" Here is some images for New Zealand "),
                              _c(
                                "div",
                                { staticClass: "row row-space-2 m-t-5" },
                                [
                                  _c("div", { staticClass: "col-md-4" }, [
                                    _c(
                                      "a",
                                      {
                                        staticClass:
                                          "widget-card widget-card-sm square m-b-2",
                                        attrs: { href: "javascript:;" }
                                      },
                                      [
                                        _c("div", {
                                          staticClass: "widget-card-cover",
                                          staticStyle: {
                                            "background-image":
                                              "url(/assets/img/gallery/gallery-51-thumb.jpg)"
                                          }
                                        })
                                      ]
                                    ),
                                    _c(
                                      "a",
                                      {
                                        staticClass:
                                          "widget-card widget-card-sm square m-b-2",
                                        attrs: { href: "javascript:;" }
                                      },
                                      [
                                        _c("div", {
                                          staticClass: "widget-card-cover",
                                          staticStyle: {
                                            "background-image":
                                              "url(/assets/img/gallery/gallery-52-thumb.jpg)"
                                          }
                                        })
                                      ]
                                    )
                                  ]),
                                  _c("div", { staticClass: "col-md-4" }, [
                                    _c(
                                      "a",
                                      {
                                        staticClass:
                                          "widget-card widget-card-sm square m-b-2",
                                        attrs: { href: "javascript:;" }
                                      },
                                      [
                                        _c("div", {
                                          staticClass: "widget-card-cover",
                                          staticStyle: {
                                            "background-image":
                                              "url(/assets/img/gallery/gallery-53-thumb.jpg)"
                                          }
                                        })
                                      ]
                                    ),
                                    _c(
                                      "a",
                                      {
                                        staticClass:
                                          "widget-card widget-card-sm square m-b-2",
                                        attrs: { href: "javascript:;" }
                                      },
                                      [
                                        _c("div", {
                                          staticClass: "widget-card-cover",
                                          staticStyle: {
                                            "background-image":
                                              "url(/assets/img/gallery/gallery-54-thumb.jpg)"
                                          }
                                        })
                                      ]
                                    )
                                  ]),
                                  _c("div", { staticClass: "col-md-4" }, [
                                    _c(
                                      "a",
                                      {
                                        staticClass:
                                          "widget-card widget-card-sm square m-b-2",
                                        attrs: { href: "javascript:;" }
                                      },
                                      [
                                        _c("div", {
                                          staticClass: "widget-card-cover",
                                          staticStyle: {
                                            "background-image":
                                              "url(/assets/img/gallery/gallery-59-thumb.jpg)"
                                          }
                                        })
                                      ]
                                    ),
                                    _c(
                                      "a",
                                      {
                                        staticClass:
                                          "widget-card widget-card-sm square m-b-2",
                                        attrs: { href: "javascript:;" }
                                      },
                                      [
                                        _c("div", {
                                          staticClass: "widget-card-cover",
                                          staticStyle: {
                                            "background-image":
                                              "url(/assets/img/gallery/gallery-60-thumb.jpg)"
                                          }
                                        })
                                      ]
                                    )
                                  ])
                                ]
                              )
                            ]),
                            _c("div", { staticClass: "widget-chat-time" }, [
                              _vm._v("6:20PM")
                            ])
                          ]
                        )
                      ])
                    ]
                  )
                ]
              ),
              _vm._m(15)
            ],
            1
          ),
          _c("div", { staticClass: "m-b-10 f-s-10 m-t-10" }, [
            _c(
              "a",
              {
                directives: [
                  {
                    name: "b-modal",
                    rawName: "v-b-modal.modalWidgetTodolist",
                    modifiers: { modalWidgetTodolist: true }
                  }
                ],
                staticClass: "pull-right f-s-10 text-grey-darker m-r-3 f-w-700"
              },
              [_vm._v("source code")]
            ),
            _c("b", { staticClass: "text-inverse" }, [
              _vm._v("WIDGET TODOLIST")
            ])
          ]),
          _c(
            "div",
            {
              staticClass: "widget-todolist widget-todolist-rounded m-b-30",
              class: { "inverse-mode": _vm.inverseMode }
            },
            [_vm._m(16), _vm._m(17)]
          ),
          _c("div", { staticClass: "m-b-10 f-s-10 m-t-10" }, [
            _c(
              "a",
              {
                directives: [
                  {
                    name: "b-modal",
                    rawName: "v-b-modal.modalWidgetMap",
                    modifiers: { modalWidgetMap: true }
                  }
                ],
                staticClass: "pull-right f-s-10 text-grey-darker m-r-3 f-w-700"
              },
              [_vm._v("source code")]
            ),
            _c("b", { staticClass: "text-inverse" }, [_vm._v("WIDGET MAP")])
          ]),
          _c(
            "div",
            {
              staticClass: "widget-map widget-map-rounded m-b-30",
              class: { "inverse-mode": _vm.inverseMode }
            },
            [_vm._m(18), _vm._m(19), _vm._m(20)]
          )
        ]),
        _c("div", { staticClass: "col-sm-6 col-xl-8" }, [
          _c("div", { staticClass: "m-b-10 f-s-10 m-t-10" }, [
            _c(
              "a",
              {
                directives: [
                  {
                    name: "b-modal",
                    rawName: "v-b-modal.modalWidgetImgIcon",
                    modifiers: { modalWidgetImgIcon: true }
                  }
                ],
                staticClass: "pull-right f-s-10 text-grey-darker m-r-3 f-w-700"
              },
              [_vm._v("source code")]
            ),
            _c("b", { staticClass: "text-inverse" }, [
              _vm._v("WIDGET IMAGE / ICON")
            ])
          ]),
          _c("div", { staticClass: "row" }, [
            _c("div", { staticClass: "col-lg-6 m-b-30" }, [
              _vm._m(21),
              _c("div", { staticClass: "clearfix" }, [
                _c(
                  "div",
                  {
                    staticClass:
                      "widget-icon widget-icon-xl user rounded pull-left m-r-5 m-b-5",
                    class: {
                      "bg-inverse text-white-transparent-5": _vm.inverseMode,
                      "bg-grey text-white": !_vm.inverseMode
                    }
                  },
                  [_c("i", { staticClass: "fa fa-user" })]
                ),
                _c(
                  "div",
                  {
                    staticClass:
                      "widget-icon widget-icon-lg user rounded pull-left m-r-5 m-b-5",
                    class: {
                      "bg-inverse text-white-transparent-5": _vm.inverseMode,
                      "bg-grey text-white": !_vm.inverseMode
                    }
                  },
                  [_c("i", { staticClass: "fa fa-user" })]
                ),
                _c(
                  "div",
                  {
                    staticClass:
                      "widget-icon user rounded pull-left m-r-5 m-b-5 text-white",
                    class: {
                      "bg-inverse text-white-transparent-5": _vm.inverseMode,
                      "bg-grey text-white": !_vm.inverseMode
                    }
                  },
                  [_c("i", { staticClass: "fa fa-user" })]
                ),
                _c(
                  "div",
                  {
                    staticClass:
                      "widget-icon widget-icon-sm user rounded pull-left m-r-5 m-b-5",
                    class: {
                      "bg-inverse text-white-transparent-5": _vm.inverseMode,
                      "bg-grey text-white": !_vm.inverseMode
                    }
                  },
                  [_c("i", { staticClass: "fa fa-user" })]
                ),
                _c(
                  "div",
                  {
                    staticClass:
                      "widget-icon widget-icon-xs user rounded pull-left m-r-5 m-b-5",
                    class: {
                      "bg-inverse text-white-transparent-5": _vm.inverseMode,
                      "bg-grey text-white": !_vm.inverseMode
                    }
                  },
                  [_c("i", { staticClass: "fa fa-user" })]
                )
              ])
            ]),
            _vm._m(22)
          ]),
          _c("div", { staticClass: "m-b-10 f-s-10 m-t-10" }, [
            _c(
              "a",
              {
                directives: [
                  {
                    name: "b-modal",
                    rawName: "v-b-modal.modalWidgetCard",
                    modifiers: { modalWidgetCard: true }
                  }
                ],
                staticClass: "pull-right f-s-10 text-grey-darker m-r-3 f-w-700"
              },
              [_vm._v("source code")]
            ),
            _c("b", { staticClass: "text-inverse" }, [_vm._v("WIDGET CARD")])
          ]),
          _c("div", { staticClass: "row row-space-10" }, [
            _c("div", { staticClass: "col-lg-6" }, [
              _c(
                "a",
                {
                  staticClass: "widget-card widget-card-rounded m-b-20",
                  class: { "inverse-mode": _vm.inverseMode },
                  attrs: { href: "javascript:;" }
                },
                [
                  _c("div", {
                    staticClass: "widget-card-cover",
                    staticStyle: {
                      "background-image":
                        "url(/assets/img/gallery/gallery-portrait-11-thumb.jpg)"
                    }
                  }),
                  _vm._m(23),
                  _vm._m(24)
                ]
              )
            ]),
            _c("div", { staticClass: "col-lg-6" }, [
              _c(
                "a",
                {
                  staticClass: "widget-card widget-card-rounded m-b-20",
                  class: { "inverse-mode": _vm.inverseMode },
                  attrs: { href: "javascript:;" }
                },
                [
                  _c("div", { staticClass: "widget-card-cover" }),
                  _c("div", { staticClass: "widget-card-content" }, [
                    _c(
                      "h5",
                      {
                        staticClass: "f-s-12",
                        class: {
                          "text-white-transparent-7": _vm.inverseMode,
                          "text-black-transparent-7": !_vm.inverseMode
                        }
                      },
                      [_c("b", [_vm._v("MAKING A DIFFERENCE")])]
                    ),
                    _vm._m(25),
                    _c("i", { staticClass: "fa fa-heartbeat fa-5x text-pink" })
                  ]),
                  _c("div", { staticClass: "widget-card-content bottom" }, [
                    _c(
                      "b",
                      {
                        class: {
                          "text-white-transparent-7": _vm.inverseMode,
                          "text-black-transparent-7": !_vm.inverseMode
                        }
                      },
                      [_vm._v("Opt in and help heart research.")]
                    )
                  ])
                ]
              )
            ])
          ]),
          _c("div", { staticClass: "m-b-10 f-s-10 m-t-10" }, [
            _c(
              "a",
              {
                directives: [
                  {
                    name: "b-modal",
                    rawName: "v-b-modal.modalWidgetCardSquare",
                    modifiers: { modalWidgetCardSquare: true }
                  }
                ],
                staticClass: "pull-right f-s-10 text-grey-darker m-r-3 f-w-700"
              },
              [_vm._v("source code")]
            ),
            _c("b", { staticClass: "text-inverse" }, [
              _vm._v("WIDGET CARD SQUARE")
            ])
          ]),
          _vm._m(26),
          _c("div", { staticClass: "m-b-10 f-s-10 m-t-10" }, [
            _c(
              "a",
              {
                directives: [
                  {
                    name: "b-modal",
                    rawName: "v-b-modal.modalWidgetStat",
                    modifiers: { modalWidgetStat: true }
                  }
                ],
                staticClass: "pull-right f-s-10 text-grey-darker m-r-3 f-w-700"
              },
              [_vm._v("source code")]
            ),
            _c("b", { staticClass: "text-inverse" }, [_vm._v("WIDGET STAT")])
          ]),
          _vm._m(27),
          _c("div", { staticClass: "m-b-10 f-s-10 m-t-10" }, [
            _c(
              "a",
              {
                directives: [
                  {
                    name: "b-modal",
                    rawName: "v-b-modal.modalWidgetChart",
                    modifiers: { modalWidgetChart: true }
                  }
                ],
                staticClass: "pull-right f-s-10 text-grey-darker m-r-3 f-w-700"
              },
              [_vm._v("source code")]
            ),
            _c("b", { staticClass: "text-inverse" }, [_vm._v("WIDGET CHART")])
          ]),
          _c(
            "div",
            {
              staticClass: "widget widget-rounded m-b-30",
              class: { "inverse-mode": _vm.inverseMode }
            },
            [
              _vm._m(28),
              _c(
                "div",
                { staticClass: "vertical-box with-grid with-border-top" },
                [
                  _c(
                    "div",
                    { staticClass: "vertical-box-column widget-chart-content" },
                    [
                      _c(
                        "div",
                        { staticClass: "nv-stacked-area-chart height-full" },
                        [
                          _c("vn-stacked-area", {
                            attrs: {
                              model: _vm.stackedAreaChart.data,
                              yFormat: ",.4f",
                              height: _vm.stackedAreaChart.height,
                              xFormat: _vm.formatDate,
                              clipEdge: _vm.stackedAreaChart.clipEdge,
                              rightAlignYAxis:
                                _vm.stackedAreaChart.rightAlignYAxis,
                              showControls: _vm.stackedAreaChart.showControls
                            }
                          })
                        ],
                        1
                      )
                    ]
                  ),
                  _vm._m(29)
                ]
              )
            ]
          ),
          _c("div", { staticClass: "m-b-10 f-s-10 m-t-10" }, [
            _c(
              "a",
              {
                directives: [
                  {
                    name: "b-modal",
                    rawName: "v-b-modal.modalWidgetTable",
                    modifiers: { modalWidgetTable: true }
                  }
                ],
                staticClass: "pull-right f-s-10 text-grey-darker m-r-3 f-w-700"
              },
              [_vm._v("source code")]
            ),
            _c("b", { staticClass: "text-inverse" }, [_vm._v("WIDGET TABLE")])
          ]),
          _c("div", { staticClass: "table-responsive" }, [
            _c(
              "table",
              {
                staticClass:
                  "table table-bordered widget-table widget-table-rounded",
                class: { "inverse-mode": _vm.inverseMode }
              },
              [
                _vm._m(30),
                _c("tbody", [
                  _c("tr", [
                    _vm._m(31),
                    _c("td", [
                      _c("h4", { staticClass: "widget-table-title" }, [
                        _vm._v("Mavic Pro Combo")
                      ]),
                      _c("p", { staticClass: "widget-table-desc m-b-15" }, [
                        _vm._v(
                          "Portable yet powerful, the Mavic Pro is your personal drone, ready to go with you everywhere."
                        )
                      ]),
                      _vm._m(32),
                      _c("div", { staticClass: "clearfix f-s-10" }, [
                        _vm._v(" status: "),
                        _c(
                          "b",
                          {
                            class: {
                              "text-white": _vm.inverseMode,
                              "text-inverse": !_vm.inverseMode
                            }
                          },
                          [_vm._v("Shipped")]
                        )
                      ])
                    ]),
                    _c("td", { staticClass: "text-nowrap" }, [
                      _c(
                        "b",
                        {
                          class: {
                            "text-white": _vm.inverseMode,
                            "text-inverse": !_vm.inverseMode
                          }
                        },
                        [_vm._v("$999")]
                      ),
                      _c("br"),
                      _c(
                        "small",
                        {
                          staticClass: "text-line-through",
                          class: {
                            "text-white": _vm.inverseMode,
                            "text-inverse": !_vm.inverseMode
                          }
                        },
                        [_vm._v("$1,202")]
                      )
                    ]),
                    _c("td", [_vm._v("1")]),
                    _c("td", [_vm._v("999.00")]),
                    _c("td", [
                      _c(
                        "a",
                        {
                          staticClass: "btn btn-sm width-80 rounded-corner",
                          class: {
                            "btn-default": _vm.inverseMode,
                            "btn-inverse": !_vm.inverseMode
                          },
                          attrs: { href: "javascript:;" }
                        },
                        [_vm._v("Edit")]
                      )
                    ])
                  ]),
                  _c("tr", [
                    _vm._m(33),
                    _c("td", [
                      _c("h4", { staticClass: "widget-table-title" }, [
                        _vm._v("Inspire 2")
                      ]),
                      _c("p", { staticClass: "widget-table-desc m-b-15" }, [
                        _vm._v("Cinematic aerial performance for filmmakers.")
                      ]),
                      _vm._m(34),
                      _c("div", { staticClass: "clearfix f-s-10" }, [
                        _vm._v(" status: "),
                        _c(
                          "b",
                          {
                            class: {
                              "text-white": _vm.inverseMode,
                              "text-inverse": !_vm.inverseMode
                            }
                          },
                          [_vm._v("received")]
                        )
                      ])
                    ]),
                    _c("td", { staticClass: "text-nowrap" }, [
                      _c(
                        "b",
                        {
                          class: {
                            "text-white": _vm.inverseMode,
                            "text-inverse": !_vm.inverseMode
                          }
                        },
                        [_vm._v("$999")]
                      ),
                      _c("br"),
                      _c(
                        "small",
                        {
                          staticClass: "text-line-through",
                          class: {
                            "text-white": _vm.inverseMode,
                            "text-inverse": !_vm.inverseMode
                          }
                        },
                        [_vm._v("$1,202")]
                      )
                    ]),
                    _c("td", [_vm._v("1")]),
                    _c("td", [_vm._v("999.00")]),
                    _c("td", [
                      _c(
                        "a",
                        {
                          staticClass: "btn btn-sm width-80 rounded-corner",
                          class: {
                            "btn-default": _vm.inverseMode,
                            "btn-inverse": !_vm.inverseMode
                          },
                          attrs: { href: "javascript:;" }
                        },
                        [_vm._v("Edit")]
                      )
                    ])
                  ])
                ])
              ]
            )
          ])
        ])
      ]),
      _c(
        "b-modal",
        {
          attrs: {
            id: "modalWidgetMap",
            size: "lg",
            title: "Widget Map",
            "body-class": "p-0",
            "cancel-variant": "default"
          }
        },
        [
          _c(
            "div",
            {
              directives: [{ name: "highlight", rawName: "v-highlight" }],
              staticClass: "hljs-wrapper m-b-0"
            },
            [
              _c("pre", { staticClass: "m-b-0" }, [
                _c("code", { staticClass: "html" }, [
                  _vm._v(
                    '<!-- begin widget-map -->\n<div class="widget-map widget-map-rounded">\n  <!-- begin widget-input-container -->\n  <div class="widget-input-container">\n    <div class="widget-input-icon"><a href="javascript:;" class="text-inverse"><i class="fa fa-ellipsis-v"></i></a></div>\n    <div class="widget-input-box">\n      <input type="text" class="form-control form-control-sm" placeholder="Search here">\n    </div>\n    <div class="widget-input-icon"><a href="javascript:;" class="text-inverse"><i class="fa fa-microphone"></i></a></div>\n    <div class="widget-input-divider"></div>\n    <div class="widget-input-icon"><a href="javascript:;"><i class="fa fa-location-arrow"></i></a></div>\n  </div>\n  <!-- end widget-input-container -->\n  <!-- begin widget-map-body -->\n  <div class="widget-map-body">\n    <iframe src="-- googlemap embed url here --" width="100%" height="230" frameborder="0" style="border:0" allowfullscreen></iframe>\n  </div>\n  <!-- end widget-map-body -->\n  <!-- begin widget-map-list -->\n  <div class="widget-map-list">\n    <div class="widget-list widget-list-rounded m-b-30">\n      <!-- begin widget-list-item -->\n      <div class="widget-list-item">\n        <div class="widget-list-media text-center">\n          <a href="javascript:;"><i class="fab fa-twitter fa-3x"></i></a>\n        </div>\n        <div class="widget-list-content">\n          <h4 class="widget-list-title">Twitter Headquater</h4>\n          <p class="widget-list-desc">Corporate Office</p>\n        </div>\n        <div class="widget-list-action">\n          <a href="javascript:;" data-toggle="dropdown" class="text-muted pull-right"><i class="fa fa-angle-right fa-2x"></i></a>\n        </div>\n      </div>\n      <!-- end widget-list-item -->\n    </div>\n  </div>\n  <!-- end widget-map-list -->\n</div>\n<!-- begin widget-map -->'
                  )
                ])
              ])
            ]
          )
        ]
      ),
      _c(
        "b-modal",
        {
          attrs: {
            id: "modalWidgetTodolist",
            size: "lg",
            title: "Widget Todolist",
            "body-class": "p-0",
            "cancel-variant": "default"
          }
        },
        [
          _c(
            "div",
            {
              directives: [{ name: "highlight", rawName: "v-highlight" }],
              staticClass: "hljs-wrapper m-b-0"
            },
            [
              _c("pre", { staticClass: "m-b-0" }, [
                _c(
                  "code",
                  {
                    staticClass: "html",
                    attrs: { id: "source-widget-todolist" }
                  },
                  [
                    _vm._v(
                      '<!-- begin widget-todolist -->\n<div class="widget-todolist widget-todolist-rounded">\n  <!-- begin widget-todolist-header -->\n  <div class="widget-todolist-header">\n    <div class="widget-todolist-header-left">\n      <h4 class="widget-todolist-header-title">Todolist</h4>\n    </div>\n    <div class="widget-todolist-header-right">\n      <div class="widget-todolist-header-total">\n        <span class="text-inverse">0</span>\n        <small>Done</small>\n      </div>\n    </div>\n  </div>\n  <!-- end widget-todolist-header -->\n  \n  <!-- begin widget-todolist-body -->\n  <div class="widget-todolist-body">\n    <!-- begin widget-todolist-item -->\n    <div class="widget-todolist-item">\n      <div class="widget-todolist-input">\n        <div class="checkbox checkbox-css">\n          <input type="checkbox" id="widget_todolist_1" />\n          <label for="widget_todolist_1" class="p-l-15"></label>\n        </div>\n      </div>\n      <div class="widget-todolist-content">\n        <h4 class="widget-todolist-title">Borrow Tony\'s travel guide</h4>\n        <p class="widget-todolist-desc">Vacation in Rome</p>\n      </div>\n      <div class="widget-todolist-icon">\n        <a href="javascript:;"><i class="fa fa-question-circle"></i></a>\n      </div>\n    </div>\n    <!-- end widget-todolist-item -->\n    ...\n    <!-- begin widget-todolist-item -->\n    <div class="widget-todolist-item">\n      <div class="widget-todolist-input">\n        <i class="fa fa-plus text-muted"></i>\n      </div>\n      <div class="widget-todolist-content">\n        <input type="text" class="form-control" placeholder="Write your task here..." />\n      </div>\n    </div>\n    <!-- end widget-todolist-item -->\n  </div>\n  <!-- end widget-todolist-body -->\n</div>\n<!-- end widget-todolist -->'
                    )
                  ]
                )
              ])
            ]
          )
        ]
      ),
      _c(
        "b-modal",
        {
          attrs: {
            id: "modalWidgetChatInput",
            size: "lg",
            title: "Widget Chat & Input",
            "body-class": "p-0",
            "cancel-variant": "default"
          }
        },
        [
          _c(
            "div",
            {
              directives: [{ name: "highlight", rawName: "v-highlight" }],
              staticClass: "hljs-wrapper m-b-0"
            },
            [
              _c("pre", { staticClass: "m-b-0" }, [
                _c(
                  "code",
                  {
                    staticClass: "html",
                    attrs: { id: "source-widget-chat-input" }
                  },
                  [
                    _vm._v(
                      '<!-- begin widget-chat -->\n<div class="widget-chat widget-chat-rounded">\n  <!-- begin widget-chat-header -->\n  <div class="widget-chat-header">\n    <div class="widget-chat-header-icon">\n      <i class="fab fa-earlybirds width-30 height-30 f-s-20 bg-yellow text-inverse text-center rounded-corner" style="line-height: 30px"></i>\n    </div>\n    <div class="widget-chat-header-content">\n      <h4 class="widget-chat-header-title">Company Discussion Group</h4>\n      <p class="widget-chat-header-desc">55 members, 4 online</p>\n    </div>\n  </div>\n  <!-- end widget-chat-header -->\n  \n  <!-- begin widget-chat-body -->\n  <div class="widget-chat-body" data-scrollbar="true" data-height="235px">\n    <div class="text-center text-muted m-10 f-w-600">Today</div>\n    <div class="widget-chat-item with-media left">\n      <div class="widget-chat-media">\n        <img alt="" src="../assets/img/user/user-1.jpg" />\n      </div>\n      <div class="widget-chat-info">\n        <div class="widget-chat-info-container">\n          <div class="widget-chat-name text-indigo">Hudson Mendes</div>\n          <div class="widget-chat-message">Should we plan for a company trip this year?</div>\n          <div class="widget-chat-time">6:00PM</div>\n        </div>\n      </div>\n    </div>\n    <div class="widget-chat-item right">\n      ...\n    </div>\n  </div>\n  <!-- end widget-chat-body -->\n  \n  <!-- begin widget-input -->\n  <div class="widget-input widget-input-rounded">\n    <form action="" method="POST" name="">\n      <div class="widget-input-container">\n        <div class="widget-input-icon"><a href="javascript:;" class="text-grey"><i class="fa fa-camera"></i></a></div>\n        <div class="widget-input-box">\n          <input type="text" class="form-control form-control-sm" placeholder="Write a message..." />\n        </div>\n        <div class="widget-input-icon"><a href="javascript:;" class="text-grey"><i class="fa fa-smile"></i></a></div>\n        <div class="widget-input-divider"></div>\n        <div class="widget-input-icon"><a href="javascript:;" class="text-grey"><i class="fa fa-microphone"></i></a></div>\n      </div>\n    </form>\n  </div>\n  <!-- end widget-input -->\n</div>\n<!-- end widget-chat -->'
                    )
                  ]
                )
              ])
            ]
          )
        ]
      ),
      _c(
        "b-modal",
        {
          attrs: {
            id: "modalWidgetList",
            size: "lg",
            title: "Widget List",
            "body-class": "p-0",
            "cancel-variant": "default"
          }
        },
        [
          _c(
            "div",
            {
              directives: [{ name: "highlight", rawName: "v-highlight" }],
              staticClass: "hljs-wrapper m-b-0"
            },
            [
              _c("pre", { staticClass: "m-b-0" }, [
                _c(
                  "code",
                  { staticClass: "html", attrs: { id: "source-widget-list" } },
                  [
                    _vm._v(
                      '<!-- begin widget-list -->\n<div class="widget-list widget-list-rounded m-b-30">\n  <!-- begin widget-list-item -->\n  <div class="widget-list-item">\n    <div class="widget-list-media">\n      <img src="../assets/img/user/user-1.jpg" class="rounded" />\n    </div>\n    <div class="widget-list-content">\n      <h4 class="widget-list-title">Christopher Struth</h4>\n      <p class="widget-list-desc">Bank Transfer</p>\n    </div>\n    <div class="widget-list-action">\n      <a href="javascript:;" data-toggle="dropdown" class="text-muted pull-right">\n        <i class="fa fa-ellipsis-h f-s-14"></i>\n      </a>\n      <ul class="dropdown-menu dropdown-menu-right">\n        ...\n      </ul>\n    </div>\n  </div>\n  <!-- end widget-list-item -->\n</div>\n<!-- end widget-list -->'
                    )
                  ]
                )
              ])
            ]
          )
        ]
      ),
      _c(
        "b-modal",
        {
          attrs: {
            id: "modalWidgetListWithIcon",
            size: "lg",
            title: "Widget List with Icon",
            "body-class": "p-0",
            "cancel-variant": "default"
          }
        },
        [
          _c(
            "div",
            {
              directives: [{ name: "highlight", rawName: "v-highlight" }],
              staticClass: "hljs-wrapper m-b-0"
            },
            [
              _c("pre", { staticClass: "m-b-0" }, [
                _c(
                  "code",
                  {
                    staticClass: "html",
                    attrs: { id: "source-widget-list-with-icon" }
                  },
                  [
                    _vm._v(
                      '<!-- begin widget-list -->\n<div class="widget-list widget-list-rounded">\n  <!-- begin widget-list-item -->\n  <a href="javascript:;" class="widget-list-item">\n    <div class="widget-list-media icon">\n      <i class="fa fa-link bg-yellow text-inverse"></i>\n    </div>\n    <div class="widget-list-content">\n      <h4 class="widget-list-title">Personal Hotspot</h4>\n    </div>\n    <div class="widget-list-action text-nowrap text-grey-darker text-right">\n      Off\n      <i class="fa fa-angle-right text-muted t-plus-1 fa-lg m-l-5"></i>\n    </div>\n  </a>\n  <!-- end widget-list-item -->\n  ...\n</div>\n<!-- end widget-list -->'
                    )
                  ]
                )
              ])
            ]
          )
        ]
      ),
      _c(
        "b-modal",
        {
          attrs: {
            id: "modalWidgetImgIcon",
            size: "lg",
            title: "Widget Image / Icon",
            "body-class": "p-0",
            "cancel-variant": "default"
          }
        },
        [
          _c(
            "div",
            {
              directives: [{ name: "highlight", rawName: "v-highlight" }],
              staticClass: "hljs-wrapper m-b-0"
            },
            [
              _c("pre", { staticClass: "m-b-0" }, [
                _c(
                  "code",
                  {
                    staticClass: "html",
                    attrs: { id: "source-widget-img-icon" }
                  },
                  [
                    _vm._v(
                      '<!-- begin widget-icon -->\n<div class="widget-icon rounded bg-success text-white">\n  <i class="fab fa-android"></i>\n</div>\n<!-- end widget-icon -->\n\n<!-- begin user widget-icon -->\n<div class="widget-icon rounded bg-grey text-white user">\n  <i class="fa fa-user"></i>\n</div>\n<!-- end user widget-icon -->\n\n<!-- begin widget-icon-sizes -->\n<div class="widget-icon widget-icon-xl"></div>\n<div class="widget-icon widget-icon-lg"></div>\n<div class="widget-icon"></div>\n<div class="widget-icon widget-icon-sm"></div>\n<div class="widget-icon widget-icon-xs"></div>\n<!-- end widget-icon-sizes -->\n\n<!-- begin widget-img -->\n<div class="widget-img rounded bg-inverse" style="background-image: url(../assets/img/gallery/gallery-11-thumb.jpg)">\n</div>\n<!-- end widget-img -->\n\n<!-- begin widget-img-sizes -->\n<div class="widget-img widget-img-xl"></div>\n<div class="widget-img widget-img-lg"></div>\n<div class="widget-img"></div>\n<div class="widget-img widget-img-sm"></div>\n<div class="widget-img widget-img-xs"></div>\n<!-- end widget-img-sizes -->'
                    )
                  ]
                )
              ])
            ]
          )
        ]
      ),
      _c(
        "b-modal",
        {
          attrs: {
            id: "modalWidgetCard",
            size: "lg",
            title: "Widget List Card",
            "body-class": "p-0",
            "cancel-variant": "default"
          }
        },
        [
          _c(
            "div",
            {
              directives: [{ name: "highlight", rawName: "v-highlight" }],
              staticClass: "hljs-wrapper m-b-0"
            },
            [
              _c("pre", { staticClass: "m-b-0" }, [
                _c(
                  "code",
                  { staticClass: "html", attrs: { id: "source-widget-card" } },
                  [
                    _vm._v(
                      '<!-- begin widget-card -->\n<a href="javascript:;" class="widget-card widget-card-rounded">\n  <div class="widget-card-cover" style="background-image: url(../assets/img/gallery/gallery-portrait-11-thumb.jpg)"></div>\n  <div class="widget-card-content">\n    <b class="text-white">Download and get free trial.</b>\n  </div>\n  <div class="widget-card-content bottom">\n    <i class="fab fa-pushed fa-5x text-indigo"></i>\n    <h4 class="text-white m-t-10"><b>Apple Draw<br /> Photo Booth</b></h4>\n    <h5 class="f-s-12 text-white-transparent-7 m-b-2"><b>EASILY DRAW ON PHOTOS</b></h5>\n  </div>\n</a>\n<!-- end widget-card -->'
                    )
                  ]
                )
              ])
            ]
          )
        ]
      ),
      _c(
        "b-modal",
        {
          attrs: {
            id: "modalWidgetCardSquare",
            size: "lg",
            title: "Widget List Card Square",
            "body-class": "p-0",
            "cancel-variant": "default"
          }
        },
        [
          _c(
            "div",
            {
              directives: [{ name: "highlight", rawName: "v-highlight" }],
              staticClass: "hljs-wrapper m-b-0"
            },
            [
              _c("pre", { staticClass: "m-b-0" }, [
                _c(
                  "code",
                  {
                    staticClass: "html",
                    attrs: { id: "source-widget-card-square" }
                  },
                  [
                    _vm._v(
                      '<!-- begin widget-card-square -->\n<a href="javascript:;" class="widget-card widget-card-rounded square m-b-5">\n  <div class="widget-card-cover" style="background-image: url(../assets/img/login-bg/login-bg-10.jpg)">\n    <div class="vertical-box vertical-box-widget">\n      <div class="vertical-box-column valign-middle text-center">\n        <div class="text-white f-s-14"><b>PORTRAITS OF</b></div>\n        <div class="text-white-transparent-8 f-w-600">2017</div>\n      </div>\n    </div>\n  </div>\n</a>\n<div class="f-s-12 f-w-700 text-black p-t-2">Memory 2017</div>\n<div class="f-s-10 f-w-600 text-black-lighter m-b-15">1,239</div>\n<!-- end widget-card-square -->'
                    )
                  ]
                )
              ])
            ]
          )
        ]
      ),
      _c(
        "b-modal",
        {
          attrs: {
            id: "modalWidgetStat",
            size: "lg",
            title: "Widget Stat",
            "body-class": "p-0",
            "cancel-variant": "default"
          }
        },
        [
          _c(
            "div",
            {
              directives: [{ name: "highlight", rawName: "v-highlight" }],
              staticClass: "hljs-wrapper m-b-0"
            },
            [
              _c("pre", { staticClass: "m-b-0" }, [
                _c(
                  "code",
                  { staticClass: "html", attrs: { id: "source-widget-stat" } },
                  [
                    _vm._v(
                      '<!-- begin widget-stats -->\n<div class="widget widget-stats bg-gradient-teal m-b-10">\n  <div class="stats-icon stats-icon-lg"><i class="fa fa-globe fa-fw"></i></div>\n  <div class="stats-content">\n    <div class="stats-title">TODAY\'S VISITS</div>\n    <div class="stats-number">7,842,900</div>\n    <div class="stats-progress progress">\n      <div class="progress-bar" style="width: 70.1%;"></div>\n    </div>\n    <div class="stats-desc">Better than last week (70.1%)</div>\n  </div>\n</div>\n<!-- end widget-stats -->'
                    )
                  ]
                )
              ])
            ]
          )
        ]
      ),
      _c(
        "b-modal",
        {
          attrs: {
            id: "modalWidgetChart",
            size: "lg",
            title: "Widget Chart",
            "body-class": "p-0",
            "cancel-variant": "default"
          }
        },
        [
          _c(
            "div",
            {
              directives: [{ name: "highlight", rawName: "v-highlight" }],
              staticClass: "hljs-wrapper m-b-0"
            },
            [
              _c("pre", { staticClass: "m-b-0" }, [
                _c(
                  "code",
                  { staticClass: "html", attrs: { id: "source-widget-chart" } },
                  [
                    _vm._v(
                      '<!-- begin widget-chart -->\n<div class="widget widget-rounded">\n  <div class="widget-header">\n    <h4 class="widget-header-title">Audience Overview</h4>\n    <div class="widget-header-icon"><a href="javascript:;" class="text-muted"><i class="fa fa-fw fa-upload"></i></a></div>\n    <div class="widget-header-icon"><a href="javascript:;" class="text-muted"><i class="fa fa-fw fa-cog"></i></a></div>\n  </div>\n  <div class="vertical-box with-grid with-border-top">\n    <div class="vertical-box-column widget-chart-content">\n      <div id="nv-stacked-area-chart" style="height: 108%"></div>\n    </div>\n    <div class="vertical-box-column p-15" style="width: 30%;">\n      <div class="widget-chart-info">\n        <h4 class="widget-chart-info-title">Total sales</h4>\n        <p class="widget-chart-info-desc">Lorem ipsum dolor sit consectetur adipiscing elit.</p>\n        <div class="widget-chart-info-progress">\n          <b>Monthly Plan</b>\n          <span class="pull-right">70%</span>\n        </div>\n        <div class="progress progress-sm">\n          <div class="progress-bar progress-bar-striped progress-bar-animated rounded-corner" style="width:70%;"></div>\n        </div>\n      </div>\n      <hr />\n      <div class="widget-chart-info">\n        <h4 class="widget-chart-info-title">Task progress</h4>\n        <p class="widget-chart-info-desc">Vestibulum sollicitudin in lectus a cursus.</p>\n        <div class="widget-chart-info-progress">\n          <b>Marketing Research</b>\n          <span class="pull-right">74%</span>\n        </div>\n        <div class="progress progress-sm m-b-15">\n          <div class="progress-bar progress-bar-striped progress-bar-animated rounded-corner bg-indigo" style="width: 74%"></div>\n        </div>\n        <div class="widget-chart-info-progress">\n          <b>Mobile App Development</b>\n          <span class="pull-right">25%</span>\n        </div>\n        <div class="progress progress-sm m-b-15">\n          <div class="progress-bar progress-bar-striped progress-bar-animated rounded-corner bg-green" style="width: 25%"></div>\n        </div>\n        <div class="widget-chart-info-progress">\n          <b>Website Redesign</b>\n          <span class="pull-right">95%</span>\n        </div>\n        <div class="progress progress-sm">\n          <div class="progress-bar progress-bar-striped progress-bar-animated rounded-corner bg-orange" style="width: 95%"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<!-- end widget-chart -->'
                    )
                  ]
                )
              ])
            ]
          )
        ]
      ),
      _c(
        "b-modal",
        {
          attrs: {
            id: "modalWidgetTable",
            size: "lg",
            title: "Widget Table",
            "body-class": "p-0",
            "cancel-variant": "default"
          }
        },
        [
          _c(
            "div",
            {
              directives: [{ name: "highlight", rawName: "v-highlight" }],
              staticClass: "hljs-wrapper m-b-0"
            },
            [
              _c("pre", { staticClass: "m-b-0" }, [
                _c(
                  "code",
                  { staticClass: "html", attrs: { id: "source-widget-table" } },
                  [
                    _vm._v(
                      '<!-- begin widget-table -->\n<table class="table table-bordered widget-table widget-table-rounded">\n  <thead>\n    <tr>\n      <th width="1%">Image</th>\n      <th>Product Info</th>\n      <th>Price</th>\n      <th>Qty</th>\n      <th>Total</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <div class="widget-table-img" style="background-image: url(../assets/img/product/product-6.png);"></div>\n      </td>\n      <td>\n        <h4 class="widget-table-title">Mavic Pro Combo</h4>\n        <p class="widget-table-desc m-b-15">Portable yet powerful, the Mavic Pro is your personal drone, ready to go with you everywhere.</p>\n        <div class="progress progress-sm rounded-corner m-b-5">\n          <div class="progress-bar progress-bar-striped progress-bar-animated bg-orange f-s-10 f-w-600" style="width: 30%;">30%</div>\n        </div>\n        <div class="clearfix f-s-10">\n          status: <b class="'
                    ),
                    _c(
                      "span",
                      {
                        staticClass: "hljs-string",
                        attrs: {
                          "data-id": "widget-doc",
                          "data-dark-doc": "text-white",
                          "data-light-doc": "text-inverse"
                        }
                      },
                      [_vm._v("text-inverse")]
                    ),
                    _vm._v(
                      '">Shipped</b>\n        </div>\n      </td>\n      <td class="text-nowrap">\n        <b class="'
                    ),
                    _c(
                      "span",
                      {
                        staticClass: "hljs-string",
                        attrs: {
                          "data-id": "widget-doc",
                          "data-dark-doc": "text-white",
                          "data-light-doc": "text-inverse"
                        }
                      },
                      [_vm._v("text-inverse")]
                    ),
                    _vm._v('">$999</b><br />\n        <small class="'),
                    _c(
                      "span",
                      {
                        staticClass: "hljs-string",
                        attrs: {
                          "data-id": "widget-doc",
                          "data-dark-doc": "text-white",
                          "data-light-doc": "text-inverse"
                        }
                      },
                      [_vm._v("text-inverse")]
                    ),
                    _vm._v(
                      ' text-line-through">$1,202</small>\n      </td>\n      <td>1</td>\n      <td>999.00</td>\n      <td><a href="javascript:;" class="btn '
                    ),
                    _c(
                      "span",
                      {
                        staticClass: "hljs-string",
                        attrs: {
                          "data-id": "widget-doc",
                          "data-dark-doc": "btn-default",
                          "data-light-doc": "btn-inverse"
                        }
                      },
                      [_vm._v("btn-inverse")]
                    ),
                    _vm._v(
                      ' btn-sm width-80 rounded-corner">Edit</a></td>\n    </tr>\n  </tbody>\n</table>\n<!-- end widget-table -->'
                    )
                  ]
                )
              ])
            ]
          )
        ]
      )
    ],
    1
  )
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ol", { staticClass: "breadcrumb pull-right" }, [
      _c("li", { staticClass: "breadcrumb-item" }, [
        _c("a", { attrs: { href: "javascript:;" } }, [_vm._v("Home")])
      ]),
      _c("li", { staticClass: "breadcrumb-item active" }, [_vm._v("Widgets")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("h1", { staticClass: "page-header" }, [
      _vm._v(" Widgets "),
      _c("small", [_vm._v("header small text goes here...")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "m-b-20" }, [
      _vm._v(
        " All the widgets is reusable and responsive. You may use the predefined css to configure the padding, margin or background. Besides that, all the widgets have light and dark version. Kindly add the "
      ),
      _c("code", [_vm._v(".inverse-mode")]),
      _vm._v(" to the widget will change it to the dark version. ")
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-list-media" }, [
      _c("img", {
        staticClass: "rounded",
        attrs: { src: "/assets/img/user/user-12.jpg", alt: "" }
      })
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-list-content" }, [
      _c("h4", { staticClass: "widget-list-title" }, [
        _vm._v("Christopher Struth")
      ]),
      _c("p", { staticClass: "widget-list-desc" }, [_vm._v("Bank Transfer")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-list-media" }, [
      _c("img", {
        staticClass: "rounded",
        attrs: { src: "/assets/img/user/user-13.jpg", alt: "" }
      })
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-list-content" }, [
      _c("h4", { staticClass: "widget-list-title" }, [_vm._v("Janie Flowers")]),
      _c("p", { staticClass: "widget-list-desc" }, [_vm._v("Bank Transfer")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-list-media" }, [
      _c("img", {
        staticClass: "rounded",
        attrs: { src: "/assets/img/user/user-14.jpg", alt: "" }
      })
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-list-content" }, [
      _c("h4", { staticClass: "widget-list-title" }, [_vm._v("Janie Flowers")]),
      _c("p", { staticClass: "widget-list-desc" }, [_vm._v("Bank Transfer")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "a",
      { staticClass: "widget-list-item", attrs: { href: "javascript:;" } },
      [
        _c("div", { staticClass: "widget-list-media icon" }, [
          _c("i", { staticClass: "fa fa-plane bg-inverse text-white" })
        ]),
        _c("div", { staticClass: "widget-list-content" }, [
          _c("h4", { staticClass: "widget-list-title" }, [
            _vm._v("Airplane Mode")
          ])
        ]),
        _c("div", { staticClass: "widget-list-action text-right" }, [
          _c("i", { staticClass: "fa fa-angle-right fa-lg text-muted" })
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "a",
      { staticClass: "widget-list-item", attrs: { href: "javascript:;" } },
      [
        _c("div", { staticClass: "widget-list-media icon" }, [
          _c("i", { staticClass: "fa fa-wifi bg-inverse text-white" })
        ]),
        _c("div", { staticClass: "widget-list-content" }, [
          _c("h4", { staticClass: "widget-list-title" }, [_vm._v("Wi-Fi")])
        ]),
        _c(
          "div",
          { staticClass: "widget-list-action text-nowrap text-grey-darker" },
          [
            _vm._v(" Connected "),
            _c("i", {
              staticClass: "fa fa-angle-right fa-lg m-l-5 text-muted t-plus-1"
            })
          ]
        )
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "a",
      { staticClass: "widget-list-item", attrs: { href: "javascript:;" } },
      [
        _c("div", { staticClass: "widget-list-media icon" }, [
          _c("i", { staticClass: "fab fa-bluetooth bg-indigo text-white" })
        ]),
        _c("div", { staticClass: "widget-list-content" }, [
          _c("h4", { staticClass: "widget-list-title" }, [_vm._v("Bluetooth")])
        ]),
        _c(
          "div",
          { staticClass: "widget-list-action text-nowrap text-grey-darker" },
          [
            _vm._v(" On "),
            _c("i", {
              staticClass: "fa fa-angle-right text-muted t-plus-1 fa-lg m-l-5"
            })
          ]
        )
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "a",
      { staticClass: "widget-list-item", attrs: { href: "javascript:;" } },
      [
        _c("div", { staticClass: "widget-list-media icon" }, [
          _c("i", { staticClass: "fa fa-signal bg-pink text-white" })
        ]),
        _c("div", { staticClass: "widget-list-content" }, [
          _c("h4", { staticClass: "widget-list-title" }, [_vm._v("Cellular")])
        ]),
        _c(
          "div",
          { staticClass: "widget-list-action text-grey-darker text-right" },
          [
            _c("i", {
              staticClass: "fa fa-angle-right text-muted t-plus-1 fa-lg"
            })
          ]
        )
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "a",
      { staticClass: "widget-list-item", attrs: { href: "javascript:;" } },
      [
        _c("div", { staticClass: "widget-list-media icon" }, [
          _c("i", { staticClass: "fa fa-link bg-yellow text-inverse" })
        ]),
        _c("div", { staticClass: "widget-list-content" }, [
          _c("h4", { staticClass: "widget-list-title" }, [
            _vm._v("Personal Hotspot")
          ])
        ]),
        _c(
          "div",
          {
            staticClass:
              "widget-list-action text-nowrap text-grey-darker text-right"
          },
          [
            _vm._v(" Off "),
            _c("i", {
              staticClass: "fa fa-angle-right text-muted t-plus-1 fa-lg m-l-5"
            })
          ]
        )
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-chat-header" }, [
      _c("div", { staticClass: "widget-chat-header-icon" }, [
        _c("i", {
          staticClass:
            "fab fa-earlybirds width-30 height-30 f-s-20 bg-yellow text-inverse text-center rounded-corner",
          staticStyle: { "line-height": "30px" }
        })
      ]),
      _c("div", { staticClass: "widget-chat-header-content" }, [
        _c("h4", { staticClass: "widget-chat-header-title" }, [
          _vm._v("Company Discussion Group")
        ]),
        _c("p", { staticClass: "widget-chat-header-desc" }, [
          _vm._v("55 members, 4 online")
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-input widget-input-rounded" }, [
      _c("form", { attrs: { action: "", method: "POST", name: "" } }, [
        _c("div", { staticClass: "widget-input-container" }, [
          _c("div", { staticClass: "widget-input-icon" }, [
            _c(
              "a",
              { staticClass: "text-grey", attrs: { href: "javascript:;" } },
              [_c("i", { staticClass: "fa fa-camera" })]
            )
          ]),
          _c("div", { staticClass: "widget-input-box" }, [
            _c("input", {
              staticClass: "form-control form-control-sm",
              attrs: { type: "text", placeholder: "Write a message..." }
            })
          ]),
          _c("div", { staticClass: "widget-input-icon" }, [
            _c(
              "a",
              { staticClass: "text-grey", attrs: { href: "javascript:;" } },
              [_c("i", { staticClass: "fa fa-smile" })]
            )
          ]),
          _c("div", { staticClass: "widget-input-divider" }),
          _c("div", { staticClass: "widget-input-icon" }, [
            _c(
              "a",
              { staticClass: "text-grey", attrs: { href: "javascript:;" } },
              [_c("i", { staticClass: "fa fa-microphone" })]
            )
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-todolist-header" }, [
      _c("div", { staticClass: "widget-todolist-header-left" }, [
        _c("h4", { staticClass: "widget-todolist-header-title" }, [
          _vm._v("Todolist")
        ])
      ]),
      _c("div", { staticClass: "widget-todolist-header-right" }, [
        _c("div", { staticClass: "widget-todolist-header-total" }, [
          _c("span", [_vm._v("0")]),
          _c("small", [_vm._v("Done")])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-todolist-body" }, [
      _c("div", { staticClass: "widget-todolist-item" }, [
        _c("div", { staticClass: "widget-todolist-input" }, [
          _c("div", { staticClass: "checkbox checkbox-css" }, [
            _c("input", {
              attrs: { type: "checkbox", id: "widget_todolist_1" }
            }),
            _c("label", {
              staticClass: "p-l-15",
              attrs: { for: "widget_todolist_1" }
            })
          ])
        ]),
        _c("div", { staticClass: "widget-todolist-content" }, [
          _c("h4", { staticClass: "widget-todolist-title" }, [
            _vm._v("Borrow Tony's travel guide")
          ]),
          _c("p", { staticClass: "widget-todolist-desc" }, [
            _vm._v("Vacation in Rome")
          ])
        ]),
        _c("div", { staticClass: "widget-todolist-icon" }, [
          _c("a", { attrs: { href: "javascript:;" } }, [
            _c("i", { staticClass: "fa fa-question-circle" })
          ])
        ])
      ]),
      _c("div", { staticClass: "widget-todolist-item" }, [
        _c("div", { staticClass: "widget-todolist-input" }, [
          _c("div", { staticClass: "checkbox checkbox-css" }, [
            _c("input", {
              attrs: { type: "checkbox", id: "widget_todolist_2" }
            }),
            _c("label", {
              staticClass: "p-l-15",
              attrs: { for: "widget_todolist_2" }
            })
          ])
        ]),
        _c("div", { staticClass: "widget-todolist-content" }, [
          _c("h4", { staticClass: "widget-todolist-title" }, [
            _vm._v("Finish expense report")
          ]),
          _c("p", { staticClass: "widget-todolist-desc" }, [
            _vm._v("Today, 4:00PM, Daily")
          ])
        ]),
        _c("div", { staticClass: "widget-todolist-icon" }, [
          _c("a", { attrs: { href: "javascript:;" } }, [
            _c("i", { staticClass: "fa fa-question-circle" })
          ])
        ])
      ]),
      _c("div", { staticClass: "widget-todolist-item" }, [
        _c("div", { staticClass: "widget-todolist-input" }, [
          _c("div", { staticClass: "checkbox checkbox-css" }, [
            _c("input", {
              attrs: { type: "checkbox", id: "widget_todolist_3" }
            }),
            _c("label", {
              staticClass: "p-l-15",
              attrs: { for: "widget_todolist_3" }
            })
          ])
        ]),
        _c("div", { staticClass: "widget-todolist-content" }, [
          _c("h4", { staticClass: "widget-todolist-title" }, [
            _vm._v("Confirm conference call for Wednesday")
          ]),
          _c("p", { staticClass: "widget-todolist-desc" }, [_vm._v("Work")])
        ]),
        _c("div", { staticClass: "widget-todolist-icon" }, [
          _c("a", { attrs: { href: "javascript:;" } }, [
            _c("i", { staticClass: "fa fa-question-circle" })
          ])
        ])
      ]),
      _c("div", { staticClass: "widget-todolist-item" }, [
        _c("div", { staticClass: "widget-todolist-input" }, [
          _c("div", { staticClass: "checkbox checkbox-css" }, [
            _c("input", {
              attrs: { type: "checkbox", id: "widget_todolist_4" }
            }),
            _c("label", {
              staticClass: "p-l-15",
              attrs: { for: "widget_todolist_4" }
            })
          ])
        ]),
        _c("div", { staticClass: "widget-todolist-content" }, [
          _c("h4", { staticClass: "widget-todolist-title" }, [
            _c("b", { staticClass: "text-warning" }, [_vm._v("!!")]),
            _vm._v(" Mobile App WIP Presentation")
          ]),
          _c("p", { staticClass: "widget-todolist-desc" }, [
            _vm._v("Today, 12:00PM")
          ])
        ]),
        _c("div", { staticClass: "widget-todolist-icon" }, [
          _c("a", { attrs: { href: "javascript:;" } }, [
            _c("i", { staticClass: "fa fa-question-circle" })
          ])
        ])
      ]),
      _c("div", { staticClass: "widget-todolist-item" }, [
        _c("div", { staticClass: "widget-todolist-input" }, [
          _c("i", { staticClass: "fa fa-plus text-muted" })
        ]),
        _c("div", { staticClass: "widget-todolist-content" }, [
          _c("input", {
            staticClass: "form-control",
            attrs: { type: "text", placeholder: "Write your task here..." }
          })
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-input-container" }, [
      _c("div", { staticClass: "widget-input-icon" }, [
        _c(
          "a",
          {
            staticClass: "text-inverse",
            attrs: {
              href: "javascript:;",
              "data-id": "widget-elm",
              "data-light-class": "text-inverse",
              "data-dark-class": "text-white"
            }
          },
          [_c("i", { staticClass: "fa fa-ellipsis-v" })]
        )
      ]),
      _c("div", { staticClass: "widget-input-box" }, [
        _c("input", {
          staticClass: "form-control form-control-sm",
          attrs: { type: "text", placeholder: "Search here" }
        })
      ]),
      _c("div", { staticClass: "widget-input-icon" }, [
        _c(
          "a",
          {
            staticClass: "text-inverse",
            attrs: {
              href: "javascript:;",
              "data-id": "widget-elm",
              "data-light-class": "text-inverse",
              "data-dark-class": "text-white"
            }
          },
          [_c("i", { staticClass: "fa fa-microphone" })]
        )
      ]),
      _c("div", { staticClass: "widget-input-divider" }),
      _c("div", { staticClass: "widget-input-icon" }, [
        _c("a", { attrs: { href: "javascript:;" } }, [
          _c("i", { staticClass: "fa fa-location-arrow" })
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-map-body" }, [
      _c("iframe", {
        staticStyle: { border: "0" },
        attrs: {
          src:
            "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3153.5650178360584!2d-122.41879278478642!3d37.77679637975903!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x8085809c6c8f4459%3A0xb10ed6d9b5050fa5!2sTwitter+HQ!5e0!3m2!1sen!2smy!4v1524046379645",
          width: "100%",
          height: "230",
          frameborder: "0",
          allowfullscreen: ""
        }
      })
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-map-list" }, [
      _c("div", { staticClass: "widget-list widget-list-rounded m-b-30" }, [
        _c("div", { staticClass: "widget-list-item" }, [
          _c("div", { staticClass: "widget-list-media text-center" }, [
            _c("a", { attrs: { href: "javascript:;" } }, [
              _c("i", { staticClass: "fab fa-twitter fa-3x" })
            ])
          ]),
          _c("div", { staticClass: "widget-list-content" }, [
            _c("h4", { staticClass: "widget-list-title" }, [
              _vm._v("Twitter Headquater")
            ]),
            _c("p", { staticClass: "widget-list-desc" }, [
              _vm._v("Corporate Office")
            ])
          ]),
          _c("div", { staticClass: "widget-list-action" }, [
            _c(
              "a",
              {
                staticClass: "text-muted pull-right",
                attrs: { href: "#", "data-toggle": "dropdown" }
              },
              [_c("i", { staticClass: "fa fa-angle-right fa-2x" })]
            )
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "clearfix" }, [
      _c(
        "div",
        {
          staticClass:
            "widget-icon rounded bg-indigo pull-left m-r-5 m-b-5 text-white"
        },
        [_c("i", { staticClass: "fab fa-digital-ocean" })]
      ),
      _c(
        "div",
        {
          staticClass:
            "widget-icon rounded bg-primary pull-left m-r-5 m-b-5 text-white"
        },
        [_c("i", { staticClass: "fab fa-twitter" })]
      ),
      _c(
        "div",
        {
          staticClass:
            "widget-icon rounded bg-success pull-left m-r-5 m-b-5 text-white"
        },
        [_c("i", { staticClass: "fab fa-android" })]
      ),
      _c(
        "div",
        {
          staticClass:
            "widget-icon rounded bg-warning pull-left m-r-5 m-b-5 text-white"
        },
        [_c("i", { staticClass: "fab fa-firefox" })]
      ),
      _c(
        "div",
        {
          staticClass:
            "widget-icon rounded bg-danger pull-left m-r-5 m-b-5 text-white"
        },
        [_c("i", { staticClass: "fab fa-google-plus-g" })]
      ),
      _c(
        "div",
        {
          staticClass:
            "widget-icon rounded bg-pink pull-left m-r-5 m-b-5 text-white"
        },
        [_c("i", { staticClass: "fab fa-pinterest" })]
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-lg-6 m-b-30" }, [
      _c("div", { staticClass: "pull-left" }, [
        _c("div", {
          staticClass: "widget-img rounded bg-inverse pull-left m-r-5 m-b-5",
          staticStyle: {
            "background-image": "url(/assets/img/gallery/gallery-11-thumb.jpg)"
          }
        }),
        _c("div", {
          staticClass: "widget-img rounded bg-inverse pull-left m-r-5 m-b-5",
          staticStyle: {
            "background-image": "url(/assets/img/gallery/gallery-12-thumb.jpg)"
          }
        }),
        _c("div", {
          staticClass: "widget-img rounded bg-inverse pull-left m-r-5 m-b-5",
          staticStyle: {
            "background-image": "url(/assets/img/gallery/gallery-13-thumb.jpg)"
          }
        }),
        _c("div", {
          staticClass: "widget-img rounded bg-inverse pull-left m-r-5 m-b-5",
          staticStyle: {
            "background-image": "url(/assets/img/gallery/gallery-14-thumb.jpg)"
          }
        }),
        _c("div", {
          staticClass: "widget-img rounded bg-inverse pull-left m-r-5 m-b-5",
          staticStyle: {
            "background-image": "url(/assets/img/gallery/gallery-15-thumb.jpg)"
          }
        }),
        _c("div", {
          staticClass: "widget-img rounded bg-inverse pull-left m-r-5 m-b-5",
          staticStyle: {
            "background-image": "url(/assets/img/gallery/gallery-16-thumb.jpg)"
          }
        }),
        _c("br"),
        _c("div", {
          staticClass:
            "widget-img widget-img-xl rounded bg-inverse pull-left m-r-5 m-b-5",
          staticStyle: {
            "background-image": "url(/assets/img/gallery/gallery-21-thumb.jpg)"
          }
        }),
        _c("div", {
          staticClass:
            "widget-img widget-img-lg rounded bg-inverse pull-left m-r-5 m-b-5",
          staticStyle: {
            "background-image": "url(/assets/img/gallery/gallery-22-thumb.jpg)"
          }
        }),
        _c("div", {
          staticClass:
            "widget-img widget-img rounded bg-inverse pull-left m-r-5 m-b-5",
          staticStyle: {
            "background-image": "url(/assets/img/gallery/gallery-23-thumb.jpg)"
          }
        }),
        _c("div", {
          staticClass:
            "widget-img widget-img-sm rounded bg-inverse pull-left m-r-5 m-b-5",
          staticStyle: {
            "background-image": "url(/assets/img/gallery/gallery-24-thumb.jpg)"
          }
        }),
        _c("div", {
          staticClass:
            "widget-img widget-img-xs rounded bg-inverse pull-left m-r-5 m-b-5",
          staticStyle: {
            "background-image": "url(/assets/img/gallery/gallery-25-thumb.jpg)"
          }
        })
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-card-content" }, [
      _c("b", { staticClass: "text-white" }, [
        _vm._v("Download and get free trial.")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-card-content bottom" }, [
      _c("i", { staticClass: "fab fa-pushed fa-5x text-indigo" }),
      _c("h4", { staticClass: "text-white m-t-10" }, [
        _c("b", [_vm._v("Apple Draw"), _c("br"), _vm._v(" Photo Booth")])
      ]),
      _c("h5", { staticClass: "f-s-12 text-white-transparent-7 m-b-2" }, [
        _c("b", [_vm._v("EASILY DRAW ON PHOTOS")])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("h4", { staticClass: "m-b-10" }, [
      _c("b", [_vm._v("Apple Heart"), _c("br"), _vm._v(" Study App")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row row-space-10" }, [
      _c("div", { staticClass: "col-lg-3 col-md-6" }, [
        _c("div", { staticClass: "row row-space-2 m-b-5" }, [
          _c("div", { staticClass: "col-6" }, [
            _c(
              "a",
              {
                staticClass: "widget-card widget-card-rounded square m-b-2",
                attrs: { href: "javascript:;" }
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/login-bg/login-bg-1-thumb.jpg)"
                  }
                })
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card widget-card-rounded square m-b-2",
                attrs: { href: "javascript:;" }
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/login-bg/login-bg-2-thumb.jpg)"
                  }
                })
              ]
            )
          ]),
          _c("div", { staticClass: "col-6" }, [
            _c(
              "a",
              {
                staticClass: "widget-card widget-card-rounded square m-b-2",
                attrs: { href: "javascript:;" }
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/login-bg/login-bg-3-thumb.jpg)"
                  }
                })
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card widget-card-rounded square m-b-2",
                attrs: { href: "javascript:;" }
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/login-bg/login-bg-4-thumb.jpg)"
                  }
                })
              ]
            )
          ])
        ]),
        _c("div", { staticClass: "f-s-12 f-w-700 text-black" }, [
          _vm._v("Camera Roll")
        ]),
        _c("div", { staticClass: "f-s-10 f-w-600 text-black-lighter m-b-15" }, [
          _vm._v("2,711")
        ])
      ]),
      _c("div", { staticClass: "col-lg-3 col-md-6" }, [
        _c(
          "a",
          {
            staticClass: "widget-card widget-card-rounded square m-b-5",
            attrs: { href: "javascript:;" }
          },
          [
            _c(
              "div",
              {
                staticClass: "widget-card-cover",
                staticStyle: {
                  "background-image":
                    "url(/assets/img/login-bg/login-bg-7-thumb.jpg)"
                }
              },
              [
                _c("span", { staticClass: "widget-card-cover-icon" }, [
                  _c("i", { staticClass: "fa fa-play" })
                ])
              ]
            )
          ]
        ),
        _c("div", { staticClass: "f-s-12 f-w-700 text-black p-t-2" }, [
          _vm._v("Videos")
        ]),
        _c("div", { staticClass: "f-s-10 f-w-600 text-black-lighter m-b-15" }, [
          _vm._v("31")
        ])
      ]),
      _c("div", { staticClass: "col-lg-3 col-md-6" }, [
        _c(
          "a",
          {
            staticClass: "widget-card widget-card-rounded square m-b-5",
            attrs: { href: "javascript:;" }
          },
          [
            _c(
              "div",
              {
                staticClass: "widget-card-cover",
                staticStyle: {
                  "background-image":
                    "url(/assets/img/login-bg/login-bg-10-thumb.jpg)"
                }
              },
              [
                _c("div", { staticClass: "vertical-box vertical-box-widget" }, [
                  _c(
                    "div",
                    {
                      staticClass:
                        "vertical-box-column valign-middle text-center"
                    },
                    [
                      _c("div", { staticClass: "text-white f-s-14" }, [
                        _c("b", [_vm._v("PORTRAITS OF")])
                      ]),
                      _c(
                        "div",
                        { staticClass: "text-white-transparent-8 f-w-600" },
                        [_vm._v("2017")]
                      )
                    ]
                  )
                ])
              ]
            )
          ]
        ),
        _c("div", { staticClass: "f-s-12 f-w-700 text-black p-t-2" }, [
          _vm._v("Memory 2017")
        ]),
        _c("div", { staticClass: "f-s-10 f-w-600 text-black-lighter m-b-15" }, [
          _vm._v("1,239")
        ])
      ]),
      _c("div", { staticClass: "col-lg-3 col-md-6" }, [
        _c("div", { staticClass: "row row-space-2 m-b-5" }, [
          _c("div", { staticClass: "col-3" }, [
            _c(
              "a",
              {
                staticClass: "widget-card widget-card-rounded square m-b-2",
                attrs: { href: "javascript:;" }
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-1-thumb.jpg)"
                  }
                })
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card widget-card-rounded square m-b-2",
                attrs: { href: "javascript:;" }
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-2-thumb.jpg)"
                  }
                })
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card widget-card-rounded square m-b-2",
                attrs: { href: "javascript:;" }
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-3-thumb.jpg)"
                  }
                })
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card widget-card-rounded square m-b-2",
                attrs: { href: "javascript:;" }
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-4-thumb.jpg)"
                  }
                })
              ]
            )
          ]),
          _c("div", { staticClass: "col-3" }, [
            _c(
              "a",
              {
                staticClass: "widget-card widget-card-rounded square m-b-2",
                attrs: { href: "javascript:;" }
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-5-thumb.jpg)"
                  }
                })
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card widget-card-rounded square m-b-2",
                attrs: { href: "javascript:;" }
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-6-thumb.jpg)"
                  }
                })
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card widget-card-rounded square m-b-2",
                attrs: { href: "javascript:;" }
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-7-thumb.jpg)"
                  }
                })
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card widget-card-rounded square m-b-2",
                attrs: { href: "javascript:;" }
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-8-thumb.jpg)"
                  }
                })
              ]
            )
          ]),
          _c("div", { staticClass: "col-3" }, [
            _c(
              "a",
              {
                staticClass: "widget-card widget-card-rounded square m-b-2",
                attrs: { href: "javascript:;" }
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-9-thumb.jpg)"
                  }
                })
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card widget-card-rounded square m-b-2",
                attrs: { href: "javascript:;" }
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-10-thumb.jpg)"
                  }
                })
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card widget-card-rounded square m-b-2",
                attrs: { href: "javascript:;" }
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-11-thumb.jpg)"
                  }
                })
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card widget-card-rounded square m-b-2",
                attrs: { href: "javascript:;" }
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-12-thumb.jpg)"
                  }
                })
              ]
            )
          ]),
          _c("div", { staticClass: "col-3" }, [
            _c(
              "a",
              {
                staticClass: "widget-card widget-card-rounded square m-b-2",
                attrs: { href: "javascript:;" }
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-13-thumb.jpg)"
                  }
                })
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card widget-card-rounded square m-b-2",
                attrs: { href: "javascript:;" }
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-14-thumb.jpg)"
                  }
                })
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card widget-card-rounded square m-b-2",
                attrs: { href: "javascript:;" }
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-15-thumb.jpg)"
                  }
                })
              ]
            ),
            _c(
              "a",
              {
                staticClass: "widget-card widget-card-rounded square m-b-2",
                attrs: { href: "javascript:;" }
              },
              [
                _c("div", {
                  staticClass: "widget-card-cover",
                  staticStyle: {
                    "background-image":
                      "url(/assets/img/gallery/gallery-16-thumb.jpg)"
                  }
                })
              ]
            )
          ])
        ]),
        _c("div", { staticClass: "f-s-12 f-w-700 text-black" }, [
          _vm._v("Albums")
        ]),
        _c("div", { staticClass: "f-s-10 f-w-600 text-black-lighter m-b-15" }, [
          _vm._v("8")
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row row-space-10 m-b-20" }, [
      _c("div", { staticClass: "col-lg-4" }, [
        _c(
          "div",
          { staticClass: "widget widget-stats bg-gradient-teal m-b-10" },
          [
            _c("div", { staticClass: "stats-icon stats-icon-lg" }, [
              _c("i", { staticClass: "fa fa-globe fa-fw" })
            ]),
            _c("div", { staticClass: "stats-content" }, [
              _c("div", { staticClass: "stats-title" }, [
                _vm._v("TODAY'S VISITS")
              ]),
              _c("div", { staticClass: "stats-number" }, [_vm._v("7,842,900")]),
              _c("div", { staticClass: "stats-progress progress" }, [
                _c("div", {
                  staticClass: "progress-bar",
                  staticStyle: { width: "70.1%" }
                })
              ]),
              _c("div", { staticClass: "stats-desc" }, [
                _vm._v("Better than last week (70.1%)")
              ])
            ])
          ]
        )
      ]),
      _c("div", { staticClass: "col-lg-4" }, [
        _c(
          "div",
          { staticClass: "widget widget-stats bg-gradient-blue m-b-10" },
          [
            _c("div", { staticClass: "stats-icon stats-icon-lg" }, [
              _c("i", { staticClass: "fa fa-dollar-sign fa-fw" })
            ]),
            _c("div", { staticClass: "stats-content" }, [
              _c("div", { staticClass: "stats-title" }, [
                _vm._v("TODAY'S PROFIT")
              ]),
              _c("div", { staticClass: "stats-number" }, [_vm._v("180,200")]),
              _c("div", { staticClass: "stats-progress progress" }, [
                _c("div", {
                  staticClass: "progress-bar",
                  staticStyle: { width: "40.5%" }
                })
              ]),
              _c("div", { staticClass: "stats-desc" }, [
                _vm._v("Better than last week (40.5%)")
              ])
            ])
          ]
        )
      ]),
      _c("div", { staticClass: "col-lg-4" }, [
        _c(
          "div",
          { staticClass: "widget widget-stats bg-gradient-purple m-b-10" },
          [
            _c("div", { staticClass: "stats-icon stats-icon-lg" }, [
              _c("i", { staticClass: "fa fa-archive fa-fw" })
            ]),
            _c("div", { staticClass: "stats-content" }, [
              _c("div", { staticClass: "stats-title" }, [_vm._v("NEW ORDERS")]),
              _c("div", { staticClass: "stats-number" }, [_vm._v("38,900")]),
              _c("div", { staticClass: "stats-progress progress" }, [
                _c("div", {
                  staticClass: "progress-bar",
                  staticStyle: { width: "76.3%" }
                })
              ]),
              _c("div", { staticClass: "stats-desc" }, [
                _vm._v("Better than last week (76.3%)")
              ])
            ])
          ]
        )
      ]),
      _c("div", { staticClass: "col-lg-4" }, [
        _c(
          "div",
          { staticClass: "widget widget-stats bg-gradient-black m-b-10" },
          [
            _c("div", { staticClass: "stats-icon stats-icon-lg" }, [
              _c("i", { staticClass: "fa fa-comment-alt fa-fw" })
            ]),
            _c("div", { staticClass: "stats-content" }, [
              _c("div", { staticClass: "stats-title" }, [
                _vm._v("NEW COMMENTS")
              ]),
              _c("div", { staticClass: "stats-number" }, [_vm._v("3,988")]),
              _c("div", { staticClass: "stats-progress progress" }, [
                _c("div", {
                  staticClass: "progress-bar",
                  staticStyle: { width: "54.9%" }
                })
              ]),
              _c("div", { staticClass: "stats-desc" }, [
                _vm._v("Better than last week (54.9%)")
              ])
            ])
          ]
        )
      ]),
      _c("div", { staticClass: "col-lg-4" }, [
        _c(
          "div",
          { staticClass: "widget widget-stats bg-gradient-orange m-b-10" },
          [
            _c("div", { staticClass: "stats-icon stats-icon-lg" }, [
              _c("i", { staticClass: "fa fa-file-alt fa-fw" })
            ]),
            _c("div", { staticClass: "stats-content" }, [
              _c("div", { staticClass: "stats-title" }, [
                _vm._v("PENDING INVOICE")
              ]),
              _c("div", { staticClass: "stats-number" }, [_vm._v("20")]),
              _c("div", { staticClass: "stats-progress progress" }, [
                _c("div", {
                  staticClass: "progress-bar",
                  staticStyle: { width: "23.5%" }
                })
              ]),
              _c("div", { staticClass: "stats-desc" }, [
                _vm._v("More than last week (23.5%)")
              ])
            ])
          ]
        )
      ]),
      _c("div", { staticClass: "col-lg-4" }, [
        _c("div", { staticClass: "widget widget-stats bg-pink m-b-10" }, [
          _c("div", { staticClass: "stats-icon stats-icon-lg" }, [
            _c("i", { staticClass: "fa fa-exclamation-triangle fa-fw" })
          ]),
          _c("div", { staticClass: "stats-content" }, [
            _c("div", { staticClass: "stats-title" }, [_vm._v("ERROR LOG")]),
            _c("div", { staticClass: "stats-number" }, [_vm._v("5")]),
            _c("div", { staticClass: "stats-progress progress" }, [
              _c("div", {
                staticClass: "progress-bar",
                staticStyle: { width: "10.5%" }
              })
            ]),
            _c("div", { staticClass: "stats-desc" }, [
              _vm._v("More than last week (10.5%)")
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "widget-header" }, [
      _c("h4", { staticClass: "widget-header-title" }, [
        _vm._v("Audience Overview")
      ]),
      _c("div", { staticClass: "widget-header-icon" }, [
        _c(
          "a",
          { staticClass: "text-muted", attrs: { href: "javascript:;" } },
          [_c("i", { staticClass: "fa fa-fw fa-upload" })]
        )
      ]),
      _c("div", { staticClass: "widget-header-icon" }, [
        _c(
          "a",
          { staticClass: "text-muted", attrs: { href: "javascript:;" } },
          [_c("i", { staticClass: "fa fa-fw fa-cog" })]
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      {
        staticClass: "vertical-box-column p-15",
        staticStyle: { width: "30%" }
      },
      [
        _c("div", { staticClass: "widget-chart-info" }, [
          _c("h4", { staticClass: "widget-chart-info-title" }, [
            _vm._v("Total sales")
          ]),
          _c("p", { staticClass: "widget-chart-info-desc" }, [
            _vm._v("Lorem ipsum dolor sit consectetur adipiscing elit.")
          ]),
          _c("div", { staticClass: "widget-chart-info-progress" }, [
            _c("b", [_vm._v("Monthly Plan")]),
            _c("span", { staticClass: "pull-right" }, [_vm._v("70%")])
          ]),
          _c("div", { staticClass: "progress progress-sm" }, [
            _c("div", {
              staticClass:
                "progress-bar progress-bar-striped progress-bar-animated rounded-corner",
              staticStyle: { width: "70%" }
            })
          ])
        ]),
        _c("hr"),
        _c("div", { staticClass: "widget-chart-info" }, [
          _c("h4", { staticClass: "widget-chart-info-title" }, [
            _vm._v("Task progress")
          ]),
          _c("p", { staticClass: "widget-chart-info-desc" }, [
            _vm._v("Vestibulum sollicitudin in lectus a cursus.")
          ]),
          _c("div", { staticClass: "widget-chart-info-progress" }, [
            _c("b", [_vm._v("Marketing Research")]),
            _c("span", { staticClass: "pull-right" }, [_vm._v("74%")])
          ]),
          _c("div", { staticClass: "progress progress-sm m-b-15" }, [
            _c("div", {
              staticClass:
                "progress-bar progress-bar-striped progress-bar-animated rounded-corner bg-indigo",
              staticStyle: { width: "74%" }
            })
          ]),
          _c("div", { staticClass: "widget-chart-info-progress" }, [
            _c("b", [_vm._v("Mobile App Development")]),
            _c("span", { staticClass: "pull-right" }, [_vm._v("25%")])
          ]),
          _c("div", { staticClass: "progress progress-sm m-b-15" }, [
            _c("div", {
              staticClass:
                "progress-bar progress-bar-striped progress-bar-animated rounded-corner bg-green",
              staticStyle: { width: "25%" }
            })
          ]),
          _c("div", { staticClass: "widget-chart-info-progress" }, [
            _c("b", [_vm._v("Website Redesign")]),
            _c("span", { staticClass: "pull-right" }, [_vm._v("95%")])
          ]),
          _c("div", { staticClass: "progress progress-sm" }, [
            _c("div", {
              staticClass:
                "progress-bar progress-bar-striped progress-bar-animated rounded-corner bg-orange",
              staticStyle: { width: "95%" }
            })
          ])
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("thead", [
      _c("tr", [
        _c("th", { attrs: { width: "1%" } }, [_vm._v("Image")]),
        _c("th", [_vm._v("Product Info")]),
        _c("th", [_vm._v("Price")]),
        _c("th", [_vm._v("Qty")]),
        _c("th", [_vm._v("Total")]),
        _c("th")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", [
      _c("div", {
        staticClass: "widget-table-img",
        staticStyle: {
          "background-image": "url(/assets/img/product/product-6.png)"
        }
      })
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      { staticClass: "progress progress-sm rounded-corner m-b-5" },
      [
        _c(
          "div",
          {
            staticClass:
              "progress-bar progress-bar-striped progress-bar-animated bg-orange f-s-10 f-w-600",
            staticStyle: { width: "30%" }
          },
          [_vm._v("30%")]
        )
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("td", [
      _c("div", {
        staticClass: "widget-table-img",
        staticStyle: {
          "background-image": "url(/assets/img/product/product-7.png)"
        }
      })
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      { staticClass: "progress progress-sm rounded-corner m-b-5" },
      [
        _c(
          "div",
          {
            staticClass:
              "progress-bar progress-bar-striped progress-bar-animated bg-success f-s-10 f-w-600",
            staticStyle: { width: "100%" }
          },
          [_vm._v("100%")]
        )
      ]
    )
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}