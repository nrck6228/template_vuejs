{"remainingRequest":"D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\vue-project\\template_vuejs\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vue-project\\template_vuejs\\src\\pages\\UI-tabs-accordion.vue?vue&type=template&id=06deef3e&","dependencies":[{"path":"D:\\vue-project\\template_vuejs\\src\\pages\\UI-tabs-accordion.vue","mtime":1564469942000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}