{"remainingRequest":"D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\vue-project\\template_vuejs\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vue-project\\template_vuejs\\src\\pages\\Dashboard-v2.vue?vue&type=template&id=3f4d570e&","dependencies":[{"path":"D:\\vue-project\\template_vuejs\\src\\pages\\Dashboard-v2.vue","mtime":1564447580000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\vue-project\\template_vuejs\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}